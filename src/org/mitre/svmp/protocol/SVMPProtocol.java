// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svmp.proto

package org.mitre.svmp.protocol;

public final class SVMPProtocol {
  private SVMPProtocol() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * Protobuf enum {@code svmp.IntentAction}
   */
  public enum IntentAction
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>ACTION_VIEW = 1;</code>
     */
    ACTION_VIEW(0, 1),
    /**
     * <code>ACTION_DIAL = 2;</code>
     */
    ACTION_DIAL(1, 2),
    ;

    /**
     * <code>ACTION_VIEW = 1;</code>
     */
    public static final int ACTION_VIEW_VALUE = 1;
    /**
     * <code>ACTION_DIAL = 2;</code>
     */
    public static final int ACTION_DIAL_VALUE = 2;


    public final int getNumber() { return value; }

    public static IntentAction valueOf(int value) {
      switch (value) {
        case 1: return ACTION_VIEW;
        case 2: return ACTION_DIAL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<IntentAction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<IntentAction>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<IntentAction>() {
            public IntentAction findValueByNumber(int number) {
              return IntentAction.valueOf(number);
            }
          };

    private final int value;

    private IntentAction(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:svmp.IntentAction)
  }

  /**
   * Protobuf enum {@code svmp.SensorType}
   *
   * <pre>
   * Synced with android.hardware.Sensor
   * </pre>
   */
  public enum SensorType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>ACCELEROMETER = 1;</code>
     */
    ACCELEROMETER(0, 1),
    /**
     * <code>MAGNETIC_FIELD = 2;</code>
     */
    MAGNETIC_FIELD(1, 2),
    /**
     * <code>ORIENTATION = 3;</code>
     */
    ORIENTATION(2, 3),
    /**
     * <code>GYROSCOPE = 4;</code>
     */
    GYROSCOPE(3, 4),
    /**
     * <code>LIGHT = 5;</code>
     */
    LIGHT(4, 5),
    /**
     * <code>PRESSURE = 6;</code>
     */
    PRESSURE(5, 6),
    /**
     * <code>TEMPERATURE = 7;</code>
     */
    TEMPERATURE(6, 7),
    /**
     * <code>PROXIMITY = 8;</code>
     */
    PROXIMITY(7, 8),
    /**
     * <code>GRAVITY = 9;</code>
     */
    GRAVITY(8, 9),
    /**
     * <code>LINEAR_ACCELERATION = 10;</code>
     */
    LINEAR_ACCELERATION(9, 10),
    /**
     * <code>ROTATION_VECTOR = 11;</code>
     */
    ROTATION_VECTOR(10, 11),
    /**
     * <code>RELATIVE_HUMIDITY = 12;</code>
     */
    RELATIVE_HUMIDITY(11, 12),
    /**
     * <code>AMBIENT_TEMPERATURE = 13;</code>
     */
    AMBIENT_TEMPERATURE(12, 13),
    ;

    /**
     * <code>ACCELEROMETER = 1;</code>
     */
    public static final int ACCELEROMETER_VALUE = 1;
    /**
     * <code>MAGNETIC_FIELD = 2;</code>
     */
    public static final int MAGNETIC_FIELD_VALUE = 2;
    /**
     * <code>ORIENTATION = 3;</code>
     */
    public static final int ORIENTATION_VALUE = 3;
    /**
     * <code>GYROSCOPE = 4;</code>
     */
    public static final int GYROSCOPE_VALUE = 4;
    /**
     * <code>LIGHT = 5;</code>
     */
    public static final int LIGHT_VALUE = 5;
    /**
     * <code>PRESSURE = 6;</code>
     */
    public static final int PRESSURE_VALUE = 6;
    /**
     * <code>TEMPERATURE = 7;</code>
     */
    public static final int TEMPERATURE_VALUE = 7;
    /**
     * <code>PROXIMITY = 8;</code>
     */
    public static final int PROXIMITY_VALUE = 8;
    /**
     * <code>GRAVITY = 9;</code>
     */
    public static final int GRAVITY_VALUE = 9;
    /**
     * <code>LINEAR_ACCELERATION = 10;</code>
     */
    public static final int LINEAR_ACCELERATION_VALUE = 10;
    /**
     * <code>ROTATION_VECTOR = 11;</code>
     */
    public static final int ROTATION_VECTOR_VALUE = 11;
    /**
     * <code>RELATIVE_HUMIDITY = 12;</code>
     */
    public static final int RELATIVE_HUMIDITY_VALUE = 12;
    /**
     * <code>AMBIENT_TEMPERATURE = 13;</code>
     */
    public static final int AMBIENT_TEMPERATURE_VALUE = 13;


    public final int getNumber() { return value; }

    public static SensorType valueOf(int value) {
      switch (value) {
        case 1: return ACCELEROMETER;
        case 2: return MAGNETIC_FIELD;
        case 3: return ORIENTATION;
        case 4: return GYROSCOPE;
        case 5: return LIGHT;
        case 6: return PRESSURE;
        case 7: return TEMPERATURE;
        case 8: return PROXIMITY;
        case 9: return GRAVITY;
        case 10: return LINEAR_ACCELERATION;
        case 11: return ROTATION_VECTOR;
        case 12: return RELATIVE_HUMIDITY;
        case 13: return AMBIENT_TEMPERATURE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SensorType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SensorType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SensorType>() {
            public SensorType findValueByNumber(int number) {
              return SensorType.valueOf(number);
            }
          };

    private final int value;

    private SensorType(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:svmp.SensorType)
  }

  public interface RequestOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .svmp.Request.RequestType type = 1;
    /**
     * <code>required .svmp.Request.RequestType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .svmp.Request.RequestType type = 1;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType getType();

    // repeated .svmp.TouchEvent touch = 2;
    /**
     * <code>repeated .svmp.TouchEvent touch = 2;</code>
     *
     * <pre>
     * repeated to allow batching multiple events in a single message
     * </pre>
     */
    java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent> 
        getTouchList();
    /**
     * <code>repeated .svmp.TouchEvent touch = 2;</code>
     *
     * <pre>
     * repeated to allow batching multiple events in a single message
     * </pre>
     */
    org.mitre.svmp.protocol.SVMPProtocol.TouchEvent getTouch(int index);
    /**
     * <code>repeated .svmp.TouchEvent touch = 2;</code>
     *
     * <pre>
     * repeated to allow batching multiple events in a single message
     * </pre>
     */
    int getTouchCount();

    // repeated .svmp.SensorEvent sensor = 3;
    /**
     * <code>repeated .svmp.SensorEvent sensor = 3;</code>
     */
    java.util.List<org.mitre.svmp.protocol.SVMPProtocol.SensorEvent> 
        getSensorList();
    /**
     * <code>repeated .svmp.SensorEvent sensor = 3;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.SensorEvent getSensor(int index);
    /**
     * <code>repeated .svmp.SensorEvent sensor = 3;</code>
     */
    int getSensorCount();

    // optional .svmp.LocationRequest locationRequest = 6;
    /**
     * <code>optional .svmp.LocationRequest locationRequest = 6;</code>
     */
    boolean hasLocationRequest();
    /**
     * <code>optional .svmp.LocationRequest locationRequest = 6;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.LocationRequest getLocationRequest();

    // optional .svmp.Intent intent = 7;
    /**
     * <code>optional .svmp.Intent intent = 7;</code>
     */
    boolean hasIntent();
    /**
     * <code>optional .svmp.Intent intent = 7;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.Intent getIntent();

    // optional .svmp.WebRTCMessage webrtcMsg = 9;
    /**
     * <code>optional .svmp.WebRTCMessage webrtcMsg = 9;</code>
     */
    boolean hasWebrtcMsg();
    /**
     * <code>optional .svmp.WebRTCMessage webrtcMsg = 9;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage getWebrtcMsg();

    // optional .svmp.RotationInfo rotationInfo = 10;
    /**
     * <code>optional .svmp.RotationInfo rotationInfo = 10;</code>
     */
    boolean hasRotationInfo();
    /**
     * <code>optional .svmp.RotationInfo rotationInfo = 10;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.RotationInfo getRotationInfo();

    // optional .svmp.Ping pingRequest = 11;
    /**
     * <code>optional .svmp.Ping pingRequest = 11;</code>
     */
    boolean hasPingRequest();
    /**
     * <code>optional .svmp.Ping pingRequest = 11;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.Ping getPingRequest();

    // optional .svmp.VideoStreamInfo videoInfo = 12;
    /**
     * <code>optional .svmp.VideoStreamInfo videoInfo = 12;</code>
     *
     * <pre>
     * server-&gt;VM message
     * </pre>
     */
    boolean hasVideoInfo();
    /**
     * <code>optional .svmp.VideoStreamInfo videoInfo = 12;</code>
     *
     * <pre>
     * server-&gt;VM message
     * </pre>
     */
    org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo getVideoInfo();

    // optional string timezoneId = 13;
    /**
     * <code>optional string timezoneId = 13;</code>
     */
    boolean hasTimezoneId();
    /**
     * <code>optional string timezoneId = 13;</code>
     */
    java.lang.String getTimezoneId();
    /**
     * <code>optional string timezoneId = 13;</code>
     */
    com.google.protobuf.ByteString
        getTimezoneIdBytes();

    // optional .svmp.AppsRequest apps = 14;
    /**
     * <code>optional .svmp.AppsRequest apps = 14;</code>
     */
    boolean hasApps();
    /**
     * <code>optional .svmp.AppsRequest apps = 14;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.AppsRequest getApps();

    // optional .svmp.KeyEvent key = 15;
    /**
     * <code>optional .svmp.KeyEvent key = 15;</code>
     */
    boolean hasKey();
    /**
     * <code>optional .svmp.KeyEvent key = 15;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.KeyEvent getKey();

    // optional .svmp.Config config = 16;
    /**
     * <code>optional .svmp.Config config = 16;</code>
     */
    boolean hasConfig();
    /**
     * <code>optional .svmp.Config config = 16;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.Config getConfig();
  }
  /**
   * Protobuf type {@code svmp.Request}
   *
   * <pre>
   * Client to server message wrapper
   * </pre>
   */
  public static final class Request extends
      com.google.protobuf.GeneratedMessageLite
      implements RequestOrBuilder {
    // Use Request.newBuilder() to construct.
    private Request(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private Request(boolean noInit) {}

    private static final Request defaultInstance;
    public static Request getDefaultInstance() {
      return defaultInstance;
    }

    public Request getDefaultInstanceForType() {
      return defaultInstance;
    }

    private Request(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType value = org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                touch_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent>();
                mutable_bitField0_ |= 0x00000002;
              }
              touch_.add(input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                sensor_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.SensorEvent>();
                mutable_bitField0_ |= 0x00000004;
              }
              sensor_.add(input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = locationRequest_.toBuilder();
              }
              locationRequest_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(locationRequest_);
                locationRequest_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 58: {
              org.mitre.svmp.protocol.SVMPProtocol.Intent.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = intent_.toBuilder();
              }
              intent_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.Intent.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(intent_);
                intent_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 74: {
              org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = webrtcMsg_.toBuilder();
              }
              webrtcMsg_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(webrtcMsg_);
                webrtcMsg_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 82: {
              org.mitre.svmp.protocol.SVMPProtocol.RotationInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = rotationInfo_.toBuilder();
              }
              rotationInfo_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.RotationInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(rotationInfo_);
                rotationInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 90: {
              org.mitre.svmp.protocol.SVMPProtocol.Ping.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = pingRequest_.toBuilder();
              }
              pingRequest_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.Ping.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pingRequest_);
                pingRequest_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 98: {
              org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = videoInfo_.toBuilder();
              }
              videoInfo_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(videoInfo_);
                videoInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 106: {
              bitField0_ |= 0x00000080;
              timezoneId_ = input.readBytes();
              break;
            }
            case 114: {
              org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = apps_.toBuilder();
              }
              apps_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(apps_);
                apps_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 122: {
              org.mitre.svmp.protocol.SVMPProtocol.KeyEvent.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = key_.toBuilder();
              }
              key_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.KeyEvent.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(key_);
                key_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 130: {
              org.mitre.svmp.protocol.SVMPProtocol.Config.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = config_.toBuilder();
              }
              config_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.Config.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(config_);
                config_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          touch_ = java.util.Collections.unmodifiableList(touch_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          sensor_ = java.util.Collections.unmodifiableList(sensor_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Request> PARSER =
        new com.google.protobuf.AbstractParser<Request>() {
      public Request parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Request(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Request> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code svmp.Request.RequestType}
     */
    public enum RequestType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>VIDEO_PARAMS = 0;</code>
       */
      VIDEO_PARAMS(0, 0),
      /**
       * <code>TOUCHEVENT = 1;</code>
       */
      TOUCHEVENT(1, 1),
      /**
       * <code>SENSOREVENT = 2;</code>
       */
      SENSOREVENT(2, 2),
      /**
       * <code>LOCATION = 3;</code>
       */
      LOCATION(3, 3),
      /**
       * <code>INTENT = 4;</code>
       */
      INTENT(4, 4),
      /**
       * <code>SCREENINFO = 5;</code>
       */
      SCREENINFO(5, 5),
      /**
       * <code>WEBRTC = 6;</code>
       */
      WEBRTC(6, 6),
      /**
       * <code>ROTATION_INFO = 7;</code>
       */
      ROTATION_INFO(7, 7),
      /**
       * <code>PING = 8;</code>
       *
       * <pre>
       * client-initiated ping measurement (ms)
       * </pre>
       */
      PING(8, 8),
      /**
       * <code>TIMEZONE = 9;</code>
       */
      TIMEZONE(9, 9),
      /**
       * <code>APPS = 10;</code>
       *
       * <pre>
       * client request for available apps on the VM
       * </pre>
       */
      APPS(10, 10),
      /**
       * <code>KEYEVENT = 11;</code>
       */
      KEYEVENT(11, 11),
      /**
       * <code>CONFIG = 12;</code>
       */
      CONFIG(12, 12),
      ;

      /**
       * <code>VIDEO_PARAMS = 0;</code>
       */
      public static final int VIDEO_PARAMS_VALUE = 0;
      /**
       * <code>TOUCHEVENT = 1;</code>
       */
      public static final int TOUCHEVENT_VALUE = 1;
      /**
       * <code>SENSOREVENT = 2;</code>
       */
      public static final int SENSOREVENT_VALUE = 2;
      /**
       * <code>LOCATION = 3;</code>
       */
      public static final int LOCATION_VALUE = 3;
      /**
       * <code>INTENT = 4;</code>
       */
      public static final int INTENT_VALUE = 4;
      /**
       * <code>SCREENINFO = 5;</code>
       */
      public static final int SCREENINFO_VALUE = 5;
      /**
       * <code>WEBRTC = 6;</code>
       */
      public static final int WEBRTC_VALUE = 6;
      /**
       * <code>ROTATION_INFO = 7;</code>
       */
      public static final int ROTATION_INFO_VALUE = 7;
      /**
       * <code>PING = 8;</code>
       *
       * <pre>
       * client-initiated ping measurement (ms)
       * </pre>
       */
      public static final int PING_VALUE = 8;
      /**
       * <code>TIMEZONE = 9;</code>
       */
      public static final int TIMEZONE_VALUE = 9;
      /**
       * <code>APPS = 10;</code>
       *
       * <pre>
       * client request for available apps on the VM
       * </pre>
       */
      public static final int APPS_VALUE = 10;
      /**
       * <code>KEYEVENT = 11;</code>
       */
      public static final int KEYEVENT_VALUE = 11;
      /**
       * <code>CONFIG = 12;</code>
       */
      public static final int CONFIG_VALUE = 12;


      public final int getNumber() { return value; }

      public static RequestType valueOf(int value) {
        switch (value) {
          case 0: return VIDEO_PARAMS;
          case 1: return TOUCHEVENT;
          case 2: return SENSOREVENT;
          case 3: return LOCATION;
          case 4: return INTENT;
          case 5: return SCREENINFO;
          case 6: return WEBRTC;
          case 7: return ROTATION_INFO;
          case 8: return PING;
          case 9: return TIMEZONE;
          case 10: return APPS;
          case 11: return KEYEVENT;
          case 12: return CONFIG;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<RequestType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<RequestType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RequestType>() {
              public RequestType findValueByNumber(int number) {
                return RequestType.valueOf(number);
              }
            };

      private final int value;

      private RequestType(int index, int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:svmp.Request.RequestType)
    }

    private int bitField0_;
    // required .svmp.Request.RequestType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType type_;
    /**
     * <code>required .svmp.Request.RequestType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .svmp.Request.RequestType type = 1;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType getType() {
      return type_;
    }

    // repeated .svmp.TouchEvent touch = 2;
    public static final int TOUCH_FIELD_NUMBER = 2;
    private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent> touch_;
    /**
     * <code>repeated .svmp.TouchEvent touch = 2;</code>
     *
     * <pre>
     * repeated to allow batching multiple events in a single message
     * </pre>
     */
    public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent> getTouchList() {
      return touch_;
    }
    /**
     * <code>repeated .svmp.TouchEvent touch = 2;</code>
     *
     * <pre>
     * repeated to allow batching multiple events in a single message
     * </pre>
     */
    public java.util.List<? extends org.mitre.svmp.protocol.SVMPProtocol.TouchEventOrBuilder> 
        getTouchOrBuilderList() {
      return touch_;
    }
    /**
     * <code>repeated .svmp.TouchEvent touch = 2;</code>
     *
     * <pre>
     * repeated to allow batching multiple events in a single message
     * </pre>
     */
    public int getTouchCount() {
      return touch_.size();
    }
    /**
     * <code>repeated .svmp.TouchEvent touch = 2;</code>
     *
     * <pre>
     * repeated to allow batching multiple events in a single message
     * </pre>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent getTouch(int index) {
      return touch_.get(index);
    }
    /**
     * <code>repeated .svmp.TouchEvent touch = 2;</code>
     *
     * <pre>
     * repeated to allow batching multiple events in a single message
     * </pre>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.TouchEventOrBuilder getTouchOrBuilder(
        int index) {
      return touch_.get(index);
    }

    // repeated .svmp.SensorEvent sensor = 3;
    public static final int SENSOR_FIELD_NUMBER = 3;
    private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.SensorEvent> sensor_;
    /**
     * <code>repeated .svmp.SensorEvent sensor = 3;</code>
     */
    public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.SensorEvent> getSensorList() {
      return sensor_;
    }
    /**
     * <code>repeated .svmp.SensorEvent sensor = 3;</code>
     */
    public java.util.List<? extends org.mitre.svmp.protocol.SVMPProtocol.SensorEventOrBuilder> 
        getSensorOrBuilderList() {
      return sensor_;
    }
    /**
     * <code>repeated .svmp.SensorEvent sensor = 3;</code>
     */
    public int getSensorCount() {
      return sensor_.size();
    }
    /**
     * <code>repeated .svmp.SensorEvent sensor = 3;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.SensorEvent getSensor(int index) {
      return sensor_.get(index);
    }
    /**
     * <code>repeated .svmp.SensorEvent sensor = 3;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.SensorEventOrBuilder getSensorOrBuilder(
        int index) {
      return sensor_.get(index);
    }

    // optional .svmp.LocationRequest locationRequest = 6;
    public static final int LOCATIONREQUEST_FIELD_NUMBER = 6;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationRequest locationRequest_;
    /**
     * <code>optional .svmp.LocationRequest locationRequest = 6;</code>
     */
    public boolean hasLocationRequest() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .svmp.LocationRequest locationRequest = 6;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.LocationRequest getLocationRequest() {
      return locationRequest_;
    }

    // optional .svmp.Intent intent = 7;
    public static final int INTENT_FIELD_NUMBER = 7;
    private org.mitre.svmp.protocol.SVMPProtocol.Intent intent_;
    /**
     * <code>optional .svmp.Intent intent = 7;</code>
     */
    public boolean hasIntent() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .svmp.Intent intent = 7;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.Intent getIntent() {
      return intent_;
    }

    // optional .svmp.WebRTCMessage webrtcMsg = 9;
    public static final int WEBRTCMSG_FIELD_NUMBER = 9;
    private org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage webrtcMsg_;
    /**
     * <code>optional .svmp.WebRTCMessage webrtcMsg = 9;</code>
     */
    public boolean hasWebrtcMsg() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .svmp.WebRTCMessage webrtcMsg = 9;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage getWebrtcMsg() {
      return webrtcMsg_;
    }

    // optional .svmp.RotationInfo rotationInfo = 10;
    public static final int ROTATIONINFO_FIELD_NUMBER = 10;
    private org.mitre.svmp.protocol.SVMPProtocol.RotationInfo rotationInfo_;
    /**
     * <code>optional .svmp.RotationInfo rotationInfo = 10;</code>
     */
    public boolean hasRotationInfo() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .svmp.RotationInfo rotationInfo = 10;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.RotationInfo getRotationInfo() {
      return rotationInfo_;
    }

    // optional .svmp.Ping pingRequest = 11;
    public static final int PINGREQUEST_FIELD_NUMBER = 11;
    private org.mitre.svmp.protocol.SVMPProtocol.Ping pingRequest_;
    /**
     * <code>optional .svmp.Ping pingRequest = 11;</code>
     */
    public boolean hasPingRequest() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .svmp.Ping pingRequest = 11;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.Ping getPingRequest() {
      return pingRequest_;
    }

    // optional .svmp.VideoStreamInfo videoInfo = 12;
    public static final int VIDEOINFO_FIELD_NUMBER = 12;
    private org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo videoInfo_;
    /**
     * <code>optional .svmp.VideoStreamInfo videoInfo = 12;</code>
     *
     * <pre>
     * server-&gt;VM message
     * </pre>
     */
    public boolean hasVideoInfo() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .svmp.VideoStreamInfo videoInfo = 12;</code>
     *
     * <pre>
     * server-&gt;VM message
     * </pre>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo getVideoInfo() {
      return videoInfo_;
    }

    // optional string timezoneId = 13;
    public static final int TIMEZONEID_FIELD_NUMBER = 13;
    private java.lang.Object timezoneId_;
    /**
     * <code>optional string timezoneId = 13;</code>
     */
    public boolean hasTimezoneId() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional string timezoneId = 13;</code>
     */
    public java.lang.String getTimezoneId() {
      java.lang.Object ref = timezoneId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          timezoneId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string timezoneId = 13;</code>
     */
    public com.google.protobuf.ByteString
        getTimezoneIdBytes() {
      java.lang.Object ref = timezoneId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        timezoneId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .svmp.AppsRequest apps = 14;
    public static final int APPS_FIELD_NUMBER = 14;
    private org.mitre.svmp.protocol.SVMPProtocol.AppsRequest apps_;
    /**
     * <code>optional .svmp.AppsRequest apps = 14;</code>
     */
    public boolean hasApps() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .svmp.AppsRequest apps = 14;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.AppsRequest getApps() {
      return apps_;
    }

    // optional .svmp.KeyEvent key = 15;
    public static final int KEY_FIELD_NUMBER = 15;
    private org.mitre.svmp.protocol.SVMPProtocol.KeyEvent key_;
    /**
     * <code>optional .svmp.KeyEvent key = 15;</code>
     */
    public boolean hasKey() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .svmp.KeyEvent key = 15;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.KeyEvent getKey() {
      return key_;
    }

    // optional .svmp.Config config = 16;
    public static final int CONFIG_FIELD_NUMBER = 16;
    private org.mitre.svmp.protocol.SVMPProtocol.Config config_;
    /**
     * <code>optional .svmp.Config config = 16;</code>
     */
    public boolean hasConfig() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .svmp.Config config = 16;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.Config getConfig() {
      return config_;
    }

    private void initFields() {
      type_ = org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType.VIDEO_PARAMS;
      touch_ = java.util.Collections.emptyList();
      sensor_ = java.util.Collections.emptyList();
      locationRequest_ = org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.getDefaultInstance();
      intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
      webrtcMsg_ = org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.getDefaultInstance();
      rotationInfo_ = org.mitre.svmp.protocol.SVMPProtocol.RotationInfo.getDefaultInstance();
      pingRequest_ = org.mitre.svmp.protocol.SVMPProtocol.Ping.getDefaultInstance();
      videoInfo_ = org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance();
      timezoneId_ = "";
      apps_ = org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.getDefaultInstance();
      key_ = org.mitre.svmp.protocol.SVMPProtocol.KeyEvent.getDefaultInstance();
      config_ = org.mitre.svmp.protocol.SVMPProtocol.Config.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getTouchCount(); i++) {
        if (!getTouch(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getSensorCount(); i++) {
        if (!getSensor(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasLocationRequest()) {
        if (!getLocationRequest().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasIntent()) {
        if (!getIntent().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRotationInfo()) {
        if (!getRotationInfo().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPingRequest()) {
        if (!getPingRequest().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasApps()) {
        if (!getApps().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasKey()) {
        if (!getKey().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      for (int i = 0; i < touch_.size(); i++) {
        output.writeMessage(2, touch_.get(i));
      }
      for (int i = 0; i < sensor_.size(); i++) {
        output.writeMessage(3, sensor_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(6, locationRequest_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(7, intent_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(9, webrtcMsg_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(10, rotationInfo_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(11, pingRequest_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(12, videoInfo_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBytes(13, getTimezoneIdBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(14, apps_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(15, key_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(16, config_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      for (int i = 0; i < touch_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, touch_.get(i));
      }
      for (int i = 0; i < sensor_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, sensor_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, locationRequest_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, intent_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, webrtcMsg_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, rotationInfo_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, pingRequest_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, videoInfo_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(13, getTimezoneIdBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, apps_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, key_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, config_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Request prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.Request}
     *
     * <pre>
     * Client to server message wrapper
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.Request, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.RequestOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.Request.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType.VIDEO_PARAMS;
        bitField0_ = (bitField0_ & ~0x00000001);
        touch_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        sensor_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        locationRequest_ = org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000008);
        intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000010);
        webrtcMsg_ = org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000020);
        rotationInfo_ = org.mitre.svmp.protocol.SVMPProtocol.RotationInfo.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000040);
        pingRequest_ = org.mitre.svmp.protocol.SVMPProtocol.Ping.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000080);
        videoInfo_ = org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000100);
        timezoneId_ = "";
        bitField0_ = (bitField0_ & ~0x00000200);
        apps_ = org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000400);
        key_ = org.mitre.svmp.protocol.SVMPProtocol.KeyEvent.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000800);
        config_ = org.mitre.svmp.protocol.SVMPProtocol.Config.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Request getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.Request.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Request build() {
        org.mitre.svmp.protocol.SVMPProtocol.Request result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Request buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.Request result = new org.mitre.svmp.protocol.SVMPProtocol.Request(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          touch_ = java.util.Collections.unmodifiableList(touch_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.touch_ = touch_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          sensor_ = java.util.Collections.unmodifiableList(sensor_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.sensor_ = sensor_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.locationRequest_ = locationRequest_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.intent_ = intent_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.webrtcMsg_ = webrtcMsg_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.rotationInfo_ = rotationInfo_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.pingRequest_ = pingRequest_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.videoInfo_ = videoInfo_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000080;
        }
        result.timezoneId_ = timezoneId_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000100;
        }
        result.apps_ = apps_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000200;
        }
        result.key_ = key_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.config_ = config_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Request other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.Request.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (!other.touch_.isEmpty()) {
          if (touch_.isEmpty()) {
            touch_ = other.touch_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureTouchIsMutable();
            touch_.addAll(other.touch_);
          }
          
        }
        if (!other.sensor_.isEmpty()) {
          if (sensor_.isEmpty()) {
            sensor_ = other.sensor_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureSensorIsMutable();
            sensor_.addAll(other.sensor_);
          }
          
        }
        if (other.hasLocationRequest()) {
          mergeLocationRequest(other.getLocationRequest());
        }
        if (other.hasIntent()) {
          mergeIntent(other.getIntent());
        }
        if (other.hasWebrtcMsg()) {
          mergeWebrtcMsg(other.getWebrtcMsg());
        }
        if (other.hasRotationInfo()) {
          mergeRotationInfo(other.getRotationInfo());
        }
        if (other.hasPingRequest()) {
          mergePingRequest(other.getPingRequest());
        }
        if (other.hasVideoInfo()) {
          mergeVideoInfo(other.getVideoInfo());
        }
        if (other.hasTimezoneId()) {
          bitField0_ |= 0x00000200;
          timezoneId_ = other.timezoneId_;
          
        }
        if (other.hasApps()) {
          mergeApps(other.getApps());
        }
        if (other.hasKey()) {
          mergeKey(other.getKey());
        }
        if (other.hasConfig()) {
          mergeConfig(other.getConfig());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        for (int i = 0; i < getTouchCount(); i++) {
          if (!getTouch(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getSensorCount(); i++) {
          if (!getSensor(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasLocationRequest()) {
          if (!getLocationRequest().isInitialized()) {
            
            return false;
          }
        }
        if (hasIntent()) {
          if (!getIntent().isInitialized()) {
            
            return false;
          }
        }
        if (hasRotationInfo()) {
          if (!getRotationInfo().isInitialized()) {
            
            return false;
          }
        }
        if (hasPingRequest()) {
          if (!getPingRequest().isInitialized()) {
            
            return false;
          }
        }
        if (hasApps()) {
          if (!getApps().isInitialized()) {
            
            return false;
          }
        }
        if (hasKey()) {
          if (!getKey().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.Request parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.Request) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .svmp.Request.RequestType type = 1;
      private org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType type_ = org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType.VIDEO_PARAMS;
      /**
       * <code>required .svmp.Request.RequestType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .svmp.Request.RequestType type = 1;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType getType() {
        return type_;
      }
      /**
       * <code>required .svmp.Request.RequestType type = 1;</code>
       */
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      /**
       * <code>required .svmp.Request.RequestType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType.VIDEO_PARAMS;
        
        return this;
      }

      // repeated .svmp.TouchEvent touch = 2;
      private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent> touch_ =
        java.util.Collections.emptyList();
      private void ensureTouchIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          touch_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent>(touch_);
          bitField0_ |= 0x00000002;
         }
      }

      /**
       * <code>repeated .svmp.TouchEvent touch = 2;</code>
       *
       * <pre>
       * repeated to allow batching multiple events in a single message
       * </pre>
       */
      public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent> getTouchList() {
        return java.util.Collections.unmodifiableList(touch_);
      }
      /**
       * <code>repeated .svmp.TouchEvent touch = 2;</code>
       *
       * <pre>
       * repeated to allow batching multiple events in a single message
       * </pre>
       */
      public int getTouchCount() {
        return touch_.size();
      }
      /**
       * <code>repeated .svmp.TouchEvent touch = 2;</code>
       *
       * <pre>
       * repeated to allow batching multiple events in a single message
       * </pre>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent getTouch(int index) {
        return touch_.get(index);
      }
      /**
       * <code>repeated .svmp.TouchEvent touch = 2;</code>
       *
       * <pre>
       * repeated to allow batching multiple events in a single message
       * </pre>
       */
      public Builder setTouch(
          int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTouchIsMutable();
        touch_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent touch = 2;</code>
       *
       * <pre>
       * repeated to allow batching multiple events in a single message
       * </pre>
       */
      public Builder setTouch(
          int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.Builder builderForValue) {
        ensureTouchIsMutable();
        touch_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent touch = 2;</code>
       *
       * <pre>
       * repeated to allow batching multiple events in a single message
       * </pre>
       */
      public Builder addTouch(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTouchIsMutable();
        touch_.add(value);

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent touch = 2;</code>
       *
       * <pre>
       * repeated to allow batching multiple events in a single message
       * </pre>
       */
      public Builder addTouch(
          int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTouchIsMutable();
        touch_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent touch = 2;</code>
       *
       * <pre>
       * repeated to allow batching multiple events in a single message
       * </pre>
       */
      public Builder addTouch(
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.Builder builderForValue) {
        ensureTouchIsMutable();
        touch_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent touch = 2;</code>
       *
       * <pre>
       * repeated to allow batching multiple events in a single message
       * </pre>
       */
      public Builder addTouch(
          int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.Builder builderForValue) {
        ensureTouchIsMutable();
        touch_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent touch = 2;</code>
       *
       * <pre>
       * repeated to allow batching multiple events in a single message
       * </pre>
       */
      public Builder addAllTouch(
          java.lang.Iterable<? extends org.mitre.svmp.protocol.SVMPProtocol.TouchEvent> values) {
        ensureTouchIsMutable();
        super.addAll(values, touch_);

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent touch = 2;</code>
       *
       * <pre>
       * repeated to allow batching multiple events in a single message
       * </pre>
       */
      public Builder clearTouch() {
        touch_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent touch = 2;</code>
       *
       * <pre>
       * repeated to allow batching multiple events in a single message
       * </pre>
       */
      public Builder removeTouch(int index) {
        ensureTouchIsMutable();
        touch_.remove(index);

        return this;
      }

      // repeated .svmp.SensorEvent sensor = 3;
      private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.SensorEvent> sensor_ =
        java.util.Collections.emptyList();
      private void ensureSensorIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          sensor_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.SensorEvent>(sensor_);
          bitField0_ |= 0x00000004;
         }
      }

      /**
       * <code>repeated .svmp.SensorEvent sensor = 3;</code>
       */
      public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.SensorEvent> getSensorList() {
        return java.util.Collections.unmodifiableList(sensor_);
      }
      /**
       * <code>repeated .svmp.SensorEvent sensor = 3;</code>
       */
      public int getSensorCount() {
        return sensor_.size();
      }
      /**
       * <code>repeated .svmp.SensorEvent sensor = 3;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.SensorEvent getSensor(int index) {
        return sensor_.get(index);
      }
      /**
       * <code>repeated .svmp.SensorEvent sensor = 3;</code>
       */
      public Builder setSensor(
          int index, org.mitre.svmp.protocol.SVMPProtocol.SensorEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSensorIsMutable();
        sensor_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.SensorEvent sensor = 3;</code>
       */
      public Builder setSensor(
          int index, org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.Builder builderForValue) {
        ensureSensorIsMutable();
        sensor_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.SensorEvent sensor = 3;</code>
       */
      public Builder addSensor(org.mitre.svmp.protocol.SVMPProtocol.SensorEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSensorIsMutable();
        sensor_.add(value);

        return this;
      }
      /**
       * <code>repeated .svmp.SensorEvent sensor = 3;</code>
       */
      public Builder addSensor(
          int index, org.mitre.svmp.protocol.SVMPProtocol.SensorEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSensorIsMutable();
        sensor_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.SensorEvent sensor = 3;</code>
       */
      public Builder addSensor(
          org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.Builder builderForValue) {
        ensureSensorIsMutable();
        sensor_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.SensorEvent sensor = 3;</code>
       */
      public Builder addSensor(
          int index, org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.Builder builderForValue) {
        ensureSensorIsMutable();
        sensor_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.SensorEvent sensor = 3;</code>
       */
      public Builder addAllSensor(
          java.lang.Iterable<? extends org.mitre.svmp.protocol.SVMPProtocol.SensorEvent> values) {
        ensureSensorIsMutable();
        super.addAll(values, sensor_);

        return this;
      }
      /**
       * <code>repeated .svmp.SensorEvent sensor = 3;</code>
       */
      public Builder clearSensor() {
        sensor_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);

        return this;
      }
      /**
       * <code>repeated .svmp.SensorEvent sensor = 3;</code>
       */
      public Builder removeSensor(int index) {
        ensureSensorIsMutable();
        sensor_.remove(index);

        return this;
      }

      // optional .svmp.LocationRequest locationRequest = 6;
      private org.mitre.svmp.protocol.SVMPProtocol.LocationRequest locationRequest_ = org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.getDefaultInstance();
      /**
       * <code>optional .svmp.LocationRequest locationRequest = 6;</code>
       */
      public boolean hasLocationRequest() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .svmp.LocationRequest locationRequest = 6;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.LocationRequest getLocationRequest() {
        return locationRequest_;
      }
      /**
       * <code>optional .svmp.LocationRequest locationRequest = 6;</code>
       */
      public Builder setLocationRequest(org.mitre.svmp.protocol.SVMPProtocol.LocationRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        locationRequest_ = value;

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .svmp.LocationRequest locationRequest = 6;</code>
       */
      public Builder setLocationRequest(
          org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.Builder builderForValue) {
        locationRequest_ = builderForValue.build();

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .svmp.LocationRequest locationRequest = 6;</code>
       */
      public Builder mergeLocationRequest(org.mitre.svmp.protocol.SVMPProtocol.LocationRequest value) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            locationRequest_ != org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.getDefaultInstance()) {
          locationRequest_ =
            org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.newBuilder(locationRequest_).mergeFrom(value).buildPartial();
        } else {
          locationRequest_ = value;
        }

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .svmp.LocationRequest locationRequest = 6;</code>
       */
      public Builder clearLocationRequest() {
        locationRequest_ = org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // optional .svmp.Intent intent = 7;
      private org.mitre.svmp.protocol.SVMPProtocol.Intent intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
      /**
       * <code>optional .svmp.Intent intent = 7;</code>
       */
      public boolean hasIntent() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .svmp.Intent intent = 7;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.Intent getIntent() {
        return intent_;
      }
      /**
       * <code>optional .svmp.Intent intent = 7;</code>
       */
      public Builder setIntent(org.mitre.svmp.protocol.SVMPProtocol.Intent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        intent_ = value;

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .svmp.Intent intent = 7;</code>
       */
      public Builder setIntent(
          org.mitre.svmp.protocol.SVMPProtocol.Intent.Builder builderForValue) {
        intent_ = builderForValue.build();

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .svmp.Intent intent = 7;</code>
       */
      public Builder mergeIntent(org.mitre.svmp.protocol.SVMPProtocol.Intent value) {
        if (((bitField0_ & 0x00000010) == 0x00000010) &&
            intent_ != org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance()) {
          intent_ =
            org.mitre.svmp.protocol.SVMPProtocol.Intent.newBuilder(intent_).mergeFrom(value).buildPartial();
        } else {
          intent_ = value;
        }

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .svmp.Intent intent = 7;</code>
       */
      public Builder clearIntent() {
        intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      // optional .svmp.WebRTCMessage webrtcMsg = 9;
      private org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage webrtcMsg_ = org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.getDefaultInstance();
      /**
       * <code>optional .svmp.WebRTCMessage webrtcMsg = 9;</code>
       */
      public boolean hasWebrtcMsg() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .svmp.WebRTCMessage webrtcMsg = 9;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage getWebrtcMsg() {
        return webrtcMsg_;
      }
      /**
       * <code>optional .svmp.WebRTCMessage webrtcMsg = 9;</code>
       */
      public Builder setWebrtcMsg(org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage value) {
        if (value == null) {
          throw new NullPointerException();
        }
        webrtcMsg_ = value;

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .svmp.WebRTCMessage webrtcMsg = 9;</code>
       */
      public Builder setWebrtcMsg(
          org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.Builder builderForValue) {
        webrtcMsg_ = builderForValue.build();

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .svmp.WebRTCMessage webrtcMsg = 9;</code>
       */
      public Builder mergeWebrtcMsg(org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage value) {
        if (((bitField0_ & 0x00000020) == 0x00000020) &&
            webrtcMsg_ != org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.getDefaultInstance()) {
          webrtcMsg_ =
            org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.newBuilder(webrtcMsg_).mergeFrom(value).buildPartial();
        } else {
          webrtcMsg_ = value;
        }

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .svmp.WebRTCMessage webrtcMsg = 9;</code>
       */
      public Builder clearWebrtcMsg() {
        webrtcMsg_ = org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      // optional .svmp.RotationInfo rotationInfo = 10;
      private org.mitre.svmp.protocol.SVMPProtocol.RotationInfo rotationInfo_ = org.mitre.svmp.protocol.SVMPProtocol.RotationInfo.getDefaultInstance();
      /**
       * <code>optional .svmp.RotationInfo rotationInfo = 10;</code>
       */
      public boolean hasRotationInfo() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .svmp.RotationInfo rotationInfo = 10;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.RotationInfo getRotationInfo() {
        return rotationInfo_;
      }
      /**
       * <code>optional .svmp.RotationInfo rotationInfo = 10;</code>
       */
      public Builder setRotationInfo(org.mitre.svmp.protocol.SVMPProtocol.RotationInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        rotationInfo_ = value;

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .svmp.RotationInfo rotationInfo = 10;</code>
       */
      public Builder setRotationInfo(
          org.mitre.svmp.protocol.SVMPProtocol.RotationInfo.Builder builderForValue) {
        rotationInfo_ = builderForValue.build();

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .svmp.RotationInfo rotationInfo = 10;</code>
       */
      public Builder mergeRotationInfo(org.mitre.svmp.protocol.SVMPProtocol.RotationInfo value) {
        if (((bitField0_ & 0x00000040) == 0x00000040) &&
            rotationInfo_ != org.mitre.svmp.protocol.SVMPProtocol.RotationInfo.getDefaultInstance()) {
          rotationInfo_ =
            org.mitre.svmp.protocol.SVMPProtocol.RotationInfo.newBuilder(rotationInfo_).mergeFrom(value).buildPartial();
        } else {
          rotationInfo_ = value;
        }

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .svmp.RotationInfo rotationInfo = 10;</code>
       */
      public Builder clearRotationInfo() {
        rotationInfo_ = org.mitre.svmp.protocol.SVMPProtocol.RotationInfo.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      // optional .svmp.Ping pingRequest = 11;
      private org.mitre.svmp.protocol.SVMPProtocol.Ping pingRequest_ = org.mitre.svmp.protocol.SVMPProtocol.Ping.getDefaultInstance();
      /**
       * <code>optional .svmp.Ping pingRequest = 11;</code>
       */
      public boolean hasPingRequest() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .svmp.Ping pingRequest = 11;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.Ping getPingRequest() {
        return pingRequest_;
      }
      /**
       * <code>optional .svmp.Ping pingRequest = 11;</code>
       */
      public Builder setPingRequest(org.mitre.svmp.protocol.SVMPProtocol.Ping value) {
        if (value == null) {
          throw new NullPointerException();
        }
        pingRequest_ = value;

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .svmp.Ping pingRequest = 11;</code>
       */
      public Builder setPingRequest(
          org.mitre.svmp.protocol.SVMPProtocol.Ping.Builder builderForValue) {
        pingRequest_ = builderForValue.build();

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .svmp.Ping pingRequest = 11;</code>
       */
      public Builder mergePingRequest(org.mitre.svmp.protocol.SVMPProtocol.Ping value) {
        if (((bitField0_ & 0x00000080) == 0x00000080) &&
            pingRequest_ != org.mitre.svmp.protocol.SVMPProtocol.Ping.getDefaultInstance()) {
          pingRequest_ =
            org.mitre.svmp.protocol.SVMPProtocol.Ping.newBuilder(pingRequest_).mergeFrom(value).buildPartial();
        } else {
          pingRequest_ = value;
        }

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .svmp.Ping pingRequest = 11;</code>
       */
      public Builder clearPingRequest() {
        pingRequest_ = org.mitre.svmp.protocol.SVMPProtocol.Ping.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      // optional .svmp.VideoStreamInfo videoInfo = 12;
      private org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo videoInfo_ = org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance();
      /**
       * <code>optional .svmp.VideoStreamInfo videoInfo = 12;</code>
       *
       * <pre>
       * server-&gt;VM message
       * </pre>
       */
      public boolean hasVideoInfo() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .svmp.VideoStreamInfo videoInfo = 12;</code>
       *
       * <pre>
       * server-&gt;VM message
       * </pre>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo getVideoInfo() {
        return videoInfo_;
      }
      /**
       * <code>optional .svmp.VideoStreamInfo videoInfo = 12;</code>
       *
       * <pre>
       * server-&gt;VM message
       * </pre>
       */
      public Builder setVideoInfo(org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        videoInfo_ = value;

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .svmp.VideoStreamInfo videoInfo = 12;</code>
       *
       * <pre>
       * server-&gt;VM message
       * </pre>
       */
      public Builder setVideoInfo(
          org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.Builder builderForValue) {
        videoInfo_ = builderForValue.build();

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .svmp.VideoStreamInfo videoInfo = 12;</code>
       *
       * <pre>
       * server-&gt;VM message
       * </pre>
       */
      public Builder mergeVideoInfo(org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo value) {
        if (((bitField0_ & 0x00000100) == 0x00000100) &&
            videoInfo_ != org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance()) {
          videoInfo_ =
            org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.newBuilder(videoInfo_).mergeFrom(value).buildPartial();
        } else {
          videoInfo_ = value;
        }

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .svmp.VideoStreamInfo videoInfo = 12;</code>
       *
       * <pre>
       * server-&gt;VM message
       * </pre>
       */
      public Builder clearVideoInfo() {
        videoInfo_ = org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      // optional string timezoneId = 13;
      private java.lang.Object timezoneId_ = "";
      /**
       * <code>optional string timezoneId = 13;</code>
       */
      public boolean hasTimezoneId() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional string timezoneId = 13;</code>
       */
      public java.lang.String getTimezoneId() {
        java.lang.Object ref = timezoneId_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          timezoneId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string timezoneId = 13;</code>
       */
      public com.google.protobuf.ByteString
          getTimezoneIdBytes() {
        java.lang.Object ref = timezoneId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          timezoneId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string timezoneId = 13;</code>
       */
      public Builder setTimezoneId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        timezoneId_ = value;
        
        return this;
      }
      /**
       * <code>optional string timezoneId = 13;</code>
       */
      public Builder clearTimezoneId() {
        bitField0_ = (bitField0_ & ~0x00000200);
        timezoneId_ = getDefaultInstance().getTimezoneId();
        
        return this;
      }
      /**
       * <code>optional string timezoneId = 13;</code>
       */
      public Builder setTimezoneIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        timezoneId_ = value;
        
        return this;
      }

      // optional .svmp.AppsRequest apps = 14;
      private org.mitre.svmp.protocol.SVMPProtocol.AppsRequest apps_ = org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.getDefaultInstance();
      /**
       * <code>optional .svmp.AppsRequest apps = 14;</code>
       */
      public boolean hasApps() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .svmp.AppsRequest apps = 14;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.AppsRequest getApps() {
        return apps_;
      }
      /**
       * <code>optional .svmp.AppsRequest apps = 14;</code>
       */
      public Builder setApps(org.mitre.svmp.protocol.SVMPProtocol.AppsRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        apps_ = value;

        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .svmp.AppsRequest apps = 14;</code>
       */
      public Builder setApps(
          org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.Builder builderForValue) {
        apps_ = builderForValue.build();

        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .svmp.AppsRequest apps = 14;</code>
       */
      public Builder mergeApps(org.mitre.svmp.protocol.SVMPProtocol.AppsRequest value) {
        if (((bitField0_ & 0x00000400) == 0x00000400) &&
            apps_ != org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.getDefaultInstance()) {
          apps_ =
            org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.newBuilder(apps_).mergeFrom(value).buildPartial();
        } else {
          apps_ = value;
        }

        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .svmp.AppsRequest apps = 14;</code>
       */
      public Builder clearApps() {
        apps_ = org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      // optional .svmp.KeyEvent key = 15;
      private org.mitre.svmp.protocol.SVMPProtocol.KeyEvent key_ = org.mitre.svmp.protocol.SVMPProtocol.KeyEvent.getDefaultInstance();
      /**
       * <code>optional .svmp.KeyEvent key = 15;</code>
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .svmp.KeyEvent key = 15;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.KeyEvent getKey() {
        return key_;
      }
      /**
       * <code>optional .svmp.KeyEvent key = 15;</code>
       */
      public Builder setKey(org.mitre.svmp.protocol.SVMPProtocol.KeyEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        key_ = value;

        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .svmp.KeyEvent key = 15;</code>
       */
      public Builder setKey(
          org.mitre.svmp.protocol.SVMPProtocol.KeyEvent.Builder builderForValue) {
        key_ = builderForValue.build();

        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .svmp.KeyEvent key = 15;</code>
       */
      public Builder mergeKey(org.mitre.svmp.protocol.SVMPProtocol.KeyEvent value) {
        if (((bitField0_ & 0x00000800) == 0x00000800) &&
            key_ != org.mitre.svmp.protocol.SVMPProtocol.KeyEvent.getDefaultInstance()) {
          key_ =
            org.mitre.svmp.protocol.SVMPProtocol.KeyEvent.newBuilder(key_).mergeFrom(value).buildPartial();
        } else {
          key_ = value;
        }

        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .svmp.KeyEvent key = 15;</code>
       */
      public Builder clearKey() {
        key_ = org.mitre.svmp.protocol.SVMPProtocol.KeyEvent.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      // optional .svmp.Config config = 16;
      private org.mitre.svmp.protocol.SVMPProtocol.Config config_ = org.mitre.svmp.protocol.SVMPProtocol.Config.getDefaultInstance();
      /**
       * <code>optional .svmp.Config config = 16;</code>
       */
      public boolean hasConfig() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .svmp.Config config = 16;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.Config getConfig() {
        return config_;
      }
      /**
       * <code>optional .svmp.Config config = 16;</code>
       */
      public Builder setConfig(org.mitre.svmp.protocol.SVMPProtocol.Config value) {
        if (value == null) {
          throw new NullPointerException();
        }
        config_ = value;

        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .svmp.Config config = 16;</code>
       */
      public Builder setConfig(
          org.mitre.svmp.protocol.SVMPProtocol.Config.Builder builderForValue) {
        config_ = builderForValue.build();

        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .svmp.Config config = 16;</code>
       */
      public Builder mergeConfig(org.mitre.svmp.protocol.SVMPProtocol.Config value) {
        if (((bitField0_ & 0x00001000) == 0x00001000) &&
            config_ != org.mitre.svmp.protocol.SVMPProtocol.Config.getDefaultInstance()) {
          config_ =
            org.mitre.svmp.protocol.SVMPProtocol.Config.newBuilder(config_).mergeFrom(value).buildPartial();
        } else {
          config_ = value;
        }

        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .svmp.Config config = 16;</code>
       */
      public Builder clearConfig() {
        config_ = org.mitre.svmp.protocol.SVMPProtocol.Config.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.Request)
    }

    static {
      defaultInstance = new Request(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.Request)
  }

  public interface ResponseOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .svmp.Response.ResponseType type = 1;
    /**
     * <code>required .svmp.Response.ResponseType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .svmp.Response.ResponseType type = 1;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType getType();

    // optional .svmp.AuthResponse authResponse = 3;
    /**
     * <code>optional .svmp.AuthResponse authResponse = 3;</code>
     */
    boolean hasAuthResponse();
    /**
     * <code>optional .svmp.AuthResponse authResponse = 3;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.AuthResponse getAuthResponse();

    // optional .svmp.Intent intent = 4;
    /**
     * <code>optional .svmp.Intent intent = 4;</code>
     */
    boolean hasIntent();
    /**
     * <code>optional .svmp.Intent intent = 4;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.Intent getIntent();

    // optional .svmp.Notification notification = 5;
    /**
     * <code>optional .svmp.Notification notification = 5;</code>
     */
    boolean hasNotification();
    /**
     * <code>optional .svmp.Notification notification = 5;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.Notification getNotification();

    // optional .svmp.LocationResponse locationResponse = 6;
    /**
     * <code>optional .svmp.LocationResponse locationResponse = 6;</code>
     */
    boolean hasLocationResponse();
    /**
     * <code>optional .svmp.LocationResponse locationResponse = 6;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.LocationResponse getLocationResponse();

    // optional .svmp.Ping pingResponse = 7;
    /**
     * <code>optional .svmp.Ping pingResponse = 7;</code>
     */
    boolean hasPingResponse();
    /**
     * <code>optional .svmp.Ping pingResponse = 7;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.Ping getPingResponse();

    // optional .svmp.AppsResponse apps = 8;
    /**
     * <code>optional .svmp.AppsResponse apps = 8;</code>
     */
    boolean hasApps();
    /**
     * <code>optional .svmp.AppsResponse apps = 8;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.AppsResponse getApps();

    // optional .svmp.ScreenInfo screenInfo = 16;
    /**
     * <code>optional .svmp.ScreenInfo screenInfo = 16;</code>
     */
    boolean hasScreenInfo();
    /**
     * <code>optional .svmp.ScreenInfo screenInfo = 16;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo getScreenInfo();

    // optional .svmp.VideoStreamInfo videoInfo = 17;
    /**
     * <code>optional .svmp.VideoStreamInfo videoInfo = 17;</code>
     */
    boolean hasVideoInfo();
    /**
     * <code>optional .svmp.VideoStreamInfo videoInfo = 17;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo getVideoInfo();

    // optional .svmp.WebRTCMessage webrtcMsg = 18;
    /**
     * <code>optional .svmp.WebRTCMessage webrtcMsg = 18;</code>
     */
    boolean hasWebrtcMsg();
    /**
     * <code>optional .svmp.WebRTCMessage webrtcMsg = 18;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage getWebrtcMsg();
  }
  /**
   * Protobuf type {@code svmp.Response}
   *
   * <pre>
   * Server to client message wrapper
   * </pre>
   */
  public static final class Response extends
      com.google.protobuf.GeneratedMessageLite
      implements ResponseOrBuilder {
    // Use Response.newBuilder() to construct.
    private Response(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private Response(boolean noInit) {}

    private static final Response defaultInstance;
    public static Response getDefaultInstance() {
      return defaultInstance;
    }

    public Response getDefaultInstanceForType() {
      return defaultInstance;
    }

    private Response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType value = org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 26: {
              org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = authResponse_.toBuilder();
              }
              authResponse_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(authResponse_);
                authResponse_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 34: {
              org.mitre.svmp.protocol.SVMPProtocol.Intent.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = intent_.toBuilder();
              }
              intent_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.Intent.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(intent_);
                intent_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 42: {
              org.mitre.svmp.protocol.SVMPProtocol.Notification.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = notification_.toBuilder();
              }
              notification_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.Notification.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(notification_);
                notification_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 50: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = locationResponse_.toBuilder();
              }
              locationResponse_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(locationResponse_);
                locationResponse_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 58: {
              org.mitre.svmp.protocol.SVMPProtocol.Ping.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = pingResponse_.toBuilder();
              }
              pingResponse_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.Ping.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pingResponse_);
                pingResponse_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 66: {
              org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = apps_.toBuilder();
              }
              apps_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(apps_);
                apps_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 130: {
              org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = screenInfo_.toBuilder();
              }
              screenInfo_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(screenInfo_);
                screenInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 138: {
              org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = videoInfo_.toBuilder();
              }
              videoInfo_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(videoInfo_);
                videoInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 146: {
              org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = webrtcMsg_.toBuilder();
              }
              webrtcMsg_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(webrtcMsg_);
                webrtcMsg_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Response> PARSER =
        new com.google.protobuf.AbstractParser<Response>() {
      public Response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Response(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Response> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code svmp.Response.ResponseType}
     */
    public enum ResponseType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>ERROR = 0;</code>
       */
      ERROR(0, 0),
      /**
       * <code>AUTH = 1;</code>
       */
      AUTH(1, 1),
      /**
       * <code>VMREADY = 2;</code>
       */
      VMREADY(2, 2),
      /**
       * <code>SCREENINFO = 3;</code>
       *
       * <pre>
       * touch screen coordinate scaling info
       * </pre>
       */
      SCREENINFO(3, 3),
      /**
       * <code>INTENT = 4;</code>
       *
       * <pre>
       * intent data in 'proxy'
       * </pre>
       */
      INTENT(4, 4),
      /**
       * <code>NOTIFICATION = 5;</code>
       *
       * <pre>
       * notification data in 'proxy'
       * </pre>
       */
      NOTIFICATION(5, 5),
      /**
       * <code>LOCATION = 6;</code>
       *
       * <pre>
       * location request
       * </pre>
       */
      LOCATION(6, 6),
      /**
       * <code>WEBRTC = 7;</code>
       *
       * <pre>
       * WebRTC signalling message
       * </pre>
       */
      WEBRTC(7, 7),
      /**
       * <code>PING = 8;</code>
       *
       * <pre>
       * response to client ping measurement (ms)
       * </pre>
       */
      PING(8, 8),
      /**
       * <code>APPS = 9;</code>
       *
       * <pre>
       * response to client request for available apps
       * </pre>
       */
      APPS(9, 9),
      ;

      /**
       * <code>ERROR = 0;</code>
       */
      public static final int ERROR_VALUE = 0;
      /**
       * <code>AUTH = 1;</code>
       */
      public static final int AUTH_VALUE = 1;
      /**
       * <code>VMREADY = 2;</code>
       */
      public static final int VMREADY_VALUE = 2;
      /**
       * <code>SCREENINFO = 3;</code>
       *
       * <pre>
       * touch screen coordinate scaling info
       * </pre>
       */
      public static final int SCREENINFO_VALUE = 3;
      /**
       * <code>INTENT = 4;</code>
       *
       * <pre>
       * intent data in 'proxy'
       * </pre>
       */
      public static final int INTENT_VALUE = 4;
      /**
       * <code>NOTIFICATION = 5;</code>
       *
       * <pre>
       * notification data in 'proxy'
       * </pre>
       */
      public static final int NOTIFICATION_VALUE = 5;
      /**
       * <code>LOCATION = 6;</code>
       *
       * <pre>
       * location request
       * </pre>
       */
      public static final int LOCATION_VALUE = 6;
      /**
       * <code>WEBRTC = 7;</code>
       *
       * <pre>
       * WebRTC signalling message
       * </pre>
       */
      public static final int WEBRTC_VALUE = 7;
      /**
       * <code>PING = 8;</code>
       *
       * <pre>
       * response to client ping measurement (ms)
       * </pre>
       */
      public static final int PING_VALUE = 8;
      /**
       * <code>APPS = 9;</code>
       *
       * <pre>
       * response to client request for available apps
       * </pre>
       */
      public static final int APPS_VALUE = 9;


      public final int getNumber() { return value; }

      public static ResponseType valueOf(int value) {
        switch (value) {
          case 0: return ERROR;
          case 1: return AUTH;
          case 2: return VMREADY;
          case 3: return SCREENINFO;
          case 4: return INTENT;
          case 5: return NOTIFICATION;
          case 6: return LOCATION;
          case 7: return WEBRTC;
          case 8: return PING;
          case 9: return APPS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ResponseType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ResponseType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ResponseType>() {
              public ResponseType findValueByNumber(int number) {
                return ResponseType.valueOf(number);
              }
            };

      private final int value;

      private ResponseType(int index, int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:svmp.Response.ResponseType)
    }

    private int bitField0_;
    // required .svmp.Response.ResponseType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType type_;
    /**
     * <code>required .svmp.Response.ResponseType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .svmp.Response.ResponseType type = 1;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType getType() {
      return type_;
    }

    // optional .svmp.AuthResponse authResponse = 3;
    public static final int AUTHRESPONSE_FIELD_NUMBER = 3;
    private org.mitre.svmp.protocol.SVMPProtocol.AuthResponse authResponse_;
    /**
     * <code>optional .svmp.AuthResponse authResponse = 3;</code>
     */
    public boolean hasAuthResponse() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .svmp.AuthResponse authResponse = 3;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.AuthResponse getAuthResponse() {
      return authResponse_;
    }

    // optional .svmp.Intent intent = 4;
    public static final int INTENT_FIELD_NUMBER = 4;
    private org.mitre.svmp.protocol.SVMPProtocol.Intent intent_;
    /**
     * <code>optional .svmp.Intent intent = 4;</code>
     */
    public boolean hasIntent() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .svmp.Intent intent = 4;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.Intent getIntent() {
      return intent_;
    }

    // optional .svmp.Notification notification = 5;
    public static final int NOTIFICATION_FIELD_NUMBER = 5;
    private org.mitre.svmp.protocol.SVMPProtocol.Notification notification_;
    /**
     * <code>optional .svmp.Notification notification = 5;</code>
     */
    public boolean hasNotification() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .svmp.Notification notification = 5;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.Notification getNotification() {
      return notification_;
    }

    // optional .svmp.LocationResponse locationResponse = 6;
    public static final int LOCATIONRESPONSE_FIELD_NUMBER = 6;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationResponse locationResponse_;
    /**
     * <code>optional .svmp.LocationResponse locationResponse = 6;</code>
     */
    public boolean hasLocationResponse() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .svmp.LocationResponse locationResponse = 6;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.LocationResponse getLocationResponse() {
      return locationResponse_;
    }

    // optional .svmp.Ping pingResponse = 7;
    public static final int PINGRESPONSE_FIELD_NUMBER = 7;
    private org.mitre.svmp.protocol.SVMPProtocol.Ping pingResponse_;
    /**
     * <code>optional .svmp.Ping pingResponse = 7;</code>
     */
    public boolean hasPingResponse() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .svmp.Ping pingResponse = 7;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.Ping getPingResponse() {
      return pingResponse_;
    }

    // optional .svmp.AppsResponse apps = 8;
    public static final int APPS_FIELD_NUMBER = 8;
    private org.mitre.svmp.protocol.SVMPProtocol.AppsResponse apps_;
    /**
     * <code>optional .svmp.AppsResponse apps = 8;</code>
     */
    public boolean hasApps() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .svmp.AppsResponse apps = 8;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.AppsResponse getApps() {
      return apps_;
    }

    // optional .svmp.ScreenInfo screenInfo = 16;
    public static final int SCREENINFO_FIELD_NUMBER = 16;
    private org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo screenInfo_;
    /**
     * <code>optional .svmp.ScreenInfo screenInfo = 16;</code>
     */
    public boolean hasScreenInfo() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .svmp.ScreenInfo screenInfo = 16;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo getScreenInfo() {
      return screenInfo_;
    }

    // optional .svmp.VideoStreamInfo videoInfo = 17;
    public static final int VIDEOINFO_FIELD_NUMBER = 17;
    private org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo videoInfo_;
    /**
     * <code>optional .svmp.VideoStreamInfo videoInfo = 17;</code>
     */
    public boolean hasVideoInfo() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .svmp.VideoStreamInfo videoInfo = 17;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo getVideoInfo() {
      return videoInfo_;
    }

    // optional .svmp.WebRTCMessage webrtcMsg = 18;
    public static final int WEBRTCMSG_FIELD_NUMBER = 18;
    private org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage webrtcMsg_;
    /**
     * <code>optional .svmp.WebRTCMessage webrtcMsg = 18;</code>
     */
    public boolean hasWebrtcMsg() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .svmp.WebRTCMessage webrtcMsg = 18;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage getWebrtcMsg() {
      return webrtcMsg_;
    }

    private void initFields() {
      type_ = org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType.ERROR;
      authResponse_ = org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.getDefaultInstance();
      intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
      notification_ = org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance();
      locationResponse_ = org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.getDefaultInstance();
      pingResponse_ = org.mitre.svmp.protocol.SVMPProtocol.Ping.getDefaultInstance();
      apps_ = org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.getDefaultInstance();
      screenInfo_ = org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance();
      videoInfo_ = org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance();
      webrtcMsg_ = org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasAuthResponse()) {
        if (!getAuthResponse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasIntent()) {
        if (!getIntent().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasNotification()) {
        if (!getNotification().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasLocationResponse()) {
        if (!getLocationResponse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPingResponse()) {
        if (!getPingResponse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasApps()) {
        if (!getApps().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasScreenInfo()) {
        if (!getScreenInfo().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(3, authResponse_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(4, intent_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(5, notification_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(6, locationResponse_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(7, pingResponse_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(8, apps_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(16, screenInfo_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(17, videoInfo_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(18, webrtcMsg_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, authResponse_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, intent_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, notification_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, locationResponse_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, pingResponse_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, apps_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, screenInfo_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, videoInfo_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, webrtcMsg_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Response prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.Response}
     *
     * <pre>
     * Server to client message wrapper
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.Response, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.ResponseOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.Response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType.ERROR;
        bitField0_ = (bitField0_ & ~0x00000001);
        authResponse_ = org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        notification_ = org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000008);
        locationResponse_ = org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000010);
        pingResponse_ = org.mitre.svmp.protocol.SVMPProtocol.Ping.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000020);
        apps_ = org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000040);
        screenInfo_ = org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000080);
        videoInfo_ = org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000100);
        webrtcMsg_ = org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Response getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.Response.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Response build() {
        org.mitre.svmp.protocol.SVMPProtocol.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Response buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.Response result = new org.mitre.svmp.protocol.SVMPProtocol.Response(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.authResponse_ = authResponse_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.intent_ = intent_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.notification_ = notification_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.locationResponse_ = locationResponse_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.pingResponse_ = pingResponse_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.apps_ = apps_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.screenInfo_ = screenInfo_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.videoInfo_ = videoInfo_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.webrtcMsg_ = webrtcMsg_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Response other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.Response.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasAuthResponse()) {
          mergeAuthResponse(other.getAuthResponse());
        }
        if (other.hasIntent()) {
          mergeIntent(other.getIntent());
        }
        if (other.hasNotification()) {
          mergeNotification(other.getNotification());
        }
        if (other.hasLocationResponse()) {
          mergeLocationResponse(other.getLocationResponse());
        }
        if (other.hasPingResponse()) {
          mergePingResponse(other.getPingResponse());
        }
        if (other.hasApps()) {
          mergeApps(other.getApps());
        }
        if (other.hasScreenInfo()) {
          mergeScreenInfo(other.getScreenInfo());
        }
        if (other.hasVideoInfo()) {
          mergeVideoInfo(other.getVideoInfo());
        }
        if (other.hasWebrtcMsg()) {
          mergeWebrtcMsg(other.getWebrtcMsg());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        if (hasAuthResponse()) {
          if (!getAuthResponse().isInitialized()) {
            
            return false;
          }
        }
        if (hasIntent()) {
          if (!getIntent().isInitialized()) {
            
            return false;
          }
        }
        if (hasNotification()) {
          if (!getNotification().isInitialized()) {
            
            return false;
          }
        }
        if (hasLocationResponse()) {
          if (!getLocationResponse().isInitialized()) {
            
            return false;
          }
        }
        if (hasPingResponse()) {
          if (!getPingResponse().isInitialized()) {
            
            return false;
          }
        }
        if (hasApps()) {
          if (!getApps().isInitialized()) {
            
            return false;
          }
        }
        if (hasScreenInfo()) {
          if (!getScreenInfo().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.Response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.Response) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .svmp.Response.ResponseType type = 1;
      private org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType type_ = org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType.ERROR;
      /**
       * <code>required .svmp.Response.ResponseType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .svmp.Response.ResponseType type = 1;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType getType() {
        return type_;
      }
      /**
       * <code>required .svmp.Response.ResponseType type = 1;</code>
       */
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      /**
       * <code>required .svmp.Response.ResponseType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType.ERROR;
        
        return this;
      }

      // optional .svmp.AuthResponse authResponse = 3;
      private org.mitre.svmp.protocol.SVMPProtocol.AuthResponse authResponse_ = org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.getDefaultInstance();
      /**
       * <code>optional .svmp.AuthResponse authResponse = 3;</code>
       */
      public boolean hasAuthResponse() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .svmp.AuthResponse authResponse = 3;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.AuthResponse getAuthResponse() {
        return authResponse_;
      }
      /**
       * <code>optional .svmp.AuthResponse authResponse = 3;</code>
       */
      public Builder setAuthResponse(org.mitre.svmp.protocol.SVMPProtocol.AuthResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        authResponse_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .svmp.AuthResponse authResponse = 3;</code>
       */
      public Builder setAuthResponse(
          org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.Builder builderForValue) {
        authResponse_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .svmp.AuthResponse authResponse = 3;</code>
       */
      public Builder mergeAuthResponse(org.mitre.svmp.protocol.SVMPProtocol.AuthResponse value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            authResponse_ != org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.getDefaultInstance()) {
          authResponse_ =
            org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.newBuilder(authResponse_).mergeFrom(value).buildPartial();
        } else {
          authResponse_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .svmp.AuthResponse authResponse = 3;</code>
       */
      public Builder clearAuthResponse() {
        authResponse_ = org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // optional .svmp.Intent intent = 4;
      private org.mitre.svmp.protocol.SVMPProtocol.Intent intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
      /**
       * <code>optional .svmp.Intent intent = 4;</code>
       */
      public boolean hasIntent() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .svmp.Intent intent = 4;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.Intent getIntent() {
        return intent_;
      }
      /**
       * <code>optional .svmp.Intent intent = 4;</code>
       */
      public Builder setIntent(org.mitre.svmp.protocol.SVMPProtocol.Intent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        intent_ = value;

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .svmp.Intent intent = 4;</code>
       */
      public Builder setIntent(
          org.mitre.svmp.protocol.SVMPProtocol.Intent.Builder builderForValue) {
        intent_ = builderForValue.build();

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .svmp.Intent intent = 4;</code>
       */
      public Builder mergeIntent(org.mitre.svmp.protocol.SVMPProtocol.Intent value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            intent_ != org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance()) {
          intent_ =
            org.mitre.svmp.protocol.SVMPProtocol.Intent.newBuilder(intent_).mergeFrom(value).buildPartial();
        } else {
          intent_ = value;
        }

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .svmp.Intent intent = 4;</code>
       */
      public Builder clearIntent() {
        intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // optional .svmp.Notification notification = 5;
      private org.mitre.svmp.protocol.SVMPProtocol.Notification notification_ = org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance();
      /**
       * <code>optional .svmp.Notification notification = 5;</code>
       */
      public boolean hasNotification() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .svmp.Notification notification = 5;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.Notification getNotification() {
        return notification_;
      }
      /**
       * <code>optional .svmp.Notification notification = 5;</code>
       */
      public Builder setNotification(org.mitre.svmp.protocol.SVMPProtocol.Notification value) {
        if (value == null) {
          throw new NullPointerException();
        }
        notification_ = value;

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .svmp.Notification notification = 5;</code>
       */
      public Builder setNotification(
          org.mitre.svmp.protocol.SVMPProtocol.Notification.Builder builderForValue) {
        notification_ = builderForValue.build();

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .svmp.Notification notification = 5;</code>
       */
      public Builder mergeNotification(org.mitre.svmp.protocol.SVMPProtocol.Notification value) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            notification_ != org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance()) {
          notification_ =
            org.mitre.svmp.protocol.SVMPProtocol.Notification.newBuilder(notification_).mergeFrom(value).buildPartial();
        } else {
          notification_ = value;
        }

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .svmp.Notification notification = 5;</code>
       */
      public Builder clearNotification() {
        notification_ = org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // optional .svmp.LocationResponse locationResponse = 6;
      private org.mitre.svmp.protocol.SVMPProtocol.LocationResponse locationResponse_ = org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.getDefaultInstance();
      /**
       * <code>optional .svmp.LocationResponse locationResponse = 6;</code>
       */
      public boolean hasLocationResponse() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .svmp.LocationResponse locationResponse = 6;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.LocationResponse getLocationResponse() {
        return locationResponse_;
      }
      /**
       * <code>optional .svmp.LocationResponse locationResponse = 6;</code>
       */
      public Builder setLocationResponse(org.mitre.svmp.protocol.SVMPProtocol.LocationResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        locationResponse_ = value;

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .svmp.LocationResponse locationResponse = 6;</code>
       */
      public Builder setLocationResponse(
          org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.Builder builderForValue) {
        locationResponse_ = builderForValue.build();

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .svmp.LocationResponse locationResponse = 6;</code>
       */
      public Builder mergeLocationResponse(org.mitre.svmp.protocol.SVMPProtocol.LocationResponse value) {
        if (((bitField0_ & 0x00000010) == 0x00000010) &&
            locationResponse_ != org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.getDefaultInstance()) {
          locationResponse_ =
            org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.newBuilder(locationResponse_).mergeFrom(value).buildPartial();
        } else {
          locationResponse_ = value;
        }

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .svmp.LocationResponse locationResponse = 6;</code>
       */
      public Builder clearLocationResponse() {
        locationResponse_ = org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      // optional .svmp.Ping pingResponse = 7;
      private org.mitre.svmp.protocol.SVMPProtocol.Ping pingResponse_ = org.mitre.svmp.protocol.SVMPProtocol.Ping.getDefaultInstance();
      /**
       * <code>optional .svmp.Ping pingResponse = 7;</code>
       */
      public boolean hasPingResponse() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .svmp.Ping pingResponse = 7;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.Ping getPingResponse() {
        return pingResponse_;
      }
      /**
       * <code>optional .svmp.Ping pingResponse = 7;</code>
       */
      public Builder setPingResponse(org.mitre.svmp.protocol.SVMPProtocol.Ping value) {
        if (value == null) {
          throw new NullPointerException();
        }
        pingResponse_ = value;

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .svmp.Ping pingResponse = 7;</code>
       */
      public Builder setPingResponse(
          org.mitre.svmp.protocol.SVMPProtocol.Ping.Builder builderForValue) {
        pingResponse_ = builderForValue.build();

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .svmp.Ping pingResponse = 7;</code>
       */
      public Builder mergePingResponse(org.mitre.svmp.protocol.SVMPProtocol.Ping value) {
        if (((bitField0_ & 0x00000020) == 0x00000020) &&
            pingResponse_ != org.mitre.svmp.protocol.SVMPProtocol.Ping.getDefaultInstance()) {
          pingResponse_ =
            org.mitre.svmp.protocol.SVMPProtocol.Ping.newBuilder(pingResponse_).mergeFrom(value).buildPartial();
        } else {
          pingResponse_ = value;
        }

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .svmp.Ping pingResponse = 7;</code>
       */
      public Builder clearPingResponse() {
        pingResponse_ = org.mitre.svmp.protocol.SVMPProtocol.Ping.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      // optional .svmp.AppsResponse apps = 8;
      private org.mitre.svmp.protocol.SVMPProtocol.AppsResponse apps_ = org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.getDefaultInstance();
      /**
       * <code>optional .svmp.AppsResponse apps = 8;</code>
       */
      public boolean hasApps() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .svmp.AppsResponse apps = 8;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.AppsResponse getApps() {
        return apps_;
      }
      /**
       * <code>optional .svmp.AppsResponse apps = 8;</code>
       */
      public Builder setApps(org.mitre.svmp.protocol.SVMPProtocol.AppsResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        apps_ = value;

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .svmp.AppsResponse apps = 8;</code>
       */
      public Builder setApps(
          org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.Builder builderForValue) {
        apps_ = builderForValue.build();

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .svmp.AppsResponse apps = 8;</code>
       */
      public Builder mergeApps(org.mitre.svmp.protocol.SVMPProtocol.AppsResponse value) {
        if (((bitField0_ & 0x00000040) == 0x00000040) &&
            apps_ != org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.getDefaultInstance()) {
          apps_ =
            org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.newBuilder(apps_).mergeFrom(value).buildPartial();
        } else {
          apps_ = value;
        }

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .svmp.AppsResponse apps = 8;</code>
       */
      public Builder clearApps() {
        apps_ = org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      // optional .svmp.ScreenInfo screenInfo = 16;
      private org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo screenInfo_ = org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance();
      /**
       * <code>optional .svmp.ScreenInfo screenInfo = 16;</code>
       */
      public boolean hasScreenInfo() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .svmp.ScreenInfo screenInfo = 16;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo getScreenInfo() {
        return screenInfo_;
      }
      /**
       * <code>optional .svmp.ScreenInfo screenInfo = 16;</code>
       */
      public Builder setScreenInfo(org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        screenInfo_ = value;

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .svmp.ScreenInfo screenInfo = 16;</code>
       */
      public Builder setScreenInfo(
          org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.Builder builderForValue) {
        screenInfo_ = builderForValue.build();

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .svmp.ScreenInfo screenInfo = 16;</code>
       */
      public Builder mergeScreenInfo(org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo value) {
        if (((bitField0_ & 0x00000080) == 0x00000080) &&
            screenInfo_ != org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance()) {
          screenInfo_ =
            org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.newBuilder(screenInfo_).mergeFrom(value).buildPartial();
        } else {
          screenInfo_ = value;
        }

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .svmp.ScreenInfo screenInfo = 16;</code>
       */
      public Builder clearScreenInfo() {
        screenInfo_ = org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      // optional .svmp.VideoStreamInfo videoInfo = 17;
      private org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo videoInfo_ = org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance();
      /**
       * <code>optional .svmp.VideoStreamInfo videoInfo = 17;</code>
       */
      public boolean hasVideoInfo() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .svmp.VideoStreamInfo videoInfo = 17;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo getVideoInfo() {
        return videoInfo_;
      }
      /**
       * <code>optional .svmp.VideoStreamInfo videoInfo = 17;</code>
       */
      public Builder setVideoInfo(org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        videoInfo_ = value;

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .svmp.VideoStreamInfo videoInfo = 17;</code>
       */
      public Builder setVideoInfo(
          org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.Builder builderForValue) {
        videoInfo_ = builderForValue.build();

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .svmp.VideoStreamInfo videoInfo = 17;</code>
       */
      public Builder mergeVideoInfo(org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo value) {
        if (((bitField0_ & 0x00000100) == 0x00000100) &&
            videoInfo_ != org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance()) {
          videoInfo_ =
            org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.newBuilder(videoInfo_).mergeFrom(value).buildPartial();
        } else {
          videoInfo_ = value;
        }

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .svmp.VideoStreamInfo videoInfo = 17;</code>
       */
      public Builder clearVideoInfo() {
        videoInfo_ = org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      // optional .svmp.WebRTCMessage webrtcMsg = 18;
      private org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage webrtcMsg_ = org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.getDefaultInstance();
      /**
       * <code>optional .svmp.WebRTCMessage webrtcMsg = 18;</code>
       */
      public boolean hasWebrtcMsg() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .svmp.WebRTCMessage webrtcMsg = 18;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage getWebrtcMsg() {
        return webrtcMsg_;
      }
      /**
       * <code>optional .svmp.WebRTCMessage webrtcMsg = 18;</code>
       */
      public Builder setWebrtcMsg(org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage value) {
        if (value == null) {
          throw new NullPointerException();
        }
        webrtcMsg_ = value;

        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .svmp.WebRTCMessage webrtcMsg = 18;</code>
       */
      public Builder setWebrtcMsg(
          org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.Builder builderForValue) {
        webrtcMsg_ = builderForValue.build();

        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .svmp.WebRTCMessage webrtcMsg = 18;</code>
       */
      public Builder mergeWebrtcMsg(org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage value) {
        if (((bitField0_ & 0x00000200) == 0x00000200) &&
            webrtcMsg_ != org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.getDefaultInstance()) {
          webrtcMsg_ =
            org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.newBuilder(webrtcMsg_).mergeFrom(value).buildPartial();
        } else {
          webrtcMsg_ = value;
        }

        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .svmp.WebRTCMessage webrtcMsg = 18;</code>
       */
      public Builder clearWebrtcMsg() {
        webrtcMsg_ = org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.Response)
    }

    static {
      defaultInstance = new Response(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.Response)
  }

  public interface IntentOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .svmp.IntentAction action = 1;
    /**
     * <code>required .svmp.IntentAction action = 1;</code>
     *
     * <pre>
     *Corresponds to Intent 'action' parameter, but limited to supported actions
     * </pre>
     */
    boolean hasAction();
    /**
     * <code>required .svmp.IntentAction action = 1;</code>
     *
     * <pre>
     *Corresponds to Intent 'action' parameter, but limited to supported actions
     * </pre>
     */
    org.mitre.svmp.protocol.SVMPProtocol.IntentAction getAction();

    // repeated .svmp.Intent.Tuple extras = 2;
    /**
     * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
     *
     * <pre>
     *Encode all bundle extras as strings, and decode them later into specific data types
     * </pre>
     */
    java.util.List<org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple> 
        getExtrasList();
    /**
     * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
     *
     * <pre>
     *Encode all bundle extras as strings, and decode them later into specific data types
     * </pre>
     */
    org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple getExtras(int index);
    /**
     * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
     *
     * <pre>
     *Encode all bundle extras as strings, and decode them later into specific data types
     * </pre>
     */
    int getExtrasCount();

    // optional string data = 3;
    /**
     * <code>optional string data = 3;</code>
     *
     * <pre>
     *Correspond to optional Intent parameters
     * </pre>
     */
    boolean hasData();
    /**
     * <code>optional string data = 3;</code>
     *
     * <pre>
     *Correspond to optional Intent parameters
     * </pre>
     */
    java.lang.String getData();
    /**
     * <code>optional string data = 3;</code>
     *
     * <pre>
     *Correspond to optional Intent parameters
     * </pre>
     */
    com.google.protobuf.ByteString
        getDataBytes();

    // repeated int32 flags = 4;
    /**
     * <code>repeated int32 flags = 4;</code>
     */
    java.util.List<java.lang.Integer> getFlagsList();
    /**
     * <code>repeated int32 flags = 4;</code>
     */
    int getFlagsCount();
    /**
     * <code>repeated int32 flags = 4;</code>
     */
    int getFlags(int index);

    // repeated string categories = 5;
    /**
     * <code>repeated string categories = 5;</code>
     */
    java.util.List<java.lang.String>
    getCategoriesList();
    /**
     * <code>repeated string categories = 5;</code>
     */
    int getCategoriesCount();
    /**
     * <code>repeated string categories = 5;</code>
     */
    java.lang.String getCategories(int index);
    /**
     * <code>repeated string categories = 5;</code>
     */
    com.google.protobuf.ByteString
        getCategoriesBytes(int index);
  }
  /**
   * Protobuf type {@code svmp.Intent}
   *
   * <pre>
   * C&lt;-&gt;S
   * </pre>
   */
  public static final class Intent extends
      com.google.protobuf.GeneratedMessageLite
      implements IntentOrBuilder {
    // Use Intent.newBuilder() to construct.
    private Intent(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private Intent(boolean noInit) {}

    private static final Intent defaultInstance;
    public static Intent getDefaultInstance() {
      return defaultInstance;
    }

    public Intent getDefaultInstanceForType() {
      return defaultInstance;
    }

    private Intent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.IntentAction value = org.mitre.svmp.protocol.SVMPProtocol.IntentAction.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                action_ = value;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                extras_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple>();
                mutable_bitField0_ |= 0x00000002;
              }
              extras_.add(input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              bitField0_ |= 0x00000002;
              data_ = input.readBytes();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                flags_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              flags_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                flags_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                flags_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                categories_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000010;
              }
              categories_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          extras_ = java.util.Collections.unmodifiableList(extras_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          flags_ = java.util.Collections.unmodifiableList(flags_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          categories_ = new com.google.protobuf.UnmodifiableLazyStringList(categories_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Intent> PARSER =
        new com.google.protobuf.AbstractParser<Intent>() {
      public Intent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Intent(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Intent> getParserForType() {
      return PARSER;
    }

    public interface TupleOrBuilder
        extends com.google.protobuf.MessageLiteOrBuilder {

      // required string key = 1;
      /**
       * <code>required string key = 1;</code>
       */
      boolean hasKey();
      /**
       * <code>required string key = 1;</code>
       */
      java.lang.String getKey();
      /**
       * <code>required string key = 1;</code>
       */
      com.google.protobuf.ByteString
          getKeyBytes();

      // required string value = 2;
      /**
       * <code>required string value = 2;</code>
       */
      boolean hasValue();
      /**
       * <code>required string value = 2;</code>
       */
      java.lang.String getValue();
      /**
       * <code>required string value = 2;</code>
       */
      com.google.protobuf.ByteString
          getValueBytes();
    }
    /**
     * Protobuf type {@code svmp.Intent.Tuple}
     *
     * <pre>
     *For approximating a Java Map structure (Map&lt;String,String&gt;)
     * </pre>
     */
    public static final class Tuple extends
        com.google.protobuf.GeneratedMessageLite
        implements TupleOrBuilder {
      // Use Tuple.newBuilder() to construct.
      private Tuple(com.google.protobuf.GeneratedMessageLite.Builder builder) {
        super(builder);

      }
      private Tuple(boolean noInit) {}

      private static final Tuple defaultInstance;
      public static Tuple getDefaultInstance() {
        return defaultInstance;
      }

      public Tuple getDefaultInstanceForType() {
        return defaultInstance;
      }

      private Tuple(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                key_ = input.readBytes();
                break;
              }
              case 18: {
                bitField0_ |= 0x00000002;
                value_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          makeExtensionsImmutable();
        }
      }
      public static com.google.protobuf.Parser<Tuple> PARSER =
          new com.google.protobuf.AbstractParser<Tuple>() {
        public Tuple parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Tuple(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Tuple> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required string key = 1;
      public static final int KEY_FIELD_NUMBER = 1;
      private java.lang.Object key_;
      /**
       * <code>required string key = 1;</code>
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string key = 1;</code>
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            key_ = s;
          }
          return s;
        }
      }
      /**
       * <code>required string key = 1;</code>
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // required string value = 2;
      public static final int VALUE_FIELD_NUMBER = 2;
      private java.lang.Object value_;
      /**
       * <code>required string value = 2;</code>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string value = 2;</code>
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            value_ = s;
          }
          return s;
        }
      }
      /**
       * <code>required string value = 2;</code>
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        key_ = "";
        value_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasKey()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasValue()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getKeyBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(2, getValueBytes());
        }
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getKeyBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, getValueBytes());
        }
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      /**
       * Protobuf type {@code svmp.Intent.Tuple}
       *
       * <pre>
       *For approximating a Java Map structure (Map&lt;String,String&gt;)
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple, Builder>
          implements org.mitre.svmp.protocol.SVMPProtocol.Intent.TupleOrBuilder {
        // Construct using org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          key_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          value_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple getDefaultInstanceForType() {
          return org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple.getDefaultInstance();
        }

        public org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple build() {
          org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple buildPartial() {
          org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple result = new org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.key_ = key_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.value_ = value_;
          result.bitField0_ = to_bitField0_;
          return result;
        }

        public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple other) {
          if (other == org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple.getDefaultInstance()) return this;
          if (other.hasKey()) {
            bitField0_ |= 0x00000001;
            key_ = other.key_;
            
          }
          if (other.hasValue()) {
            bitField0_ |= 0x00000002;
            value_ = other.value_;
            
          }
          return this;
        }

        public final boolean isInitialized() {
          if (!hasKey()) {
            
            return false;
          }
          if (!hasValue()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required string key = 1;
        private java.lang.Object key_ = "";
        /**
         * <code>required string key = 1;</code>
         */
        public boolean hasKey() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required string key = 1;</code>
         */
        public java.lang.String getKey() {
          java.lang.Object ref = key_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            key_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>required string key = 1;</code>
         */
        public com.google.protobuf.ByteString
            getKeyBytes() {
          java.lang.Object ref = key_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            key_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>required string key = 1;</code>
         */
        public Builder setKey(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          key_ = value;
          
          return this;
        }
        /**
         * <code>required string key = 1;</code>
         */
        public Builder clearKey() {
          bitField0_ = (bitField0_ & ~0x00000001);
          key_ = getDefaultInstance().getKey();
          
          return this;
        }
        /**
         * <code>required string key = 1;</code>
         */
        public Builder setKeyBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          key_ = value;
          
          return this;
        }

        // required string value = 2;
        private java.lang.Object value_ = "";
        /**
         * <code>required string value = 2;</code>
         */
        public boolean hasValue() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required string value = 2;</code>
         */
        public java.lang.String getValue() {
          java.lang.Object ref = value_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            value_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>required string value = 2;</code>
         */
        public com.google.protobuf.ByteString
            getValueBytes() {
          java.lang.Object ref = value_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            value_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>required string value = 2;</code>
         */
        public Builder setValue(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          value_ = value;
          
          return this;
        }
        /**
         * <code>required string value = 2;</code>
         */
        public Builder clearValue() {
          bitField0_ = (bitField0_ & ~0x00000002);
          value_ = getDefaultInstance().getValue();
          
          return this;
        }
        /**
         * <code>required string value = 2;</code>
         */
        public Builder setValueBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          value_ = value;
          
          return this;
        }

        // @@protoc_insertion_point(builder_scope:svmp.Intent.Tuple)
      }

      static {
        defaultInstance = new Tuple(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:svmp.Intent.Tuple)
    }

    private int bitField0_;
    // required .svmp.IntentAction action = 1;
    public static final int ACTION_FIELD_NUMBER = 1;
    private org.mitre.svmp.protocol.SVMPProtocol.IntentAction action_;
    /**
     * <code>required .svmp.IntentAction action = 1;</code>
     *
     * <pre>
     *Corresponds to Intent 'action' parameter, but limited to supported actions
     * </pre>
     */
    public boolean hasAction() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .svmp.IntentAction action = 1;</code>
     *
     * <pre>
     *Corresponds to Intent 'action' parameter, but limited to supported actions
     * </pre>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.IntentAction getAction() {
      return action_;
    }

    // repeated .svmp.Intent.Tuple extras = 2;
    public static final int EXTRAS_FIELD_NUMBER = 2;
    private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple> extras_;
    /**
     * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
     *
     * <pre>
     *Encode all bundle extras as strings, and decode them later into specific data types
     * </pre>
     */
    public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple> getExtrasList() {
      return extras_;
    }
    /**
     * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
     *
     * <pre>
     *Encode all bundle extras as strings, and decode them later into specific data types
     * </pre>
     */
    public java.util.List<? extends org.mitre.svmp.protocol.SVMPProtocol.Intent.TupleOrBuilder> 
        getExtrasOrBuilderList() {
      return extras_;
    }
    /**
     * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
     *
     * <pre>
     *Encode all bundle extras as strings, and decode them later into specific data types
     * </pre>
     */
    public int getExtrasCount() {
      return extras_.size();
    }
    /**
     * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
     *
     * <pre>
     *Encode all bundle extras as strings, and decode them later into specific data types
     * </pre>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple getExtras(int index) {
      return extras_.get(index);
    }
    /**
     * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
     *
     * <pre>
     *Encode all bundle extras as strings, and decode them later into specific data types
     * </pre>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.Intent.TupleOrBuilder getExtrasOrBuilder(
        int index) {
      return extras_.get(index);
    }

    // optional string data = 3;
    public static final int DATA_FIELD_NUMBER = 3;
    private java.lang.Object data_;
    /**
     * <code>optional string data = 3;</code>
     *
     * <pre>
     *Correspond to optional Intent parameters
     * </pre>
     */
    public boolean hasData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string data = 3;</code>
     *
     * <pre>
     *Correspond to optional Intent parameters
     * </pre>
     */
    public java.lang.String getData() {
      java.lang.Object ref = data_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          data_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string data = 3;</code>
     *
     * <pre>
     *Correspond to optional Intent parameters
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDataBytes() {
      java.lang.Object ref = data_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        data_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated int32 flags = 4;
    public static final int FLAGS_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> flags_;
    /**
     * <code>repeated int32 flags = 4;</code>
     */
    public java.util.List<java.lang.Integer>
        getFlagsList() {
      return flags_;
    }
    /**
     * <code>repeated int32 flags = 4;</code>
     */
    public int getFlagsCount() {
      return flags_.size();
    }
    /**
     * <code>repeated int32 flags = 4;</code>
     */
    public int getFlags(int index) {
      return flags_.get(index);
    }

    // repeated string categories = 5;
    public static final int CATEGORIES_FIELD_NUMBER = 5;
    private com.google.protobuf.LazyStringList categories_;
    /**
     * <code>repeated string categories = 5;</code>
     */
    public java.util.List<java.lang.String>
        getCategoriesList() {
      return categories_;
    }
    /**
     * <code>repeated string categories = 5;</code>
     */
    public int getCategoriesCount() {
      return categories_.size();
    }
    /**
     * <code>repeated string categories = 5;</code>
     */
    public java.lang.String getCategories(int index) {
      return categories_.get(index);
    }
    /**
     * <code>repeated string categories = 5;</code>
     */
    public com.google.protobuf.ByteString
        getCategoriesBytes(int index) {
      return categories_.getByteString(index);
    }

    private void initFields() {
      action_ = org.mitre.svmp.protocol.SVMPProtocol.IntentAction.ACTION_VIEW;
      extras_ = java.util.Collections.emptyList();
      data_ = "";
      flags_ = java.util.Collections.emptyList();
      categories_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasAction()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getExtrasCount(); i++) {
        if (!getExtras(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, action_.getNumber());
      }
      for (int i = 0; i < extras_.size(); i++) {
        output.writeMessage(2, extras_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(3, getDataBytes());
      }
      for (int i = 0; i < flags_.size(); i++) {
        output.writeInt32(4, flags_.get(i));
      }
      for (int i = 0; i < categories_.size(); i++) {
        output.writeBytes(5, categories_.getByteString(i));
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, action_.getNumber());
      }
      for (int i = 0; i < extras_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, extras_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getDataBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < flags_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(flags_.get(i));
        }
        size += dataSize;
        size += 1 * getFlagsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < categories_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(categories_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getCategoriesList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Intent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.Intent}
     *
     * <pre>
     * C&lt;-&gt;S
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.Intent, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.IntentOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.Intent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        action_ = org.mitre.svmp.protocol.SVMPProtocol.IntentAction.ACTION_VIEW;
        bitField0_ = (bitField0_ & ~0x00000001);
        extras_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        data_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        flags_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        categories_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Intent getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Intent build() {
        org.mitre.svmp.protocol.SVMPProtocol.Intent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Intent buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.Intent result = new org.mitre.svmp.protocol.SVMPProtocol.Intent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.action_ = action_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          extras_ = java.util.Collections.unmodifiableList(extras_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.extras_ = extras_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.data_ = data_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          flags_ = java.util.Collections.unmodifiableList(flags_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.flags_ = flags_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          categories_ = new com.google.protobuf.UnmodifiableLazyStringList(
              categories_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.categories_ = categories_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Intent other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance()) return this;
        if (other.hasAction()) {
          setAction(other.getAction());
        }
        if (!other.extras_.isEmpty()) {
          if (extras_.isEmpty()) {
            extras_ = other.extras_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureExtrasIsMutable();
            extras_.addAll(other.extras_);
          }
          
        }
        if (other.hasData()) {
          bitField0_ |= 0x00000004;
          data_ = other.data_;
          
        }
        if (!other.flags_.isEmpty()) {
          if (flags_.isEmpty()) {
            flags_ = other.flags_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureFlagsIsMutable();
            flags_.addAll(other.flags_);
          }
          
        }
        if (!other.categories_.isEmpty()) {
          if (categories_.isEmpty()) {
            categories_ = other.categories_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureCategoriesIsMutable();
            categories_.addAll(other.categories_);
          }
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasAction()) {
          
          return false;
        }
        for (int i = 0; i < getExtrasCount(); i++) {
          if (!getExtras(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.Intent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.Intent) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .svmp.IntentAction action = 1;
      private org.mitre.svmp.protocol.SVMPProtocol.IntentAction action_ = org.mitre.svmp.protocol.SVMPProtocol.IntentAction.ACTION_VIEW;
      /**
       * <code>required .svmp.IntentAction action = 1;</code>
       *
       * <pre>
       *Corresponds to Intent 'action' parameter, but limited to supported actions
       * </pre>
       */
      public boolean hasAction() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .svmp.IntentAction action = 1;</code>
       *
       * <pre>
       *Corresponds to Intent 'action' parameter, but limited to supported actions
       * </pre>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.IntentAction getAction() {
        return action_;
      }
      /**
       * <code>required .svmp.IntentAction action = 1;</code>
       *
       * <pre>
       *Corresponds to Intent 'action' parameter, but limited to supported actions
       * </pre>
       */
      public Builder setAction(org.mitre.svmp.protocol.SVMPProtocol.IntentAction value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        action_ = value;
        
        return this;
      }
      /**
       * <code>required .svmp.IntentAction action = 1;</code>
       *
       * <pre>
       *Corresponds to Intent 'action' parameter, but limited to supported actions
       * </pre>
       */
      public Builder clearAction() {
        bitField0_ = (bitField0_ & ~0x00000001);
        action_ = org.mitre.svmp.protocol.SVMPProtocol.IntentAction.ACTION_VIEW;
        
        return this;
      }

      // repeated .svmp.Intent.Tuple extras = 2;
      private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple> extras_ =
        java.util.Collections.emptyList();
      private void ensureExtrasIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          extras_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple>(extras_);
          bitField0_ |= 0x00000002;
         }
      }

      /**
       * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple> getExtrasList() {
        return java.util.Collections.unmodifiableList(extras_);
      }
      /**
       * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public int getExtrasCount() {
        return extras_.size();
      }
      /**
       * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple getExtras(int index) {
        return extras_.get(index);
      }
      /**
       * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder setExtras(
          int index, org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExtrasIsMutable();
        extras_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder setExtras(
          int index, org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple.Builder builderForValue) {
        ensureExtrasIsMutable();
        extras_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder addExtras(org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExtrasIsMutable();
        extras_.add(value);

        return this;
      }
      /**
       * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder addExtras(
          int index, org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExtrasIsMutable();
        extras_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder addExtras(
          org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple.Builder builderForValue) {
        ensureExtrasIsMutable();
        extras_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder addExtras(
          int index, org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple.Builder builderForValue) {
        ensureExtrasIsMutable();
        extras_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder addAllExtras(
          java.lang.Iterable<? extends org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple> values) {
        ensureExtrasIsMutable();
        super.addAll(values, extras_);

        return this;
      }
      /**
       * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder clearExtras() {
        extras_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);

        return this;
      }
      /**
       * <code>repeated .svmp.Intent.Tuple extras = 2;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder removeExtras(int index) {
        ensureExtrasIsMutable();
        extras_.remove(index);

        return this;
      }

      // optional string data = 3;
      private java.lang.Object data_ = "";
      /**
       * <code>optional string data = 3;</code>
       *
       * <pre>
       *Correspond to optional Intent parameters
       * </pre>
       */
      public boolean hasData() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string data = 3;</code>
       *
       * <pre>
       *Correspond to optional Intent parameters
       * </pre>
       */
      public java.lang.String getData() {
        java.lang.Object ref = data_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          data_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string data = 3;</code>
       *
       * <pre>
       *Correspond to optional Intent parameters
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDataBytes() {
        java.lang.Object ref = data_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          data_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string data = 3;</code>
       *
       * <pre>
       *Correspond to optional Intent parameters
       * </pre>
       */
      public Builder setData(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        data_ = value;
        
        return this;
      }
      /**
       * <code>optional string data = 3;</code>
       *
       * <pre>
       *Correspond to optional Intent parameters
       * </pre>
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000004);
        data_ = getDefaultInstance().getData();
        
        return this;
      }
      /**
       * <code>optional string data = 3;</code>
       *
       * <pre>
       *Correspond to optional Intent parameters
       * </pre>
       */
      public Builder setDataBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        data_ = value;
        
        return this;
      }

      // repeated int32 flags = 4;
      private java.util.List<java.lang.Integer> flags_ = java.util.Collections.emptyList();
      private void ensureFlagsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          flags_ = new java.util.ArrayList<java.lang.Integer>(flags_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 flags = 4;</code>
       */
      public java.util.List<java.lang.Integer>
          getFlagsList() {
        return java.util.Collections.unmodifiableList(flags_);
      }
      /**
       * <code>repeated int32 flags = 4;</code>
       */
      public int getFlagsCount() {
        return flags_.size();
      }
      /**
       * <code>repeated int32 flags = 4;</code>
       */
      public int getFlags(int index) {
        return flags_.get(index);
      }
      /**
       * <code>repeated int32 flags = 4;</code>
       */
      public Builder setFlags(
          int index, int value) {
        ensureFlagsIsMutable();
        flags_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 flags = 4;</code>
       */
      public Builder addFlags(int value) {
        ensureFlagsIsMutable();
        flags_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 flags = 4;</code>
       */
      public Builder addAllFlags(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureFlagsIsMutable();
        super.addAll(values, flags_);
        
        return this;
      }
      /**
       * <code>repeated int32 flags = 4;</code>
       */
      public Builder clearFlags() {
        flags_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        
        return this;
      }

      // repeated string categories = 5;
      private com.google.protobuf.LazyStringList categories_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureCategoriesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          categories_ = new com.google.protobuf.LazyStringArrayList(categories_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated string categories = 5;</code>
       */
      public java.util.List<java.lang.String>
          getCategoriesList() {
        return java.util.Collections.unmodifiableList(categories_);
      }
      /**
       * <code>repeated string categories = 5;</code>
       */
      public int getCategoriesCount() {
        return categories_.size();
      }
      /**
       * <code>repeated string categories = 5;</code>
       */
      public java.lang.String getCategories(int index) {
        return categories_.get(index);
      }
      /**
       * <code>repeated string categories = 5;</code>
       */
      public com.google.protobuf.ByteString
          getCategoriesBytes(int index) {
        return categories_.getByteString(index);
      }
      /**
       * <code>repeated string categories = 5;</code>
       */
      public Builder setCategories(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCategoriesIsMutable();
        categories_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated string categories = 5;</code>
       */
      public Builder addCategories(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCategoriesIsMutable();
        categories_.add(value);
        
        return this;
      }
      /**
       * <code>repeated string categories = 5;</code>
       */
      public Builder addAllCategories(
          java.lang.Iterable<java.lang.String> values) {
        ensureCategoriesIsMutable();
        super.addAll(values, categories_);
        
        return this;
      }
      /**
       * <code>repeated string categories = 5;</code>
       */
      public Builder clearCategories() {
        categories_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        
        return this;
      }
      /**
       * <code>repeated string categories = 5;</code>
       */
      public Builder addCategoriesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCategoriesIsMutable();
        categories_.add(value);
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.Intent)
    }

    static {
      defaultInstance = new Intent(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.Intent)
  }

  public interface NotificationOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required string contentTitle = 1;
    /**
     * <code>required string contentTitle = 1;</code>
     *
     * <pre>
     *All of the following correspond directly to fields in Android's Notification object,
     *with the exception of the icon fields which directly include image data rather than references
     * </pre>
     */
    boolean hasContentTitle();
    /**
     * <code>required string contentTitle = 1;</code>
     *
     * <pre>
     *All of the following correspond directly to fields in Android's Notification object,
     *with the exception of the icon fields which directly include image data rather than references
     * </pre>
     */
    java.lang.String getContentTitle();
    /**
     * <code>required string contentTitle = 1;</code>
     *
     * <pre>
     *All of the following correspond directly to fields in Android's Notification object,
     *with the exception of the icon fields which directly include image data rather than references
     * </pre>
     */
    com.google.protobuf.ByteString
        getContentTitleBytes();

    // required string contentText = 2;
    /**
     * <code>required string contentText = 2;</code>
     */
    boolean hasContentText();
    /**
     * <code>required string contentText = 2;</code>
     */
    java.lang.String getContentText();
    /**
     * <code>required string contentText = 2;</code>
     */
    com.google.protobuf.ByteString
        getContentTextBytes();

    // required bytes smallIcon = 3;
    /**
     * <code>required bytes smallIcon = 3;</code>
     */
    boolean hasSmallIcon();
    /**
     * <code>required bytes smallIcon = 3;</code>
     */
    com.google.protobuf.ByteString getSmallIcon();

    // optional bytes largeIcon = 4;
    /**
     * <code>optional bytes largeIcon = 4;</code>
     *
     * <pre>
     * TODO: add additional optional notification fields as necessary
     * </pre>
     */
    boolean hasLargeIcon();
    /**
     * <code>optional bytes largeIcon = 4;</code>
     *
     * <pre>
     * TODO: add additional optional notification fields as necessary
     * </pre>
     */
    com.google.protobuf.ByteString getLargeIcon();
  }
  /**
   * Protobuf type {@code svmp.Notification}
   *
   * <pre>
   * C&lt;-&gt;S
   * </pre>
   */
  public static final class Notification extends
      com.google.protobuf.GeneratedMessageLite
      implements NotificationOrBuilder {
    // Use Notification.newBuilder() to construct.
    private Notification(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private Notification(boolean noInit) {}

    private static final Notification defaultInstance;
    public static Notification getDefaultInstance() {
      return defaultInstance;
    }

    public Notification getDefaultInstanceForType() {
      return defaultInstance;
    }

    private Notification(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              contentTitle_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              contentText_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              smallIcon_ = input.readBytes();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              largeIcon_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Notification> PARSER =
        new com.google.protobuf.AbstractParser<Notification>() {
      public Notification parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Notification(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Notification> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string contentTitle = 1;
    public static final int CONTENTTITLE_FIELD_NUMBER = 1;
    private java.lang.Object contentTitle_;
    /**
     * <code>required string contentTitle = 1;</code>
     *
     * <pre>
     *All of the following correspond directly to fields in Android's Notification object,
     *with the exception of the icon fields which directly include image data rather than references
     * </pre>
     */
    public boolean hasContentTitle() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string contentTitle = 1;</code>
     *
     * <pre>
     *All of the following correspond directly to fields in Android's Notification object,
     *with the exception of the icon fields which directly include image data rather than references
     * </pre>
     */
    public java.lang.String getContentTitle() {
      java.lang.Object ref = contentTitle_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          contentTitle_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string contentTitle = 1;</code>
     *
     * <pre>
     *All of the following correspond directly to fields in Android's Notification object,
     *with the exception of the icon fields which directly include image data rather than references
     * </pre>
     */
    public com.google.protobuf.ByteString
        getContentTitleBytes() {
      java.lang.Object ref = contentTitle_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        contentTitle_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string contentText = 2;
    public static final int CONTENTTEXT_FIELD_NUMBER = 2;
    private java.lang.Object contentText_;
    /**
     * <code>required string contentText = 2;</code>
     */
    public boolean hasContentText() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string contentText = 2;</code>
     */
    public java.lang.String getContentText() {
      java.lang.Object ref = contentText_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          contentText_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string contentText = 2;</code>
     */
    public com.google.protobuf.ByteString
        getContentTextBytes() {
      java.lang.Object ref = contentText_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        contentText_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required bytes smallIcon = 3;
    public static final int SMALLICON_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString smallIcon_;
    /**
     * <code>required bytes smallIcon = 3;</code>
     */
    public boolean hasSmallIcon() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required bytes smallIcon = 3;</code>
     */
    public com.google.protobuf.ByteString getSmallIcon() {
      return smallIcon_;
    }

    // optional bytes largeIcon = 4;
    public static final int LARGEICON_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString largeIcon_;
    /**
     * <code>optional bytes largeIcon = 4;</code>
     *
     * <pre>
     * TODO: add additional optional notification fields as necessary
     * </pre>
     */
    public boolean hasLargeIcon() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bytes largeIcon = 4;</code>
     *
     * <pre>
     * TODO: add additional optional notification fields as necessary
     * </pre>
     */
    public com.google.protobuf.ByteString getLargeIcon() {
      return largeIcon_;
    }

    private void initFields() {
      contentTitle_ = "";
      contentText_ = "";
      smallIcon_ = com.google.protobuf.ByteString.EMPTY;
      largeIcon_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasContentTitle()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasContentText()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSmallIcon()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getContentTitleBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getContentTextBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, smallIcon_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, largeIcon_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getContentTitleBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getContentTextBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, smallIcon_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, largeIcon_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Notification prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.Notification}
     *
     * <pre>
     * C&lt;-&gt;S
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.Notification, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.NotificationOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.Notification.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        contentTitle_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        contentText_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        smallIcon_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        largeIcon_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Notification getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Notification build() {
        org.mitre.svmp.protocol.SVMPProtocol.Notification result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Notification buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.Notification result = new org.mitre.svmp.protocol.SVMPProtocol.Notification(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.contentTitle_ = contentTitle_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.contentText_ = contentText_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.smallIcon_ = smallIcon_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.largeIcon_ = largeIcon_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Notification other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance()) return this;
        if (other.hasContentTitle()) {
          bitField0_ |= 0x00000001;
          contentTitle_ = other.contentTitle_;
          
        }
        if (other.hasContentText()) {
          bitField0_ |= 0x00000002;
          contentText_ = other.contentText_;
          
        }
        if (other.hasSmallIcon()) {
          setSmallIcon(other.getSmallIcon());
        }
        if (other.hasLargeIcon()) {
          setLargeIcon(other.getLargeIcon());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasContentTitle()) {
          
          return false;
        }
        if (!hasContentText()) {
          
          return false;
        }
        if (!hasSmallIcon()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.Notification parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.Notification) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string contentTitle = 1;
      private java.lang.Object contentTitle_ = "";
      /**
       * <code>required string contentTitle = 1;</code>
       *
       * <pre>
       *All of the following correspond directly to fields in Android's Notification object,
       *with the exception of the icon fields which directly include image data rather than references
       * </pre>
       */
      public boolean hasContentTitle() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string contentTitle = 1;</code>
       *
       * <pre>
       *All of the following correspond directly to fields in Android's Notification object,
       *with the exception of the icon fields which directly include image data rather than references
       * </pre>
       */
      public java.lang.String getContentTitle() {
        java.lang.Object ref = contentTitle_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          contentTitle_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string contentTitle = 1;</code>
       *
       * <pre>
       *All of the following correspond directly to fields in Android's Notification object,
       *with the exception of the icon fields which directly include image data rather than references
       * </pre>
       */
      public com.google.protobuf.ByteString
          getContentTitleBytes() {
        java.lang.Object ref = contentTitle_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          contentTitle_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string contentTitle = 1;</code>
       *
       * <pre>
       *All of the following correspond directly to fields in Android's Notification object,
       *with the exception of the icon fields which directly include image data rather than references
       * </pre>
       */
      public Builder setContentTitle(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        contentTitle_ = value;
        
        return this;
      }
      /**
       * <code>required string contentTitle = 1;</code>
       *
       * <pre>
       *All of the following correspond directly to fields in Android's Notification object,
       *with the exception of the icon fields which directly include image data rather than references
       * </pre>
       */
      public Builder clearContentTitle() {
        bitField0_ = (bitField0_ & ~0x00000001);
        contentTitle_ = getDefaultInstance().getContentTitle();
        
        return this;
      }
      /**
       * <code>required string contentTitle = 1;</code>
       *
       * <pre>
       *All of the following correspond directly to fields in Android's Notification object,
       *with the exception of the icon fields which directly include image data rather than references
       * </pre>
       */
      public Builder setContentTitleBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        contentTitle_ = value;
        
        return this;
      }

      // required string contentText = 2;
      private java.lang.Object contentText_ = "";
      /**
       * <code>required string contentText = 2;</code>
       */
      public boolean hasContentText() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string contentText = 2;</code>
       */
      public java.lang.String getContentText() {
        java.lang.Object ref = contentText_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          contentText_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string contentText = 2;</code>
       */
      public com.google.protobuf.ByteString
          getContentTextBytes() {
        java.lang.Object ref = contentText_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          contentText_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string contentText = 2;</code>
       */
      public Builder setContentText(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        contentText_ = value;
        
        return this;
      }
      /**
       * <code>required string contentText = 2;</code>
       */
      public Builder clearContentText() {
        bitField0_ = (bitField0_ & ~0x00000002);
        contentText_ = getDefaultInstance().getContentText();
        
        return this;
      }
      /**
       * <code>required string contentText = 2;</code>
       */
      public Builder setContentTextBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        contentText_ = value;
        
        return this;
      }

      // required bytes smallIcon = 3;
      private com.google.protobuf.ByteString smallIcon_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes smallIcon = 3;</code>
       */
      public boolean hasSmallIcon() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required bytes smallIcon = 3;</code>
       */
      public com.google.protobuf.ByteString getSmallIcon() {
        return smallIcon_;
      }
      /**
       * <code>required bytes smallIcon = 3;</code>
       */
      public Builder setSmallIcon(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        smallIcon_ = value;
        
        return this;
      }
      /**
       * <code>required bytes smallIcon = 3;</code>
       */
      public Builder clearSmallIcon() {
        bitField0_ = (bitField0_ & ~0x00000004);
        smallIcon_ = getDefaultInstance().getSmallIcon();
        
        return this;
      }

      // optional bytes largeIcon = 4;
      private com.google.protobuf.ByteString largeIcon_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes largeIcon = 4;</code>
       *
       * <pre>
       * TODO: add additional optional notification fields as necessary
       * </pre>
       */
      public boolean hasLargeIcon() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bytes largeIcon = 4;</code>
       *
       * <pre>
       * TODO: add additional optional notification fields as necessary
       * </pre>
       */
      public com.google.protobuf.ByteString getLargeIcon() {
        return largeIcon_;
      }
      /**
       * <code>optional bytes largeIcon = 4;</code>
       *
       * <pre>
       * TODO: add additional optional notification fields as necessary
       * </pre>
       */
      public Builder setLargeIcon(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        largeIcon_ = value;
        
        return this;
      }
      /**
       * <code>optional bytes largeIcon = 4;</code>
       *
       * <pre>
       * TODO: add additional optional notification fields as necessary
       * </pre>
       */
      public Builder clearLargeIcon() {
        bitField0_ = (bitField0_ & ~0x00000008);
        largeIcon_ = getDefaultInstance().getLargeIcon();
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.Notification)
    }

    static {
      defaultInstance = new Notification(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.Notification)
  }

  public interface TouchEventOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required int32 action = 1;
    /**
     * <code>required int32 action = 1;</code>
     */
    boolean hasAction();
    /**
     * <code>required int32 action = 1;</code>
     */
    int getAction();

    // repeated .svmp.TouchEvent.PointerCoords items = 2;
    /**
     * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
     */
    java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> 
        getItemsList();
    /**
     * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords getItems(int index);
    /**
     * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
     */
    int getItemsCount();

    // optional int64 downTime = 3;
    /**
     * <code>optional int64 downTime = 3;</code>
     */
    boolean hasDownTime();
    /**
     * <code>optional int64 downTime = 3;</code>
     */
    long getDownTime();

    // optional int64 eventTime = 4;
    /**
     * <code>optional int64 eventTime = 4;</code>
     */
    boolean hasEventTime();
    /**
     * <code>optional int64 eventTime = 4;</code>
     */
    long getEventTime();

    // repeated .svmp.TouchEvent.HistoricalEvent historical = 5;
    /**
     * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
     */
    java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent> 
        getHistoricalList();
    /**
     * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent getHistorical(int index);
    /**
     * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
     */
    int getHistoricalCount();

    // optional int32 edgeFlags = 6;
    /**
     * <code>optional int32 edgeFlags = 6;</code>
     */
    boolean hasEdgeFlags();
    /**
     * <code>optional int32 edgeFlags = 6;</code>
     */
    int getEdgeFlags();
  }
  /**
   * Protobuf type {@code svmp.TouchEvent}
   *
   * <pre>
   * C-&gt;S
   * </pre>
   */
  public static final class TouchEvent extends
      com.google.protobuf.GeneratedMessageLite
      implements TouchEventOrBuilder {
    // Use TouchEvent.newBuilder() to construct.
    private TouchEvent(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private TouchEvent(boolean noInit) {}

    private static final TouchEvent defaultInstance;
    public static TouchEvent getDefaultInstance() {
      return defaultInstance;
    }

    public TouchEvent getDefaultInstanceForType() {
      return defaultInstance;
    }

    private TouchEvent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              action_ = input.readInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                items_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords>();
                mutable_bitField0_ |= 0x00000002;
              }
              items_.add(input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              downTime_ = input.readInt64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              eventTime_ = input.readInt64();
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                historical_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent>();
                mutable_bitField0_ |= 0x00000010;
              }
              historical_.add(input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              edgeFlags_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          items_ = java.util.Collections.unmodifiableList(items_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          historical_ = java.util.Collections.unmodifiableList(historical_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<TouchEvent> PARSER =
        new com.google.protobuf.AbstractParser<TouchEvent>() {
      public TouchEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TouchEvent(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TouchEvent> getParserForType() {
      return PARSER;
    }

    public interface PointerCoordsOrBuilder
        extends com.google.protobuf.MessageLiteOrBuilder {

      // required int32 id = 1;
      /**
       * <code>required int32 id = 1;</code>
       */
      boolean hasId();
      /**
       * <code>required int32 id = 1;</code>
       */
      int getId();

      // required float x = 2;
      /**
       * <code>required float x = 2;</code>
       */
      boolean hasX();
      /**
       * <code>required float x = 2;</code>
       */
      float getX();

      // required float y = 3;
      /**
       * <code>required float y = 3;</code>
       */
      boolean hasY();
      /**
       * <code>required float y = 3;</code>
       */
      float getY();
    }
    /**
     * Protobuf type {@code svmp.TouchEvent.PointerCoords}
     */
    public static final class PointerCoords extends
        com.google.protobuf.GeneratedMessageLite
        implements PointerCoordsOrBuilder {
      // Use PointerCoords.newBuilder() to construct.
      private PointerCoords(com.google.protobuf.GeneratedMessageLite.Builder builder) {
        super(builder);

      }
      private PointerCoords(boolean noInit) {}

      private static final PointerCoords defaultInstance;
      public static PointerCoords getDefaultInstance() {
        return defaultInstance;
      }

      public PointerCoords getDefaultInstanceForType() {
        return defaultInstance;
      }

      private PointerCoords(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                id_ = input.readInt32();
                break;
              }
              case 21: {
                bitField0_ |= 0x00000002;
                x_ = input.readFloat();
                break;
              }
              case 29: {
                bitField0_ |= 0x00000004;
                y_ = input.readFloat();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          makeExtensionsImmutable();
        }
      }
      public static com.google.protobuf.Parser<PointerCoords> PARSER =
          new com.google.protobuf.AbstractParser<PointerCoords>() {
        public PointerCoords parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new PointerCoords(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<PointerCoords> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required int32 id = 1;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      /**
       * <code>required int32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }

      // required float x = 2;
      public static final int X_FIELD_NUMBER = 2;
      private float x_;
      /**
       * <code>required float x = 2;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float x = 2;</code>
       */
      public float getX() {
        return x_;
      }

      // required float y = 3;
      public static final int Y_FIELD_NUMBER = 3;
      private float y_;
      /**
       * <code>required float y = 3;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required float y = 3;</code>
       */
      public float getY() {
        return y_;
      }

      private void initFields() {
        id_ = 0;
        x_ = 0F;
        y_ = 0F;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasId()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasX()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasY()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeFloat(2, x_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeFloat(3, y_);
        }
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(2, x_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(3, y_);
        }
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      /**
       * Protobuf type {@code svmp.TouchEvent.PointerCoords}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords, Builder>
          implements org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoordsOrBuilder {
        // Construct using org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          id_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          x_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000002);
          y_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords getDefaultInstanceForType() {
          return org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.getDefaultInstance();
        }

        public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords build() {
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords buildPartial() {
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords result = new org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.id_ = id_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.x_ = x_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.y_ = y_;
          result.bitField0_ = to_bitField0_;
          return result;
        }

        public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords other) {
          if (other == org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (other.hasX()) {
            setX(other.getX());
          }
          if (other.hasY()) {
            setY(other.getY());
          }
          return this;
        }

        public final boolean isInitialized() {
          if (!hasId()) {
            
            return false;
          }
          if (!hasX()) {
            
            return false;
          }
          if (!hasY()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required int32 id = 1;
        private int id_ ;
        /**
         * <code>required int32 id = 1;</code>
         */
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required int32 id = 1;</code>
         */
        public int getId() {
          return id_;
        }
        /**
         * <code>required int32 id = 1;</code>
         */
        public Builder setId(int value) {
          bitField0_ |= 0x00000001;
          id_ = value;
          
          return this;
        }
        /**
         * <code>required int32 id = 1;</code>
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0;
          
          return this;
        }

        // required float x = 2;
        private float x_ ;
        /**
         * <code>required float x = 2;</code>
         */
        public boolean hasX() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required float x = 2;</code>
         */
        public float getX() {
          return x_;
        }
        /**
         * <code>required float x = 2;</code>
         */
        public Builder setX(float value) {
          bitField0_ |= 0x00000002;
          x_ = value;
          
          return this;
        }
        /**
         * <code>required float x = 2;</code>
         */
        public Builder clearX() {
          bitField0_ = (bitField0_ & ~0x00000002);
          x_ = 0F;
          
          return this;
        }

        // required float y = 3;
        private float y_ ;
        /**
         * <code>required float y = 3;</code>
         */
        public boolean hasY() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required float y = 3;</code>
         */
        public float getY() {
          return y_;
        }
        /**
         * <code>required float y = 3;</code>
         */
        public Builder setY(float value) {
          bitField0_ |= 0x00000004;
          y_ = value;
          
          return this;
        }
        /**
         * <code>required float y = 3;</code>
         */
        public Builder clearY() {
          bitField0_ = (bitField0_ & ~0x00000004);
          y_ = 0F;
          
          return this;
        }

        // @@protoc_insertion_point(builder_scope:svmp.TouchEvent.PointerCoords)
      }

      static {
        defaultInstance = new PointerCoords(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:svmp.TouchEvent.PointerCoords)
    }

    public interface HistoricalEventOrBuilder
        extends com.google.protobuf.MessageLiteOrBuilder {

      // required int64 eventTime = 1;
      /**
       * <code>required int64 eventTime = 1;</code>
       */
      boolean hasEventTime();
      /**
       * <code>required int64 eventTime = 1;</code>
       */
      long getEventTime();

      // repeated .svmp.TouchEvent.PointerCoords coords = 2;
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
       */
      java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> 
          getCoordsList();
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
       */
      org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords getCoords(int index);
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
       */
      int getCoordsCount();
    }
    /**
     * Protobuf type {@code svmp.TouchEvent.HistoricalEvent}
     */
    public static final class HistoricalEvent extends
        com.google.protobuf.GeneratedMessageLite
        implements HistoricalEventOrBuilder {
      // Use HistoricalEvent.newBuilder() to construct.
      private HistoricalEvent(com.google.protobuf.GeneratedMessageLite.Builder builder) {
        super(builder);

      }
      private HistoricalEvent(boolean noInit) {}

      private static final HistoricalEvent defaultInstance;
      public static HistoricalEvent getDefaultInstance() {
        return defaultInstance;
      }

      public HistoricalEvent getDefaultInstanceForType() {
        return defaultInstance;
      }

      private HistoricalEvent(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                eventTime_ = input.readInt64();
                break;
              }
              case 18: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  coords_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords>();
                  mutable_bitField0_ |= 0x00000002;
                }
                coords_.add(input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.PARSER, extensionRegistry));
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            coords_ = java.util.Collections.unmodifiableList(coords_);
          }
          makeExtensionsImmutable();
        }
      }
      public static com.google.protobuf.Parser<HistoricalEvent> PARSER =
          new com.google.protobuf.AbstractParser<HistoricalEvent>() {
        public HistoricalEvent parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new HistoricalEvent(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<HistoricalEvent> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required int64 eventTime = 1;
      public static final int EVENTTIME_FIELD_NUMBER = 1;
      private long eventTime_;
      /**
       * <code>required int64 eventTime = 1;</code>
       */
      public boolean hasEventTime() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 eventTime = 1;</code>
       */
      public long getEventTime() {
        return eventTime_;
      }

      // repeated .svmp.TouchEvent.PointerCoords coords = 2;
      public static final int COORDS_FIELD_NUMBER = 2;
      private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> coords_;
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
       */
      public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> getCoordsList() {
        return coords_;
      }
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
       */
      public java.util.List<? extends org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoordsOrBuilder> 
          getCoordsOrBuilderList() {
        return coords_;
      }
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
       */
      public int getCoordsCount() {
        return coords_.size();
      }
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords getCoords(int index) {
        return coords_.get(index);
      }
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoordsOrBuilder getCoordsOrBuilder(
          int index) {
        return coords_.get(index);
      }

      private void initFields() {
        eventTime_ = 0L;
        coords_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasEventTime()) {
          memoizedIsInitialized = 0;
          return false;
        }
        for (int i = 0; i < getCoordsCount(); i++) {
          if (!getCoords(i).isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt64(1, eventTime_);
        }
        for (int i = 0; i < coords_.size(); i++) {
          output.writeMessage(2, coords_.get(i));
        }
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(1, eventTime_);
        }
        for (int i = 0; i < coords_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, coords_.get(i));
        }
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      /**
       * Protobuf type {@code svmp.TouchEvent.HistoricalEvent}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent, Builder>
          implements org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEventOrBuilder {
        // Construct using org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          eventTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000001);
          coords_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent getDefaultInstanceForType() {
          return org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent.getDefaultInstance();
        }

        public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent build() {
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent buildPartial() {
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent result = new org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.eventTime_ = eventTime_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            coords_ = java.util.Collections.unmodifiableList(coords_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.coords_ = coords_;
          result.bitField0_ = to_bitField0_;
          return result;
        }

        public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent other) {
          if (other == org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent.getDefaultInstance()) return this;
          if (other.hasEventTime()) {
            setEventTime(other.getEventTime());
          }
          if (!other.coords_.isEmpty()) {
            if (coords_.isEmpty()) {
              coords_ = other.coords_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCoordsIsMutable();
              coords_.addAll(other.coords_);
            }
            
          }
          return this;
        }

        public final boolean isInitialized() {
          if (!hasEventTime()) {
            
            return false;
          }
          for (int i = 0; i < getCoordsCount(); i++) {
            if (!getCoords(i).isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required int64 eventTime = 1;
        private long eventTime_ ;
        /**
         * <code>required int64 eventTime = 1;</code>
         */
        public boolean hasEventTime() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required int64 eventTime = 1;</code>
         */
        public long getEventTime() {
          return eventTime_;
        }
        /**
         * <code>required int64 eventTime = 1;</code>
         */
        public Builder setEventTime(long value) {
          bitField0_ |= 0x00000001;
          eventTime_ = value;
          
          return this;
        }
        /**
         * <code>required int64 eventTime = 1;</code>
         */
        public Builder clearEventTime() {
          bitField0_ = (bitField0_ & ~0x00000001);
          eventTime_ = 0L;
          
          return this;
        }

        // repeated .svmp.TouchEvent.PointerCoords coords = 2;
        private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> coords_ =
          java.util.Collections.emptyList();
        private void ensureCoordsIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            coords_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords>(coords_);
            bitField0_ |= 0x00000002;
           }
        }

        /**
         * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
         */
        public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> getCoordsList() {
          return java.util.Collections.unmodifiableList(coords_);
        }
        /**
         * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
         */
        public int getCoordsCount() {
          return coords_.size();
        }
        /**
         * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
         */
        public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords getCoords(int index) {
          return coords_.get(index);
        }
        /**
         * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
         */
        public Builder setCoords(
            int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords value) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCoordsIsMutable();
          coords_.set(index, value);

          return this;
        }
        /**
         * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
         */
        public Builder setCoords(
            int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.Builder builderForValue) {
          ensureCoordsIsMutable();
          coords_.set(index, builderForValue.build());

          return this;
        }
        /**
         * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
         */
        public Builder addCoords(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords value) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCoordsIsMutable();
          coords_.add(value);

          return this;
        }
        /**
         * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
         */
        public Builder addCoords(
            int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords value) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCoordsIsMutable();
          coords_.add(index, value);

          return this;
        }
        /**
         * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
         */
        public Builder addCoords(
            org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.Builder builderForValue) {
          ensureCoordsIsMutable();
          coords_.add(builderForValue.build());

          return this;
        }
        /**
         * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
         */
        public Builder addCoords(
            int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.Builder builderForValue) {
          ensureCoordsIsMutable();
          coords_.add(index, builderForValue.build());

          return this;
        }
        /**
         * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
         */
        public Builder addAllCoords(
            java.lang.Iterable<? extends org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> values) {
          ensureCoordsIsMutable();
          super.addAll(values, coords_);

          return this;
        }
        /**
         * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
         */
        public Builder clearCoords() {
          coords_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);

          return this;
        }
        /**
         * <code>repeated .svmp.TouchEvent.PointerCoords coords = 2;</code>
         */
        public Builder removeCoords(int index) {
          ensureCoordsIsMutable();
          coords_.remove(index);

          return this;
        }

        // @@protoc_insertion_point(builder_scope:svmp.TouchEvent.HistoricalEvent)
      }

      static {
        defaultInstance = new HistoricalEvent(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:svmp.TouchEvent.HistoricalEvent)
    }

    private int bitField0_;
    // required int32 action = 1;
    public static final int ACTION_FIELD_NUMBER = 1;
    private int action_;
    /**
     * <code>required int32 action = 1;</code>
     */
    public boolean hasAction() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 action = 1;</code>
     */
    public int getAction() {
      return action_;
    }

    // repeated .svmp.TouchEvent.PointerCoords items = 2;
    public static final int ITEMS_FIELD_NUMBER = 2;
    private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> items_;
    /**
     * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
     */
    public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> getItemsList() {
      return items_;
    }
    /**
     * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
     */
    public java.util.List<? extends org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoordsOrBuilder> 
        getItemsOrBuilderList() {
      return items_;
    }
    /**
     * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
     */
    public int getItemsCount() {
      return items_.size();
    }
    /**
     * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords getItems(int index) {
      return items_.get(index);
    }
    /**
     * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoordsOrBuilder getItemsOrBuilder(
        int index) {
      return items_.get(index);
    }

    // optional int64 downTime = 3;
    public static final int DOWNTIME_FIELD_NUMBER = 3;
    private long downTime_;
    /**
     * <code>optional int64 downTime = 3;</code>
     */
    public boolean hasDownTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 downTime = 3;</code>
     */
    public long getDownTime() {
      return downTime_;
    }

    // optional int64 eventTime = 4;
    public static final int EVENTTIME_FIELD_NUMBER = 4;
    private long eventTime_;
    /**
     * <code>optional int64 eventTime = 4;</code>
     */
    public boolean hasEventTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int64 eventTime = 4;</code>
     */
    public long getEventTime() {
      return eventTime_;
    }

    // repeated .svmp.TouchEvent.HistoricalEvent historical = 5;
    public static final int HISTORICAL_FIELD_NUMBER = 5;
    private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent> historical_;
    /**
     * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
     */
    public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent> getHistoricalList() {
      return historical_;
    }
    /**
     * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
     */
    public java.util.List<? extends org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEventOrBuilder> 
        getHistoricalOrBuilderList() {
      return historical_;
    }
    /**
     * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
     */
    public int getHistoricalCount() {
      return historical_.size();
    }
    /**
     * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent getHistorical(int index) {
      return historical_.get(index);
    }
    /**
     * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEventOrBuilder getHistoricalOrBuilder(
        int index) {
      return historical_.get(index);
    }

    // optional int32 edgeFlags = 6;
    public static final int EDGEFLAGS_FIELD_NUMBER = 6;
    private int edgeFlags_;
    /**
     * <code>optional int32 edgeFlags = 6;</code>
     */
    public boolean hasEdgeFlags() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 edgeFlags = 6;</code>
     */
    public int getEdgeFlags() {
      return edgeFlags_;
    }

    private void initFields() {
      action_ = 0;
      items_ = java.util.Collections.emptyList();
      downTime_ = 0L;
      eventTime_ = 0L;
      historical_ = java.util.Collections.emptyList();
      edgeFlags_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasAction()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getItemsCount(); i++) {
        if (!getItems(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getHistoricalCount(); i++) {
        if (!getHistorical(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, action_);
      }
      for (int i = 0; i < items_.size(); i++) {
        output.writeMessage(2, items_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(3, downTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(4, eventTime_);
      }
      for (int i = 0; i < historical_.size(); i++) {
        output.writeMessage(5, historical_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, edgeFlags_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, action_);
      }
      for (int i = 0; i < items_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, items_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, downTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, eventTime_);
      }
      for (int i = 0; i < historical_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, historical_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, edgeFlags_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.TouchEvent}
     *
     * <pre>
     * C-&gt;S
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.TouchEventOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        action_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        items_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        downTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        eventTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        historical_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        edgeFlags_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent build() {
        org.mitre.svmp.protocol.SVMPProtocol.TouchEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.TouchEvent result = new org.mitre.svmp.protocol.SVMPProtocol.TouchEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.action_ = action_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          items_ = java.util.Collections.unmodifiableList(items_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.items_ = items_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.downTime_ = downTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.eventTime_ = eventTime_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          historical_ = java.util.Collections.unmodifiableList(historical_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.historical_ = historical_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.edgeFlags_ = edgeFlags_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.getDefaultInstance()) return this;
        if (other.hasAction()) {
          setAction(other.getAction());
        }
        if (!other.items_.isEmpty()) {
          if (items_.isEmpty()) {
            items_ = other.items_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureItemsIsMutable();
            items_.addAll(other.items_);
          }
          
        }
        if (other.hasDownTime()) {
          setDownTime(other.getDownTime());
        }
        if (other.hasEventTime()) {
          setEventTime(other.getEventTime());
        }
        if (!other.historical_.isEmpty()) {
          if (historical_.isEmpty()) {
            historical_ = other.historical_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureHistoricalIsMutable();
            historical_.addAll(other.historical_);
          }
          
        }
        if (other.hasEdgeFlags()) {
          setEdgeFlags(other.getEdgeFlags());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasAction()) {
          
          return false;
        }
        for (int i = 0; i < getItemsCount(); i++) {
          if (!getItems(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getHistoricalCount(); i++) {
          if (!getHistorical(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.TouchEvent) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 action = 1;
      private int action_ ;
      /**
       * <code>required int32 action = 1;</code>
       */
      public boolean hasAction() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 action = 1;</code>
       */
      public int getAction() {
        return action_;
      }
      /**
       * <code>required int32 action = 1;</code>
       */
      public Builder setAction(int value) {
        bitField0_ |= 0x00000001;
        action_ = value;
        
        return this;
      }
      /**
       * <code>required int32 action = 1;</code>
       */
      public Builder clearAction() {
        bitField0_ = (bitField0_ & ~0x00000001);
        action_ = 0;
        
        return this;
      }

      // repeated .svmp.TouchEvent.PointerCoords items = 2;
      private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> items_ =
        java.util.Collections.emptyList();
      private void ensureItemsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          items_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords>(items_);
          bitField0_ |= 0x00000002;
         }
      }

      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
       */
      public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> getItemsList() {
        return java.util.Collections.unmodifiableList(items_);
      }
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
       */
      public int getItemsCount() {
        return items_.size();
      }
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords getItems(int index) {
        return items_.get(index);
      }
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
       */
      public Builder setItems(
          int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureItemsIsMutable();
        items_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
       */
      public Builder setItems(
          int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.Builder builderForValue) {
        ensureItemsIsMutable();
        items_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
       */
      public Builder addItems(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureItemsIsMutable();
        items_.add(value);

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
       */
      public Builder addItems(
          int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureItemsIsMutable();
        items_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
       */
      public Builder addItems(
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.Builder builderForValue) {
        ensureItemsIsMutable();
        items_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
       */
      public Builder addItems(
          int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.Builder builderForValue) {
        ensureItemsIsMutable();
        items_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
       */
      public Builder addAllItems(
          java.lang.Iterable<? extends org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> values) {
        ensureItemsIsMutable();
        super.addAll(values, items_);

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
       */
      public Builder clearItems() {
        items_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent.PointerCoords items = 2;</code>
       */
      public Builder removeItems(int index) {
        ensureItemsIsMutable();
        items_.remove(index);

        return this;
      }

      // optional int64 downTime = 3;
      private long downTime_ ;
      /**
       * <code>optional int64 downTime = 3;</code>
       */
      public boolean hasDownTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int64 downTime = 3;</code>
       */
      public long getDownTime() {
        return downTime_;
      }
      /**
       * <code>optional int64 downTime = 3;</code>
       */
      public Builder setDownTime(long value) {
        bitField0_ |= 0x00000004;
        downTime_ = value;
        
        return this;
      }
      /**
       * <code>optional int64 downTime = 3;</code>
       */
      public Builder clearDownTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        downTime_ = 0L;
        
        return this;
      }

      // optional int64 eventTime = 4;
      private long eventTime_ ;
      /**
       * <code>optional int64 eventTime = 4;</code>
       */
      public boolean hasEventTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int64 eventTime = 4;</code>
       */
      public long getEventTime() {
        return eventTime_;
      }
      /**
       * <code>optional int64 eventTime = 4;</code>
       */
      public Builder setEventTime(long value) {
        bitField0_ |= 0x00000008;
        eventTime_ = value;
        
        return this;
      }
      /**
       * <code>optional int64 eventTime = 4;</code>
       */
      public Builder clearEventTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        eventTime_ = 0L;
        
        return this;
      }

      // repeated .svmp.TouchEvent.HistoricalEvent historical = 5;
      private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent> historical_ =
        java.util.Collections.emptyList();
      private void ensureHistoricalIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          historical_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent>(historical_);
          bitField0_ |= 0x00000010;
         }
      }

      /**
       * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
       */
      public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent> getHistoricalList() {
        return java.util.Collections.unmodifiableList(historical_);
      }
      /**
       * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
       */
      public int getHistoricalCount() {
        return historical_.size();
      }
      /**
       * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent getHistorical(int index) {
        return historical_.get(index);
      }
      /**
       * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
       */
      public Builder setHistorical(
          int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHistoricalIsMutable();
        historical_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
       */
      public Builder setHistorical(
          int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent.Builder builderForValue) {
        ensureHistoricalIsMutable();
        historical_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
       */
      public Builder addHistorical(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHistoricalIsMutable();
        historical_.add(value);

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
       */
      public Builder addHistorical(
          int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHistoricalIsMutable();
        historical_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
       */
      public Builder addHistorical(
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent.Builder builderForValue) {
        ensureHistoricalIsMutable();
        historical_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
       */
      public Builder addHistorical(
          int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent.Builder builderForValue) {
        ensureHistoricalIsMutable();
        historical_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
       */
      public Builder addAllHistorical(
          java.lang.Iterable<? extends org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.HistoricalEvent> values) {
        ensureHistoricalIsMutable();
        super.addAll(values, historical_);

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
       */
      public Builder clearHistorical() {
        historical_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);

        return this;
      }
      /**
       * <code>repeated .svmp.TouchEvent.HistoricalEvent historical = 5;</code>
       */
      public Builder removeHistorical(int index) {
        ensureHistoricalIsMutable();
        historical_.remove(index);

        return this;
      }

      // optional int32 edgeFlags = 6;
      private int edgeFlags_ ;
      /**
       * <code>optional int32 edgeFlags = 6;</code>
       */
      public boolean hasEdgeFlags() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 edgeFlags = 6;</code>
       */
      public int getEdgeFlags() {
        return edgeFlags_;
      }
      /**
       * <code>optional int32 edgeFlags = 6;</code>
       */
      public Builder setEdgeFlags(int value) {
        bitField0_ |= 0x00000020;
        edgeFlags_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 edgeFlags = 6;</code>
       */
      public Builder clearEdgeFlags() {
        bitField0_ = (bitField0_ & ~0x00000020);
        edgeFlags_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.TouchEvent)
    }

    static {
      defaultInstance = new TouchEvent(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.TouchEvent)
  }

  public interface ScreenInfoOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required int32 x = 1;
    /**
     * <code>required int32 x = 1;</code>
     */
    boolean hasX();
    /**
     * <code>required int32 x = 1;</code>
     */
    int getX();

    // required int32 y = 2;
    /**
     * <code>required int32 y = 2;</code>
     */
    boolean hasY();
    /**
     * <code>required int32 y = 2;</code>
     */
    int getY();
  }
  /**
   * Protobuf type {@code svmp.ScreenInfo}
   *
   * <pre>
   * S-&gt;C
   * </pre>
   */
  public static final class ScreenInfo extends
      com.google.protobuf.GeneratedMessageLite
      implements ScreenInfoOrBuilder {
    // Use ScreenInfo.newBuilder() to construct.
    private ScreenInfo(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private ScreenInfo(boolean noInit) {}

    private static final ScreenInfo defaultInstance;
    public static ScreenInfo getDefaultInstance() {
      return defaultInstance;
    }

    public ScreenInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private ScreenInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              x_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              y_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<ScreenInfo> PARSER =
        new com.google.protobuf.AbstractParser<ScreenInfo>() {
      public ScreenInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ScreenInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ScreenInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 x = 1;
    public static final int X_FIELD_NUMBER = 1;
    private int x_;
    /**
     * <code>required int32 x = 1;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 x = 1;</code>
     */
    public int getX() {
      return x_;
    }

    // required int32 y = 2;
    public static final int Y_FIELD_NUMBER = 2;
    private int y_;
    /**
     * <code>required int32 y = 2;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 y = 2;</code>
     */
    public int getY() {
      return y_;
    }

    private void initFields() {
      x_ = 0;
      y_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, y_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, y_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.ScreenInfo}
     *
     * <pre>
     * S-&gt;C
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.ScreenInfoOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo build() {
        org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo result = new org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.y_ = y_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 x = 1;
      private int x_ ;
      /**
       * <code>required int32 x = 1;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 x = 1;</code>
       */
      public int getX() {
        return x_;
      }
      /**
       * <code>required int32 x = 1;</code>
       */
      public Builder setX(int value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        
        return this;
      }
      /**
       * <code>required int32 x = 1;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
        
        return this;
      }

      // required int32 y = 2;
      private int y_ ;
      /**
       * <code>required int32 y = 2;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 y = 2;</code>
       */
      public int getY() {
        return y_;
      }
      /**
       * <code>required int32 y = 2;</code>
       */
      public Builder setY(int value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        
        return this;
      }
      /**
       * <code>required int32 y = 2;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.ScreenInfo)
    }

    static {
      defaultInstance = new ScreenInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.ScreenInfo)
  }

  public interface SensorEventOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .svmp.SensorType type = 1;
    /**
     * <code>required .svmp.SensorType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .svmp.SensorType type = 1;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.SensorType getType();

    // required int32 accuracy = 2;
    /**
     * <code>required int32 accuracy = 2;</code>
     */
    boolean hasAccuracy();
    /**
     * <code>required int32 accuracy = 2;</code>
     */
    int getAccuracy();

    // required int64 timestamp = 3;
    /**
     * <code>required int64 timestamp = 3;</code>
     */
    boolean hasTimestamp();
    /**
     * <code>required int64 timestamp = 3;</code>
     */
    long getTimestamp();

    // repeated float values = 4;
    /**
     * <code>repeated float values = 4;</code>
     */
    java.util.List<java.lang.Float> getValuesList();
    /**
     * <code>repeated float values = 4;</code>
     */
    int getValuesCount();
    /**
     * <code>repeated float values = 4;</code>
     */
    float getValues(int index);
  }
  /**
   * Protobuf type {@code svmp.SensorEvent}
   *
   * <pre>
   * C-&gt;S: Sensor update event
   * </pre>
   */
  public static final class SensorEvent extends
      com.google.protobuf.GeneratedMessageLite
      implements SensorEventOrBuilder {
    // Use SensorEvent.newBuilder() to construct.
    private SensorEvent(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private SensorEvent(boolean noInit) {}

    private static final SensorEvent defaultInstance;
    public static SensorEvent getDefaultInstance() {
      return defaultInstance;
    }

    public SensorEvent getDefaultInstanceForType() {
      return defaultInstance;
    }

    private SensorEvent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.SensorType value = org.mitre.svmp.protocol.SVMPProtocol.SensorType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              accuracy_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              timestamp_ = input.readInt64();
              break;
            }
            case 37: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                values_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000008;
              }
              values_.add(input.readFloat());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                values_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                values_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          values_ = java.util.Collections.unmodifiableList(values_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<SensorEvent> PARSER =
        new com.google.protobuf.AbstractParser<SensorEvent>() {
      public SensorEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SensorEvent(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SensorEvent> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .svmp.SensorType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mitre.svmp.protocol.SVMPProtocol.SensorType type_;
    /**
     * <code>required .svmp.SensorType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .svmp.SensorType type = 1;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.SensorType getType() {
      return type_;
    }

    // required int32 accuracy = 2;
    public static final int ACCURACY_FIELD_NUMBER = 2;
    private int accuracy_;
    /**
     * <code>required int32 accuracy = 2;</code>
     */
    public boolean hasAccuracy() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 accuracy = 2;</code>
     */
    public int getAccuracy() {
      return accuracy_;
    }

    // required int64 timestamp = 3;
    public static final int TIMESTAMP_FIELD_NUMBER = 3;
    private long timestamp_;
    /**
     * <code>required int64 timestamp = 3;</code>
     */
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int64 timestamp = 3;</code>
     */
    public long getTimestamp() {
      return timestamp_;
    }

    // repeated float values = 4;
    public static final int VALUES_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Float> values_;
    /**
     * <code>repeated float values = 4;</code>
     */
    public java.util.List<java.lang.Float>
        getValuesList() {
      return values_;
    }
    /**
     * <code>repeated float values = 4;</code>
     */
    public int getValuesCount() {
      return values_.size();
    }
    /**
     * <code>repeated float values = 4;</code>
     */
    public float getValues(int index) {
      return values_.get(index);
    }

    private void initFields() {
      type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
      accuracy_ = 0;
      timestamp_ = 0L;
      values_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAccuracy()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTimestamp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, accuracy_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, timestamp_);
      }
      for (int i = 0; i < values_.size(); i++) {
        output.writeFloat(4, values_.get(i));
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, accuracy_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, timestamp_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getValuesList().size();
        size += dataSize;
        size += 1 * getValuesList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.SensorEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.SensorEvent}
     *
     * <pre>
     * C-&gt;S: Sensor update event
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.SensorEvent, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.SensorEventOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
        bitField0_ = (bitField0_ & ~0x00000001);
        accuracy_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        timestamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        values_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.SensorEvent getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.SensorEvent build() {
        org.mitre.svmp.protocol.SVMPProtocol.SensorEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.SensorEvent buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.SensorEvent result = new org.mitre.svmp.protocol.SVMPProtocol.SensorEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.accuracy_ = accuracy_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.timestamp_ = timestamp_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          values_ = java.util.Collections.unmodifiableList(values_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.values_ = values_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.SensorEvent other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasAccuracy()) {
          setAccuracy(other.getAccuracy());
        }
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (!other.values_.isEmpty()) {
          if (values_.isEmpty()) {
            values_ = other.values_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureValuesIsMutable();
            values_.addAll(other.values_);
          }
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        if (!hasAccuracy()) {
          
          return false;
        }
        if (!hasTimestamp()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.SensorEvent) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .svmp.SensorType type = 1;
      private org.mitre.svmp.protocol.SVMPProtocol.SensorType type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
      /**
       * <code>required .svmp.SensorType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .svmp.SensorType type = 1;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.SensorType getType() {
        return type_;
      }
      /**
       * <code>required .svmp.SensorType type = 1;</code>
       */
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.SensorType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      /**
       * <code>required .svmp.SensorType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
        
        return this;
      }

      // required int32 accuracy = 2;
      private int accuracy_ ;
      /**
       * <code>required int32 accuracy = 2;</code>
       */
      public boolean hasAccuracy() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 accuracy = 2;</code>
       */
      public int getAccuracy() {
        return accuracy_;
      }
      /**
       * <code>required int32 accuracy = 2;</code>
       */
      public Builder setAccuracy(int value) {
        bitField0_ |= 0x00000002;
        accuracy_ = value;
        
        return this;
      }
      /**
       * <code>required int32 accuracy = 2;</code>
       */
      public Builder clearAccuracy() {
        bitField0_ = (bitField0_ & ~0x00000002);
        accuracy_ = 0;
        
        return this;
      }

      // required int64 timestamp = 3;
      private long timestamp_ ;
      /**
       * <code>required int64 timestamp = 3;</code>
       */
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int64 timestamp = 3;</code>
       */
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <code>required int64 timestamp = 3;</code>
       */
      public Builder setTimestamp(long value) {
        bitField0_ |= 0x00000004;
        timestamp_ = value;
        
        return this;
      }
      /**
       * <code>required int64 timestamp = 3;</code>
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000004);
        timestamp_ = 0L;
        
        return this;
      }

      // repeated float values = 4;
      private java.util.List<java.lang.Float> values_ = java.util.Collections.emptyList();
      private void ensureValuesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          values_ = new java.util.ArrayList<java.lang.Float>(values_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated float values = 4;</code>
       */
      public java.util.List<java.lang.Float>
          getValuesList() {
        return java.util.Collections.unmodifiableList(values_);
      }
      /**
       * <code>repeated float values = 4;</code>
       */
      public int getValuesCount() {
        return values_.size();
      }
      /**
       * <code>repeated float values = 4;</code>
       */
      public float getValues(int index) {
        return values_.get(index);
      }
      /**
       * <code>repeated float values = 4;</code>
       */
      public Builder setValues(
          int index, float value) {
        ensureValuesIsMutable();
        values_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated float values = 4;</code>
       */
      public Builder addValues(float value) {
        ensureValuesIsMutable();
        values_.add(value);
        
        return this;
      }
      /**
       * <code>repeated float values = 4;</code>
       */
      public Builder addAllValues(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureValuesIsMutable();
        super.addAll(values, values_);
        
        return this;
      }
      /**
       * <code>repeated float values = 4;</code>
       */
      public Builder clearValues() {
        values_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.SensorEvent)
    }

    static {
      defaultInstance = new SensorEvent(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.SensorEvent)
  }

  public interface LocationProviderInfoOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required string provider = 1;
    /**
     * <code>required string provider = 1;</code>
     */
    boolean hasProvider();
    /**
     * <code>required string provider = 1;</code>
     */
    java.lang.String getProvider();
    /**
     * <code>required string provider = 1;</code>
     */
    com.google.protobuf.ByteString
        getProviderBytes();

    // required bool requiresNetwork = 2;
    /**
     * <code>required bool requiresNetwork = 2;</code>
     */
    boolean hasRequiresNetwork();
    /**
     * <code>required bool requiresNetwork = 2;</code>
     */
    boolean getRequiresNetwork();

    // required bool requiresSatellite = 3;
    /**
     * <code>required bool requiresSatellite = 3;</code>
     */
    boolean hasRequiresSatellite();
    /**
     * <code>required bool requiresSatellite = 3;</code>
     */
    boolean getRequiresSatellite();

    // required bool requiresCell = 4;
    /**
     * <code>required bool requiresCell = 4;</code>
     */
    boolean hasRequiresCell();
    /**
     * <code>required bool requiresCell = 4;</code>
     */
    boolean getRequiresCell();

    // required bool hasMonetaryCost = 5;
    /**
     * <code>required bool hasMonetaryCost = 5;</code>
     */
    boolean hasHasMonetaryCost();
    /**
     * <code>required bool hasMonetaryCost = 5;</code>
     */
    boolean getHasMonetaryCost();

    // required bool supportsAltitude = 6;
    /**
     * <code>required bool supportsAltitude = 6;</code>
     */
    boolean hasSupportsAltitude();
    /**
     * <code>required bool supportsAltitude = 6;</code>
     */
    boolean getSupportsAltitude();

    // required bool supportsSpeed = 7;
    /**
     * <code>required bool supportsSpeed = 7;</code>
     */
    boolean hasSupportsSpeed();
    /**
     * <code>required bool supportsSpeed = 7;</code>
     */
    boolean getSupportsSpeed();

    // required bool supportsBearing = 8;
    /**
     * <code>required bool supportsBearing = 8;</code>
     */
    boolean hasSupportsBearing();
    /**
     * <code>required bool supportsBearing = 8;</code>
     */
    boolean getSupportsBearing();

    // required int32 powerRequirement = 9;
    /**
     * <code>required int32 powerRequirement = 9;</code>
     */
    boolean hasPowerRequirement();
    /**
     * <code>required int32 powerRequirement = 9;</code>
     */
    int getPowerRequirement();

    // required int32 accuracy = 10;
    /**
     * <code>required int32 accuracy = 10;</code>
     */
    boolean hasAccuracy();
    /**
     * <code>required int32 accuracy = 10;</code>
     */
    int getAccuracy();
  }
  /**
   * Protobuf type {@code svmp.LocationProviderInfo}
   *
   * <pre>
   * C-&gt;S: Location provider information
   * </pre>
   */
  public static final class LocationProviderInfo extends
      com.google.protobuf.GeneratedMessageLite
      implements LocationProviderInfoOrBuilder {
    // Use LocationProviderInfo.newBuilder() to construct.
    private LocationProviderInfo(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private LocationProviderInfo(boolean noInit) {}

    private static final LocationProviderInfo defaultInstance;
    public static LocationProviderInfo getDefaultInstance() {
      return defaultInstance;
    }

    public LocationProviderInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private LocationProviderInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              provider_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              requiresNetwork_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              requiresSatellite_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              requiresCell_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              hasMonetaryCost_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              supportsAltitude_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              supportsSpeed_ = input.readBool();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              supportsBearing_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              powerRequirement_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              accuracy_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<LocationProviderInfo> PARSER =
        new com.google.protobuf.AbstractParser<LocationProviderInfo>() {
      public LocationProviderInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LocationProviderInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LocationProviderInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string provider = 1;
    public static final int PROVIDER_FIELD_NUMBER = 1;
    private java.lang.Object provider_;
    /**
     * <code>required string provider = 1;</code>
     */
    public boolean hasProvider() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string provider = 1;</code>
     */
    public java.lang.String getProvider() {
      java.lang.Object ref = provider_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          provider_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string provider = 1;</code>
     */
    public com.google.protobuf.ByteString
        getProviderBytes() {
      java.lang.Object ref = provider_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        provider_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required bool requiresNetwork = 2;
    public static final int REQUIRESNETWORK_FIELD_NUMBER = 2;
    private boolean requiresNetwork_;
    /**
     * <code>required bool requiresNetwork = 2;</code>
     */
    public boolean hasRequiresNetwork() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bool requiresNetwork = 2;</code>
     */
    public boolean getRequiresNetwork() {
      return requiresNetwork_;
    }

    // required bool requiresSatellite = 3;
    public static final int REQUIRESSATELLITE_FIELD_NUMBER = 3;
    private boolean requiresSatellite_;
    /**
     * <code>required bool requiresSatellite = 3;</code>
     */
    public boolean hasRequiresSatellite() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required bool requiresSatellite = 3;</code>
     */
    public boolean getRequiresSatellite() {
      return requiresSatellite_;
    }

    // required bool requiresCell = 4;
    public static final int REQUIRESCELL_FIELD_NUMBER = 4;
    private boolean requiresCell_;
    /**
     * <code>required bool requiresCell = 4;</code>
     */
    public boolean hasRequiresCell() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required bool requiresCell = 4;</code>
     */
    public boolean getRequiresCell() {
      return requiresCell_;
    }

    // required bool hasMonetaryCost = 5;
    public static final int HASMONETARYCOST_FIELD_NUMBER = 5;
    private boolean hasMonetaryCost_;
    /**
     * <code>required bool hasMonetaryCost = 5;</code>
     */
    public boolean hasHasMonetaryCost() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required bool hasMonetaryCost = 5;</code>
     */
    public boolean getHasMonetaryCost() {
      return hasMonetaryCost_;
    }

    // required bool supportsAltitude = 6;
    public static final int SUPPORTSALTITUDE_FIELD_NUMBER = 6;
    private boolean supportsAltitude_;
    /**
     * <code>required bool supportsAltitude = 6;</code>
     */
    public boolean hasSupportsAltitude() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required bool supportsAltitude = 6;</code>
     */
    public boolean getSupportsAltitude() {
      return supportsAltitude_;
    }

    // required bool supportsSpeed = 7;
    public static final int SUPPORTSSPEED_FIELD_NUMBER = 7;
    private boolean supportsSpeed_;
    /**
     * <code>required bool supportsSpeed = 7;</code>
     */
    public boolean hasSupportsSpeed() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required bool supportsSpeed = 7;</code>
     */
    public boolean getSupportsSpeed() {
      return supportsSpeed_;
    }

    // required bool supportsBearing = 8;
    public static final int SUPPORTSBEARING_FIELD_NUMBER = 8;
    private boolean supportsBearing_;
    /**
     * <code>required bool supportsBearing = 8;</code>
     */
    public boolean hasSupportsBearing() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required bool supportsBearing = 8;</code>
     */
    public boolean getSupportsBearing() {
      return supportsBearing_;
    }

    // required int32 powerRequirement = 9;
    public static final int POWERREQUIREMENT_FIELD_NUMBER = 9;
    private int powerRequirement_;
    /**
     * <code>required int32 powerRequirement = 9;</code>
     */
    public boolean hasPowerRequirement() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required int32 powerRequirement = 9;</code>
     */
    public int getPowerRequirement() {
      return powerRequirement_;
    }

    // required int32 accuracy = 10;
    public static final int ACCURACY_FIELD_NUMBER = 10;
    private int accuracy_;
    /**
     * <code>required int32 accuracy = 10;</code>
     */
    public boolean hasAccuracy() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required int32 accuracy = 10;</code>
     */
    public int getAccuracy() {
      return accuracy_;
    }

    private void initFields() {
      provider_ = "";
      requiresNetwork_ = false;
      requiresSatellite_ = false;
      requiresCell_ = false;
      hasMonetaryCost_ = false;
      supportsAltitude_ = false;
      supportsSpeed_ = false;
      supportsBearing_ = false;
      powerRequirement_ = 0;
      accuracy_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasProvider()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRequiresNetwork()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRequiresSatellite()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRequiresCell()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHasMonetaryCost()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSupportsAltitude()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSupportsSpeed()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSupportsBearing()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPowerRequirement()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAccuracy()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getProviderBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, requiresNetwork_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, requiresSatellite_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, requiresCell_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, hasMonetaryCost_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, supportsAltitude_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, supportsSpeed_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(8, supportsBearing_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, powerRequirement_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, accuracy_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getProviderBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, requiresNetwork_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, requiresSatellite_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, requiresCell_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, hasMonetaryCost_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, supportsAltitude_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, supportsSpeed_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, supportsBearing_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, powerRequirement_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, accuracy_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.LocationProviderInfo}
     *
     * <pre>
     * C-&gt;S: Location provider information
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfoOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        provider_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        requiresNetwork_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        requiresSatellite_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        requiresCell_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        hasMonetaryCost_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        supportsAltitude_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        supportsSpeed_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        supportsBearing_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        powerRequirement_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        accuracy_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo build() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo result = new org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.provider_ = provider_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.requiresNetwork_ = requiresNetwork_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.requiresSatellite_ = requiresSatellite_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.requiresCell_ = requiresCell_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.hasMonetaryCost_ = hasMonetaryCost_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.supportsAltitude_ = supportsAltitude_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.supportsSpeed_ = supportsSpeed_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.supportsBearing_ = supportsBearing_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.powerRequirement_ = powerRequirement_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.accuracy_ = accuracy_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.getDefaultInstance()) return this;
        if (other.hasProvider()) {
          bitField0_ |= 0x00000001;
          provider_ = other.provider_;
          
        }
        if (other.hasRequiresNetwork()) {
          setRequiresNetwork(other.getRequiresNetwork());
        }
        if (other.hasRequiresSatellite()) {
          setRequiresSatellite(other.getRequiresSatellite());
        }
        if (other.hasRequiresCell()) {
          setRequiresCell(other.getRequiresCell());
        }
        if (other.hasHasMonetaryCost()) {
          setHasMonetaryCost(other.getHasMonetaryCost());
        }
        if (other.hasSupportsAltitude()) {
          setSupportsAltitude(other.getSupportsAltitude());
        }
        if (other.hasSupportsSpeed()) {
          setSupportsSpeed(other.getSupportsSpeed());
        }
        if (other.hasSupportsBearing()) {
          setSupportsBearing(other.getSupportsBearing());
        }
        if (other.hasPowerRequirement()) {
          setPowerRequirement(other.getPowerRequirement());
        }
        if (other.hasAccuracy()) {
          setAccuracy(other.getAccuracy());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasProvider()) {
          
          return false;
        }
        if (!hasRequiresNetwork()) {
          
          return false;
        }
        if (!hasRequiresSatellite()) {
          
          return false;
        }
        if (!hasRequiresCell()) {
          
          return false;
        }
        if (!hasHasMonetaryCost()) {
          
          return false;
        }
        if (!hasSupportsAltitude()) {
          
          return false;
        }
        if (!hasSupportsSpeed()) {
          
          return false;
        }
        if (!hasSupportsBearing()) {
          
          return false;
        }
        if (!hasPowerRequirement()) {
          
          return false;
        }
        if (!hasAccuracy()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string provider = 1;
      private java.lang.Object provider_ = "";
      /**
       * <code>required string provider = 1;</code>
       */
      public boolean hasProvider() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public java.lang.String getProvider() {
        java.lang.Object ref = provider_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          provider_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public com.google.protobuf.ByteString
          getProviderBytes() {
        java.lang.Object ref = provider_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          provider_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public Builder setProvider(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        provider_ = value;
        
        return this;
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public Builder clearProvider() {
        bitField0_ = (bitField0_ & ~0x00000001);
        provider_ = getDefaultInstance().getProvider();
        
        return this;
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public Builder setProviderBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        provider_ = value;
        
        return this;
      }

      // required bool requiresNetwork = 2;
      private boolean requiresNetwork_ ;
      /**
       * <code>required bool requiresNetwork = 2;</code>
       */
      public boolean hasRequiresNetwork() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bool requiresNetwork = 2;</code>
       */
      public boolean getRequiresNetwork() {
        return requiresNetwork_;
      }
      /**
       * <code>required bool requiresNetwork = 2;</code>
       */
      public Builder setRequiresNetwork(boolean value) {
        bitField0_ |= 0x00000002;
        requiresNetwork_ = value;
        
        return this;
      }
      /**
       * <code>required bool requiresNetwork = 2;</code>
       */
      public Builder clearRequiresNetwork() {
        bitField0_ = (bitField0_ & ~0x00000002);
        requiresNetwork_ = false;
        
        return this;
      }

      // required bool requiresSatellite = 3;
      private boolean requiresSatellite_ ;
      /**
       * <code>required bool requiresSatellite = 3;</code>
       */
      public boolean hasRequiresSatellite() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required bool requiresSatellite = 3;</code>
       */
      public boolean getRequiresSatellite() {
        return requiresSatellite_;
      }
      /**
       * <code>required bool requiresSatellite = 3;</code>
       */
      public Builder setRequiresSatellite(boolean value) {
        bitField0_ |= 0x00000004;
        requiresSatellite_ = value;
        
        return this;
      }
      /**
       * <code>required bool requiresSatellite = 3;</code>
       */
      public Builder clearRequiresSatellite() {
        bitField0_ = (bitField0_ & ~0x00000004);
        requiresSatellite_ = false;
        
        return this;
      }

      // required bool requiresCell = 4;
      private boolean requiresCell_ ;
      /**
       * <code>required bool requiresCell = 4;</code>
       */
      public boolean hasRequiresCell() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required bool requiresCell = 4;</code>
       */
      public boolean getRequiresCell() {
        return requiresCell_;
      }
      /**
       * <code>required bool requiresCell = 4;</code>
       */
      public Builder setRequiresCell(boolean value) {
        bitField0_ |= 0x00000008;
        requiresCell_ = value;
        
        return this;
      }
      /**
       * <code>required bool requiresCell = 4;</code>
       */
      public Builder clearRequiresCell() {
        bitField0_ = (bitField0_ & ~0x00000008);
        requiresCell_ = false;
        
        return this;
      }

      // required bool hasMonetaryCost = 5;
      private boolean hasMonetaryCost_ ;
      /**
       * <code>required bool hasMonetaryCost = 5;</code>
       */
      public boolean hasHasMonetaryCost() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required bool hasMonetaryCost = 5;</code>
       */
      public boolean getHasMonetaryCost() {
        return hasMonetaryCost_;
      }
      /**
       * <code>required bool hasMonetaryCost = 5;</code>
       */
      public Builder setHasMonetaryCost(boolean value) {
        bitField0_ |= 0x00000010;
        hasMonetaryCost_ = value;
        
        return this;
      }
      /**
       * <code>required bool hasMonetaryCost = 5;</code>
       */
      public Builder clearHasMonetaryCost() {
        bitField0_ = (bitField0_ & ~0x00000010);
        hasMonetaryCost_ = false;
        
        return this;
      }

      // required bool supportsAltitude = 6;
      private boolean supportsAltitude_ ;
      /**
       * <code>required bool supportsAltitude = 6;</code>
       */
      public boolean hasSupportsAltitude() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required bool supportsAltitude = 6;</code>
       */
      public boolean getSupportsAltitude() {
        return supportsAltitude_;
      }
      /**
       * <code>required bool supportsAltitude = 6;</code>
       */
      public Builder setSupportsAltitude(boolean value) {
        bitField0_ |= 0x00000020;
        supportsAltitude_ = value;
        
        return this;
      }
      /**
       * <code>required bool supportsAltitude = 6;</code>
       */
      public Builder clearSupportsAltitude() {
        bitField0_ = (bitField0_ & ~0x00000020);
        supportsAltitude_ = false;
        
        return this;
      }

      // required bool supportsSpeed = 7;
      private boolean supportsSpeed_ ;
      /**
       * <code>required bool supportsSpeed = 7;</code>
       */
      public boolean hasSupportsSpeed() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required bool supportsSpeed = 7;</code>
       */
      public boolean getSupportsSpeed() {
        return supportsSpeed_;
      }
      /**
       * <code>required bool supportsSpeed = 7;</code>
       */
      public Builder setSupportsSpeed(boolean value) {
        bitField0_ |= 0x00000040;
        supportsSpeed_ = value;
        
        return this;
      }
      /**
       * <code>required bool supportsSpeed = 7;</code>
       */
      public Builder clearSupportsSpeed() {
        bitField0_ = (bitField0_ & ~0x00000040);
        supportsSpeed_ = false;
        
        return this;
      }

      // required bool supportsBearing = 8;
      private boolean supportsBearing_ ;
      /**
       * <code>required bool supportsBearing = 8;</code>
       */
      public boolean hasSupportsBearing() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required bool supportsBearing = 8;</code>
       */
      public boolean getSupportsBearing() {
        return supportsBearing_;
      }
      /**
       * <code>required bool supportsBearing = 8;</code>
       */
      public Builder setSupportsBearing(boolean value) {
        bitField0_ |= 0x00000080;
        supportsBearing_ = value;
        
        return this;
      }
      /**
       * <code>required bool supportsBearing = 8;</code>
       */
      public Builder clearSupportsBearing() {
        bitField0_ = (bitField0_ & ~0x00000080);
        supportsBearing_ = false;
        
        return this;
      }

      // required int32 powerRequirement = 9;
      private int powerRequirement_ ;
      /**
       * <code>required int32 powerRequirement = 9;</code>
       */
      public boolean hasPowerRequirement() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required int32 powerRequirement = 9;</code>
       */
      public int getPowerRequirement() {
        return powerRequirement_;
      }
      /**
       * <code>required int32 powerRequirement = 9;</code>
       */
      public Builder setPowerRequirement(int value) {
        bitField0_ |= 0x00000100;
        powerRequirement_ = value;
        
        return this;
      }
      /**
       * <code>required int32 powerRequirement = 9;</code>
       */
      public Builder clearPowerRequirement() {
        bitField0_ = (bitField0_ & ~0x00000100);
        powerRequirement_ = 0;
        
        return this;
      }

      // required int32 accuracy = 10;
      private int accuracy_ ;
      /**
       * <code>required int32 accuracy = 10;</code>
       */
      public boolean hasAccuracy() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required int32 accuracy = 10;</code>
       */
      public int getAccuracy() {
        return accuracy_;
      }
      /**
       * <code>required int32 accuracy = 10;</code>
       */
      public Builder setAccuracy(int value) {
        bitField0_ |= 0x00000200;
        accuracy_ = value;
        
        return this;
      }
      /**
       * <code>required int32 accuracy = 10;</code>
       */
      public Builder clearAccuracy() {
        bitField0_ = (bitField0_ & ~0x00000200);
        accuracy_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.LocationProviderInfo)
    }

    static {
      defaultInstance = new LocationProviderInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.LocationProviderInfo)
  }

  public interface LocationProviderStatusOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required string provider = 1;
    /**
     * <code>required string provider = 1;</code>
     */
    boolean hasProvider();
    /**
     * <code>required string provider = 1;</code>
     */
    java.lang.String getProvider();
    /**
     * <code>required string provider = 1;</code>
     */
    com.google.protobuf.ByteString
        getProviderBytes();

    // required int32 status = 2;
    /**
     * <code>required int32 status = 2;</code>
     */
    boolean hasStatus();
    /**
     * <code>required int32 status = 2;</code>
     */
    int getStatus();

    // repeated .svmp.LocationProviderStatus.Tuple extras = 3;
    /**
     * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
     *
     * <pre>
     *Encode all bundle extras as strings, and decode them later into specific data types
     * </pre>
     */
    java.util.List<org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple> 
        getExtrasList();
    /**
     * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
     *
     * <pre>
     *Encode all bundle extras as strings, and decode them later into specific data types
     * </pre>
     */
    org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple getExtras(int index);
    /**
     * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
     *
     * <pre>
     *Encode all bundle extras as strings, and decode them later into specific data types
     * </pre>
     */
    int getExtrasCount();
  }
  /**
   * Protobuf type {@code svmp.LocationProviderStatus}
   *
   * <pre>
   * C-&gt;S: Location provider status update
   * </pre>
   */
  public static final class LocationProviderStatus extends
      com.google.protobuf.GeneratedMessageLite
      implements LocationProviderStatusOrBuilder {
    // Use LocationProviderStatus.newBuilder() to construct.
    private LocationProviderStatus(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private LocationProviderStatus(boolean noInit) {}

    private static final LocationProviderStatus defaultInstance;
    public static LocationProviderStatus getDefaultInstance() {
      return defaultInstance;
    }

    public LocationProviderStatus getDefaultInstanceForType() {
      return defaultInstance;
    }

    private LocationProviderStatus(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              provider_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              status_ = input.readInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                extras_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple>();
                mutable_bitField0_ |= 0x00000004;
              }
              extras_.add(input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          extras_ = java.util.Collections.unmodifiableList(extras_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<LocationProviderStatus> PARSER =
        new com.google.protobuf.AbstractParser<LocationProviderStatus>() {
      public LocationProviderStatus parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LocationProviderStatus(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LocationProviderStatus> getParserForType() {
      return PARSER;
    }

    public interface TupleOrBuilder
        extends com.google.protobuf.MessageLiteOrBuilder {

      // required string key = 1;
      /**
       * <code>required string key = 1;</code>
       */
      boolean hasKey();
      /**
       * <code>required string key = 1;</code>
       */
      java.lang.String getKey();
      /**
       * <code>required string key = 1;</code>
       */
      com.google.protobuf.ByteString
          getKeyBytes();

      // required string value = 2;
      /**
       * <code>required string value = 2;</code>
       */
      boolean hasValue();
      /**
       * <code>required string value = 2;</code>
       */
      java.lang.String getValue();
      /**
       * <code>required string value = 2;</code>
       */
      com.google.protobuf.ByteString
          getValueBytes();
    }
    /**
     * Protobuf type {@code svmp.LocationProviderStatus.Tuple}
     *
     * <pre>
     *For approximating a Java Map structure (Map&lt;String,String&gt;)
     * </pre>
     */
    public static final class Tuple extends
        com.google.protobuf.GeneratedMessageLite
        implements TupleOrBuilder {
      // Use Tuple.newBuilder() to construct.
      private Tuple(com.google.protobuf.GeneratedMessageLite.Builder builder) {
        super(builder);

      }
      private Tuple(boolean noInit) {}

      private static final Tuple defaultInstance;
      public static Tuple getDefaultInstance() {
        return defaultInstance;
      }

      public Tuple getDefaultInstanceForType() {
        return defaultInstance;
      }

      private Tuple(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                key_ = input.readBytes();
                break;
              }
              case 18: {
                bitField0_ |= 0x00000002;
                value_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          makeExtensionsImmutable();
        }
      }
      public static com.google.protobuf.Parser<Tuple> PARSER =
          new com.google.protobuf.AbstractParser<Tuple>() {
        public Tuple parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Tuple(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Tuple> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required string key = 1;
      public static final int KEY_FIELD_NUMBER = 1;
      private java.lang.Object key_;
      /**
       * <code>required string key = 1;</code>
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string key = 1;</code>
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            key_ = s;
          }
          return s;
        }
      }
      /**
       * <code>required string key = 1;</code>
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // required string value = 2;
      public static final int VALUE_FIELD_NUMBER = 2;
      private java.lang.Object value_;
      /**
       * <code>required string value = 2;</code>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string value = 2;</code>
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            value_ = s;
          }
          return s;
        }
      }
      /**
       * <code>required string value = 2;</code>
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        key_ = "";
        value_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasKey()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasValue()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getKeyBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(2, getValueBytes());
        }
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getKeyBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, getValueBytes());
        }
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      /**
       * Protobuf type {@code svmp.LocationProviderStatus.Tuple}
       *
       * <pre>
       *For approximating a Java Map structure (Map&lt;String,String&gt;)
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple, Builder>
          implements org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.TupleOrBuilder {
        // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          key_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          value_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple getDefaultInstanceForType() {
          return org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple.getDefaultInstance();
        }

        public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple build() {
          org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple buildPartial() {
          org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple result = new org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.key_ = key_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.value_ = value_;
          result.bitField0_ = to_bitField0_;
          return result;
        }

        public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple other) {
          if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple.getDefaultInstance()) return this;
          if (other.hasKey()) {
            bitField0_ |= 0x00000001;
            key_ = other.key_;
            
          }
          if (other.hasValue()) {
            bitField0_ |= 0x00000002;
            value_ = other.value_;
            
          }
          return this;
        }

        public final boolean isInitialized() {
          if (!hasKey()) {
            
            return false;
          }
          if (!hasValue()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required string key = 1;
        private java.lang.Object key_ = "";
        /**
         * <code>required string key = 1;</code>
         */
        public boolean hasKey() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required string key = 1;</code>
         */
        public java.lang.String getKey() {
          java.lang.Object ref = key_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            key_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>required string key = 1;</code>
         */
        public com.google.protobuf.ByteString
            getKeyBytes() {
          java.lang.Object ref = key_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            key_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>required string key = 1;</code>
         */
        public Builder setKey(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          key_ = value;
          
          return this;
        }
        /**
         * <code>required string key = 1;</code>
         */
        public Builder clearKey() {
          bitField0_ = (bitField0_ & ~0x00000001);
          key_ = getDefaultInstance().getKey();
          
          return this;
        }
        /**
         * <code>required string key = 1;</code>
         */
        public Builder setKeyBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          key_ = value;
          
          return this;
        }

        // required string value = 2;
        private java.lang.Object value_ = "";
        /**
         * <code>required string value = 2;</code>
         */
        public boolean hasValue() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required string value = 2;</code>
         */
        public java.lang.String getValue() {
          java.lang.Object ref = value_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            value_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>required string value = 2;</code>
         */
        public com.google.protobuf.ByteString
            getValueBytes() {
          java.lang.Object ref = value_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            value_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>required string value = 2;</code>
         */
        public Builder setValue(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          value_ = value;
          
          return this;
        }
        /**
         * <code>required string value = 2;</code>
         */
        public Builder clearValue() {
          bitField0_ = (bitField0_ & ~0x00000002);
          value_ = getDefaultInstance().getValue();
          
          return this;
        }
        /**
         * <code>required string value = 2;</code>
         */
        public Builder setValueBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          value_ = value;
          
          return this;
        }

        // @@protoc_insertion_point(builder_scope:svmp.LocationProviderStatus.Tuple)
      }

      static {
        defaultInstance = new Tuple(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:svmp.LocationProviderStatus.Tuple)
    }

    private int bitField0_;
    // required string provider = 1;
    public static final int PROVIDER_FIELD_NUMBER = 1;
    private java.lang.Object provider_;
    /**
     * <code>required string provider = 1;</code>
     */
    public boolean hasProvider() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string provider = 1;</code>
     */
    public java.lang.String getProvider() {
      java.lang.Object ref = provider_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          provider_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string provider = 1;</code>
     */
    public com.google.protobuf.ByteString
        getProviderBytes() {
      java.lang.Object ref = provider_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        provider_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required int32 status = 2;
    public static final int STATUS_FIELD_NUMBER = 2;
    private int status_;
    /**
     * <code>required int32 status = 2;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 status = 2;</code>
     */
    public int getStatus() {
      return status_;
    }

    // repeated .svmp.LocationProviderStatus.Tuple extras = 3;
    public static final int EXTRAS_FIELD_NUMBER = 3;
    private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple> extras_;
    /**
     * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
     *
     * <pre>
     *Encode all bundle extras as strings, and decode them later into specific data types
     * </pre>
     */
    public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple> getExtrasList() {
      return extras_;
    }
    /**
     * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
     *
     * <pre>
     *Encode all bundle extras as strings, and decode them later into specific data types
     * </pre>
     */
    public java.util.List<? extends org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.TupleOrBuilder> 
        getExtrasOrBuilderList() {
      return extras_;
    }
    /**
     * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
     *
     * <pre>
     *Encode all bundle extras as strings, and decode them later into specific data types
     * </pre>
     */
    public int getExtrasCount() {
      return extras_.size();
    }
    /**
     * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
     *
     * <pre>
     *Encode all bundle extras as strings, and decode them later into specific data types
     * </pre>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple getExtras(int index) {
      return extras_.get(index);
    }
    /**
     * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
     *
     * <pre>
     *Encode all bundle extras as strings, and decode them later into specific data types
     * </pre>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.TupleOrBuilder getExtrasOrBuilder(
        int index) {
      return extras_.get(index);
    }

    private void initFields() {
      provider_ = "";
      status_ = 0;
      extras_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasProvider()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStatus()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getExtrasCount(); i++) {
        if (!getExtras(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getProviderBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, status_);
      }
      for (int i = 0; i < extras_.size(); i++) {
        output.writeMessage(3, extras_.get(i));
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getProviderBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, status_);
      }
      for (int i = 0; i < extras_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, extras_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.LocationProviderStatus}
     *
     * <pre>
     * C-&gt;S: Location provider status update
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatusOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        provider_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        status_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        extras_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus build() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus result = new org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.provider_ = provider_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.status_ = status_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          extras_ = java.util.Collections.unmodifiableList(extras_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.extras_ = extras_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.getDefaultInstance()) return this;
        if (other.hasProvider()) {
          bitField0_ |= 0x00000001;
          provider_ = other.provider_;
          
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (!other.extras_.isEmpty()) {
          if (extras_.isEmpty()) {
            extras_ = other.extras_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureExtrasIsMutable();
            extras_.addAll(other.extras_);
          }
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasProvider()) {
          
          return false;
        }
        if (!hasStatus()) {
          
          return false;
        }
        for (int i = 0; i < getExtrasCount(); i++) {
          if (!getExtras(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string provider = 1;
      private java.lang.Object provider_ = "";
      /**
       * <code>required string provider = 1;</code>
       */
      public boolean hasProvider() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public java.lang.String getProvider() {
        java.lang.Object ref = provider_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          provider_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public com.google.protobuf.ByteString
          getProviderBytes() {
        java.lang.Object ref = provider_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          provider_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public Builder setProvider(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        provider_ = value;
        
        return this;
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public Builder clearProvider() {
        bitField0_ = (bitField0_ & ~0x00000001);
        provider_ = getDefaultInstance().getProvider();
        
        return this;
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public Builder setProviderBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        provider_ = value;
        
        return this;
      }

      // required int32 status = 2;
      private int status_ ;
      /**
       * <code>required int32 status = 2;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 status = 2;</code>
       */
      public int getStatus() {
        return status_;
      }
      /**
       * <code>required int32 status = 2;</code>
       */
      public Builder setStatus(int value) {
        bitField0_ |= 0x00000002;
        status_ = value;
        
        return this;
      }
      /**
       * <code>required int32 status = 2;</code>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000002);
        status_ = 0;
        
        return this;
      }

      // repeated .svmp.LocationProviderStatus.Tuple extras = 3;
      private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple> extras_ =
        java.util.Collections.emptyList();
      private void ensureExtrasIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          extras_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple>(extras_);
          bitField0_ |= 0x00000004;
         }
      }

      /**
       * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple> getExtrasList() {
        return java.util.Collections.unmodifiableList(extras_);
      }
      /**
       * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public int getExtrasCount() {
        return extras_.size();
      }
      /**
       * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple getExtras(int index) {
        return extras_.get(index);
      }
      /**
       * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder setExtras(
          int index, org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExtrasIsMutable();
        extras_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder setExtras(
          int index, org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple.Builder builderForValue) {
        ensureExtrasIsMutable();
        extras_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder addExtras(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExtrasIsMutable();
        extras_.add(value);

        return this;
      }
      /**
       * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder addExtras(
          int index, org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExtrasIsMutable();
        extras_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder addExtras(
          org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple.Builder builderForValue) {
        ensureExtrasIsMutable();
        extras_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder addExtras(
          int index, org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple.Builder builderForValue) {
        ensureExtrasIsMutable();
        extras_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder addAllExtras(
          java.lang.Iterable<? extends org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple> values) {
        ensureExtrasIsMutable();
        super.addAll(values, extras_);

        return this;
      }
      /**
       * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder clearExtras() {
        extras_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);

        return this;
      }
      /**
       * <code>repeated .svmp.LocationProviderStatus.Tuple extras = 3;</code>
       *
       * <pre>
       *Encode all bundle extras as strings, and decode them later into specific data types
       * </pre>
       */
      public Builder removeExtras(int index) {
        ensureExtrasIsMutable();
        extras_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.LocationProviderStatus)
    }

    static {
      defaultInstance = new LocationProviderStatus(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.LocationProviderStatus)
  }

  public interface LocationProviderEnabledOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required string provider = 1;
    /**
     * <code>required string provider = 1;</code>
     */
    boolean hasProvider();
    /**
     * <code>required string provider = 1;</code>
     */
    java.lang.String getProvider();
    /**
     * <code>required string provider = 1;</code>
     */
    com.google.protobuf.ByteString
        getProviderBytes();

    // required bool enabled = 2;
    /**
     * <code>required bool enabled = 2;</code>
     */
    boolean hasEnabled();
    /**
     * <code>required bool enabled = 2;</code>
     */
    boolean getEnabled();
  }
  /**
   * Protobuf type {@code svmp.LocationProviderEnabled}
   *
   * <pre>
   * C-&gt;S: Location provider enabled update
   * </pre>
   */
  public static final class LocationProviderEnabled extends
      com.google.protobuf.GeneratedMessageLite
      implements LocationProviderEnabledOrBuilder {
    // Use LocationProviderEnabled.newBuilder() to construct.
    private LocationProviderEnabled(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private LocationProviderEnabled(boolean noInit) {}

    private static final LocationProviderEnabled defaultInstance;
    public static LocationProviderEnabled getDefaultInstance() {
      return defaultInstance;
    }

    public LocationProviderEnabled getDefaultInstanceForType() {
      return defaultInstance;
    }

    private LocationProviderEnabled(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              provider_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              enabled_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<LocationProviderEnabled> PARSER =
        new com.google.protobuf.AbstractParser<LocationProviderEnabled>() {
      public LocationProviderEnabled parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LocationProviderEnabled(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LocationProviderEnabled> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string provider = 1;
    public static final int PROVIDER_FIELD_NUMBER = 1;
    private java.lang.Object provider_;
    /**
     * <code>required string provider = 1;</code>
     */
    public boolean hasProvider() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string provider = 1;</code>
     */
    public java.lang.String getProvider() {
      java.lang.Object ref = provider_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          provider_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string provider = 1;</code>
     */
    public com.google.protobuf.ByteString
        getProviderBytes() {
      java.lang.Object ref = provider_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        provider_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required bool enabled = 2;
    public static final int ENABLED_FIELD_NUMBER = 2;
    private boolean enabled_;
    /**
     * <code>required bool enabled = 2;</code>
     */
    public boolean hasEnabled() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bool enabled = 2;</code>
     */
    public boolean getEnabled() {
      return enabled_;
    }

    private void initFields() {
      provider_ = "";
      enabled_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasProvider()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEnabled()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getProviderBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, enabled_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getProviderBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, enabled_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.LocationProviderEnabled}
     *
     * <pre>
     * C-&gt;S: Location provider enabled update
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabledOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        provider_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        enabled_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled build() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled result = new org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.provider_ = provider_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.enabled_ = enabled_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.getDefaultInstance()) return this;
        if (other.hasProvider()) {
          bitField0_ |= 0x00000001;
          provider_ = other.provider_;
          
        }
        if (other.hasEnabled()) {
          setEnabled(other.getEnabled());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasProvider()) {
          
          return false;
        }
        if (!hasEnabled()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string provider = 1;
      private java.lang.Object provider_ = "";
      /**
       * <code>required string provider = 1;</code>
       */
      public boolean hasProvider() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public java.lang.String getProvider() {
        java.lang.Object ref = provider_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          provider_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public com.google.protobuf.ByteString
          getProviderBytes() {
        java.lang.Object ref = provider_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          provider_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public Builder setProvider(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        provider_ = value;
        
        return this;
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public Builder clearProvider() {
        bitField0_ = (bitField0_ & ~0x00000001);
        provider_ = getDefaultInstance().getProvider();
        
        return this;
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public Builder setProviderBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        provider_ = value;
        
        return this;
      }

      // required bool enabled = 2;
      private boolean enabled_ ;
      /**
       * <code>required bool enabled = 2;</code>
       */
      public boolean hasEnabled() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bool enabled = 2;</code>
       */
      public boolean getEnabled() {
        return enabled_;
      }
      /**
       * <code>required bool enabled = 2;</code>
       */
      public Builder setEnabled(boolean value) {
        bitField0_ |= 0x00000002;
        enabled_ = value;
        
        return this;
      }
      /**
       * <code>required bool enabled = 2;</code>
       */
      public Builder clearEnabled() {
        bitField0_ = (bitField0_ & ~0x00000002);
        enabled_ = false;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.LocationProviderEnabled)
    }

    static {
      defaultInstance = new LocationProviderEnabled(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.LocationProviderEnabled)
  }

  public interface LocationUpdateOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required double latitude = 1;
    /**
     * <code>required double latitude = 1;</code>
     */
    boolean hasLatitude();
    /**
     * <code>required double latitude = 1;</code>
     */
    double getLatitude();

    // required double longitude = 2;
    /**
     * <code>required double longitude = 2;</code>
     */
    boolean hasLongitude();
    /**
     * <code>required double longitude = 2;</code>
     */
    double getLongitude();

    // required int64 time = 3;
    /**
     * <code>required int64 time = 3;</code>
     */
    boolean hasTime();
    /**
     * <code>required int64 time = 3;</code>
     */
    long getTime();

    // optional string provider = 4;
    /**
     * <code>optional string provider = 4;</code>
     */
    boolean hasProvider();
    /**
     * <code>optional string provider = 4;</code>
     */
    java.lang.String getProvider();
    /**
     * <code>optional string provider = 4;</code>
     */
    com.google.protobuf.ByteString
        getProviderBytes();

    // optional float accuracy = 5;
    /**
     * <code>optional float accuracy = 5;</code>
     */
    boolean hasAccuracy();
    /**
     * <code>optional float accuracy = 5;</code>
     */
    float getAccuracy();

    // optional double altitude = 6;
    /**
     * <code>optional double altitude = 6;</code>
     */
    boolean hasAltitude();
    /**
     * <code>optional double altitude = 6;</code>
     */
    double getAltitude();

    // optional float bearing = 7;
    /**
     * <code>optional float bearing = 7;</code>
     */
    boolean hasBearing();
    /**
     * <code>optional float bearing = 7;</code>
     */
    float getBearing();

    // optional float speed = 8;
    /**
     * <code>optional float speed = 8;</code>
     */
    boolean hasSpeed();
    /**
     * <code>optional float speed = 8;</code>
     */
    float getSpeed();
  }
  /**
   * Protobuf type {@code svmp.LocationUpdate}
   *
   * <pre>
   * C-&gt;S: Location update event
   * </pre>
   */
  public static final class LocationUpdate extends
      com.google.protobuf.GeneratedMessageLite
      implements LocationUpdateOrBuilder {
    // Use LocationUpdate.newBuilder() to construct.
    private LocationUpdate(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private LocationUpdate(boolean noInit) {}

    private static final LocationUpdate defaultInstance;
    public static LocationUpdate getDefaultInstance() {
      return defaultInstance;
    }

    public LocationUpdate getDefaultInstanceForType() {
      return defaultInstance;
    }

    private LocationUpdate(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              latitude_ = input.readDouble();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              longitude_ = input.readDouble();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              time_ = input.readInt64();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              provider_ = input.readBytes();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              accuracy_ = input.readFloat();
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              altitude_ = input.readDouble();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              bearing_ = input.readFloat();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              speed_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<LocationUpdate> PARSER =
        new com.google.protobuf.AbstractParser<LocationUpdate>() {
      public LocationUpdate parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LocationUpdate(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LocationUpdate> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required double latitude = 1;
    public static final int LATITUDE_FIELD_NUMBER = 1;
    private double latitude_;
    /**
     * <code>required double latitude = 1;</code>
     */
    public boolean hasLatitude() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required double latitude = 1;</code>
     */
    public double getLatitude() {
      return latitude_;
    }

    // required double longitude = 2;
    public static final int LONGITUDE_FIELD_NUMBER = 2;
    private double longitude_;
    /**
     * <code>required double longitude = 2;</code>
     */
    public boolean hasLongitude() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required double longitude = 2;</code>
     */
    public double getLongitude() {
      return longitude_;
    }

    // required int64 time = 3;
    public static final int TIME_FIELD_NUMBER = 3;
    private long time_;
    /**
     * <code>required int64 time = 3;</code>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int64 time = 3;</code>
     */
    public long getTime() {
      return time_;
    }

    // optional string provider = 4;
    public static final int PROVIDER_FIELD_NUMBER = 4;
    private java.lang.Object provider_;
    /**
     * <code>optional string provider = 4;</code>
     */
    public boolean hasProvider() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string provider = 4;</code>
     */
    public java.lang.String getProvider() {
      java.lang.Object ref = provider_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          provider_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string provider = 4;</code>
     */
    public com.google.protobuf.ByteString
        getProviderBytes() {
      java.lang.Object ref = provider_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        provider_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional float accuracy = 5;
    public static final int ACCURACY_FIELD_NUMBER = 5;
    private float accuracy_;
    /**
     * <code>optional float accuracy = 5;</code>
     */
    public boolean hasAccuracy() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float accuracy = 5;</code>
     */
    public float getAccuracy() {
      return accuracy_;
    }

    // optional double altitude = 6;
    public static final int ALTITUDE_FIELD_NUMBER = 6;
    private double altitude_;
    /**
     * <code>optional double altitude = 6;</code>
     */
    public boolean hasAltitude() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional double altitude = 6;</code>
     */
    public double getAltitude() {
      return altitude_;
    }

    // optional float bearing = 7;
    public static final int BEARING_FIELD_NUMBER = 7;
    private float bearing_;
    /**
     * <code>optional float bearing = 7;</code>
     */
    public boolean hasBearing() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float bearing = 7;</code>
     */
    public float getBearing() {
      return bearing_;
    }

    // optional float speed = 8;
    public static final int SPEED_FIELD_NUMBER = 8;
    private float speed_;
    /**
     * <code>optional float speed = 8;</code>
     */
    public boolean hasSpeed() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float speed = 8;</code>
     */
    public float getSpeed() {
      return speed_;
    }

    private void initFields() {
      latitude_ = 0D;
      longitude_ = 0D;
      time_ = 0L;
      provider_ = "";
      accuracy_ = 0F;
      altitude_ = 0D;
      bearing_ = 0F;
      speed_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasLatitude()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLongitude()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(1, latitude_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, longitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, time_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getProviderBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, accuracy_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(6, altitude_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, bearing_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, speed_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, latitude_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, longitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, time_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getProviderBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, accuracy_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, altitude_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, bearing_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, speed_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.LocationUpdate}
     *
     * <pre>
     * C-&gt;S: Location update event
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.LocationUpdateOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        latitude_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        longitude_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        time_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        provider_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        accuracy_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        altitude_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        bearing_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        speed_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate build() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate result = new org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.latitude_ = latitude_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.longitude_ = longitude_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.time_ = time_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.provider_ = provider_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.accuracy_ = accuracy_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.altitude_ = altitude_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.bearing_ = bearing_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.speed_ = speed_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance()) return this;
        if (other.hasLatitude()) {
          setLatitude(other.getLatitude());
        }
        if (other.hasLongitude()) {
          setLongitude(other.getLongitude());
        }
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        if (other.hasProvider()) {
          bitField0_ |= 0x00000008;
          provider_ = other.provider_;
          
        }
        if (other.hasAccuracy()) {
          setAccuracy(other.getAccuracy());
        }
        if (other.hasAltitude()) {
          setAltitude(other.getAltitude());
        }
        if (other.hasBearing()) {
          setBearing(other.getBearing());
        }
        if (other.hasSpeed()) {
          setSpeed(other.getSpeed());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasLatitude()) {
          
          return false;
        }
        if (!hasLongitude()) {
          
          return false;
        }
        if (!hasTime()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required double latitude = 1;
      private double latitude_ ;
      /**
       * <code>required double latitude = 1;</code>
       */
      public boolean hasLatitude() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required double latitude = 1;</code>
       */
      public double getLatitude() {
        return latitude_;
      }
      /**
       * <code>required double latitude = 1;</code>
       */
      public Builder setLatitude(double value) {
        bitField0_ |= 0x00000001;
        latitude_ = value;
        
        return this;
      }
      /**
       * <code>required double latitude = 1;</code>
       */
      public Builder clearLatitude() {
        bitField0_ = (bitField0_ & ~0x00000001);
        latitude_ = 0D;
        
        return this;
      }

      // required double longitude = 2;
      private double longitude_ ;
      /**
       * <code>required double longitude = 2;</code>
       */
      public boolean hasLongitude() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required double longitude = 2;</code>
       */
      public double getLongitude() {
        return longitude_;
      }
      /**
       * <code>required double longitude = 2;</code>
       */
      public Builder setLongitude(double value) {
        bitField0_ |= 0x00000002;
        longitude_ = value;
        
        return this;
      }
      /**
       * <code>required double longitude = 2;</code>
       */
      public Builder clearLongitude() {
        bitField0_ = (bitField0_ & ~0x00000002);
        longitude_ = 0D;
        
        return this;
      }

      // required int64 time = 3;
      private long time_ ;
      /**
       * <code>required int64 time = 3;</code>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int64 time = 3;</code>
       */
      public long getTime() {
        return time_;
      }
      /**
       * <code>required int64 time = 3;</code>
       */
      public Builder setTime(long value) {
        bitField0_ |= 0x00000004;
        time_ = value;
        
        return this;
      }
      /**
       * <code>required int64 time = 3;</code>
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        time_ = 0L;
        
        return this;
      }

      // optional string provider = 4;
      private java.lang.Object provider_ = "";
      /**
       * <code>optional string provider = 4;</code>
       */
      public boolean hasProvider() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string provider = 4;</code>
       */
      public java.lang.String getProvider() {
        java.lang.Object ref = provider_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          provider_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string provider = 4;</code>
       */
      public com.google.protobuf.ByteString
          getProviderBytes() {
        java.lang.Object ref = provider_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          provider_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string provider = 4;</code>
       */
      public Builder setProvider(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        provider_ = value;
        
        return this;
      }
      /**
       * <code>optional string provider = 4;</code>
       */
      public Builder clearProvider() {
        bitField0_ = (bitField0_ & ~0x00000008);
        provider_ = getDefaultInstance().getProvider();
        
        return this;
      }
      /**
       * <code>optional string provider = 4;</code>
       */
      public Builder setProviderBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        provider_ = value;
        
        return this;
      }

      // optional float accuracy = 5;
      private float accuracy_ ;
      /**
       * <code>optional float accuracy = 5;</code>
       */
      public boolean hasAccuracy() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float accuracy = 5;</code>
       */
      public float getAccuracy() {
        return accuracy_;
      }
      /**
       * <code>optional float accuracy = 5;</code>
       */
      public Builder setAccuracy(float value) {
        bitField0_ |= 0x00000010;
        accuracy_ = value;
        
        return this;
      }
      /**
       * <code>optional float accuracy = 5;</code>
       */
      public Builder clearAccuracy() {
        bitField0_ = (bitField0_ & ~0x00000010);
        accuracy_ = 0F;
        
        return this;
      }

      // optional double altitude = 6;
      private double altitude_ ;
      /**
       * <code>optional double altitude = 6;</code>
       */
      public boolean hasAltitude() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional double altitude = 6;</code>
       */
      public double getAltitude() {
        return altitude_;
      }
      /**
       * <code>optional double altitude = 6;</code>
       */
      public Builder setAltitude(double value) {
        bitField0_ |= 0x00000020;
        altitude_ = value;
        
        return this;
      }
      /**
       * <code>optional double altitude = 6;</code>
       */
      public Builder clearAltitude() {
        bitField0_ = (bitField0_ & ~0x00000020);
        altitude_ = 0D;
        
        return this;
      }

      // optional float bearing = 7;
      private float bearing_ ;
      /**
       * <code>optional float bearing = 7;</code>
       */
      public boolean hasBearing() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float bearing = 7;</code>
       */
      public float getBearing() {
        return bearing_;
      }
      /**
       * <code>optional float bearing = 7;</code>
       */
      public Builder setBearing(float value) {
        bitField0_ |= 0x00000040;
        bearing_ = value;
        
        return this;
      }
      /**
       * <code>optional float bearing = 7;</code>
       */
      public Builder clearBearing() {
        bitField0_ = (bitField0_ & ~0x00000040);
        bearing_ = 0F;
        
        return this;
      }

      // optional float speed = 8;
      private float speed_ ;
      /**
       * <code>optional float speed = 8;</code>
       */
      public boolean hasSpeed() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float speed = 8;</code>
       */
      public float getSpeed() {
        return speed_;
      }
      /**
       * <code>optional float speed = 8;</code>
       */
      public Builder setSpeed(float value) {
        bitField0_ |= 0x00000080;
        speed_ = value;
        
        return this;
      }
      /**
       * <code>optional float speed = 8;</code>
       */
      public Builder clearSpeed() {
        bitField0_ = (bitField0_ & ~0x00000080);
        speed_ = 0F;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.LocationUpdate)
    }

    static {
      defaultInstance = new LocationUpdate(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.LocationUpdate)
  }

  public interface LocationRequestOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .svmp.LocationRequest.LocationRequestType type = 1;
    /**
     * <code>required .svmp.LocationRequest.LocationRequestType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .svmp.LocationRequest.LocationRequestType type = 1;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType getType();

    // optional .svmp.LocationProviderInfo providerInfo = 2;
    /**
     * <code>optional .svmp.LocationProviderInfo providerInfo = 2;</code>
     */
    boolean hasProviderInfo();
    /**
     * <code>optional .svmp.LocationProviderInfo providerInfo = 2;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo getProviderInfo();

    // optional .svmp.LocationProviderStatus providerStatus = 3;
    /**
     * <code>optional .svmp.LocationProviderStatus providerStatus = 3;</code>
     */
    boolean hasProviderStatus();
    /**
     * <code>optional .svmp.LocationProviderStatus providerStatus = 3;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus getProviderStatus();

    // optional .svmp.LocationProviderEnabled providerEnabled = 4;
    /**
     * <code>optional .svmp.LocationProviderEnabled providerEnabled = 4;</code>
     */
    boolean hasProviderEnabled();
    /**
     * <code>optional .svmp.LocationProviderEnabled providerEnabled = 4;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled getProviderEnabled();

    // optional .svmp.LocationUpdate update = 5;
    /**
     * <code>optional .svmp.LocationUpdate update = 5;</code>
     */
    boolean hasUpdate();
    /**
     * <code>optional .svmp.LocationUpdate update = 5;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate getUpdate();
  }
  /**
   * Protobuf type {@code svmp.LocationRequest}
   *
   * <pre>
   * C-&gt;S: Wrapper for LocationProviderInfo, LocationProviderStatus,
   * LocationProviderEnabled, and LocationProviderUpdate messages
   * </pre>
   */
  public static final class LocationRequest extends
      com.google.protobuf.GeneratedMessageLite
      implements LocationRequestOrBuilder {
    // Use LocationRequest.newBuilder() to construct.
    private LocationRequest(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private LocationRequest(boolean noInit) {}

    private static final LocationRequest defaultInstance;
    public static LocationRequest getDefaultInstance() {
      return defaultInstance;
    }

    public LocationRequest getDefaultInstanceForType() {
      return defaultInstance;
    }

    private LocationRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType value = org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = providerInfo_.toBuilder();
              }
              providerInfo_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(providerInfo_);
                providerInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = providerStatus_.toBuilder();
              }
              providerStatus_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(providerStatus_);
                providerStatus_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = providerEnabled_.toBuilder();
              }
              providerEnabled_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(providerEnabled_);
                providerEnabled_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = update_.toBuilder();
              }
              update_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(update_);
                update_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<LocationRequest> PARSER =
        new com.google.protobuf.AbstractParser<LocationRequest>() {
      public LocationRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LocationRequest(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LocationRequest> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code svmp.LocationRequest.LocationRequestType}
     */
    public enum LocationRequestType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>PROVIDERINFO = 1;</code>
       */
      PROVIDERINFO(0, 1),
      /**
       * <code>PROVIDERSTATUS = 2;</code>
       */
      PROVIDERSTATUS(1, 2),
      /**
       * <code>PROVIDERENABLED = 3;</code>
       */
      PROVIDERENABLED(2, 3),
      /**
       * <code>LOCATIONUPDATE = 4;</code>
       */
      LOCATIONUPDATE(3, 4),
      ;

      /**
       * <code>PROVIDERINFO = 1;</code>
       */
      public static final int PROVIDERINFO_VALUE = 1;
      /**
       * <code>PROVIDERSTATUS = 2;</code>
       */
      public static final int PROVIDERSTATUS_VALUE = 2;
      /**
       * <code>PROVIDERENABLED = 3;</code>
       */
      public static final int PROVIDERENABLED_VALUE = 3;
      /**
       * <code>LOCATIONUPDATE = 4;</code>
       */
      public static final int LOCATIONUPDATE_VALUE = 4;


      public final int getNumber() { return value; }

      public static LocationRequestType valueOf(int value) {
        switch (value) {
          case 1: return PROVIDERINFO;
          case 2: return PROVIDERSTATUS;
          case 3: return PROVIDERENABLED;
          case 4: return LOCATIONUPDATE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LocationRequestType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<LocationRequestType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LocationRequestType>() {
              public LocationRequestType findValueByNumber(int number) {
                return LocationRequestType.valueOf(number);
              }
            };

      private final int value;

      private LocationRequestType(int index, int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:svmp.LocationRequest.LocationRequestType)
    }

    private int bitField0_;
    // required .svmp.LocationRequest.LocationRequestType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType type_;
    /**
     * <code>required .svmp.LocationRequest.LocationRequestType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .svmp.LocationRequest.LocationRequestType type = 1;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType getType() {
      return type_;
    }

    // optional .svmp.LocationProviderInfo providerInfo = 2;
    public static final int PROVIDERINFO_FIELD_NUMBER = 2;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo providerInfo_;
    /**
     * <code>optional .svmp.LocationProviderInfo providerInfo = 2;</code>
     */
    public boolean hasProviderInfo() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .svmp.LocationProviderInfo providerInfo = 2;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo getProviderInfo() {
      return providerInfo_;
    }

    // optional .svmp.LocationProviderStatus providerStatus = 3;
    public static final int PROVIDERSTATUS_FIELD_NUMBER = 3;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus providerStatus_;
    /**
     * <code>optional .svmp.LocationProviderStatus providerStatus = 3;</code>
     */
    public boolean hasProviderStatus() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .svmp.LocationProviderStatus providerStatus = 3;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus getProviderStatus() {
      return providerStatus_;
    }

    // optional .svmp.LocationProviderEnabled providerEnabled = 4;
    public static final int PROVIDERENABLED_FIELD_NUMBER = 4;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled providerEnabled_;
    /**
     * <code>optional .svmp.LocationProviderEnabled providerEnabled = 4;</code>
     */
    public boolean hasProviderEnabled() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .svmp.LocationProviderEnabled providerEnabled = 4;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled getProviderEnabled() {
      return providerEnabled_;
    }

    // optional .svmp.LocationUpdate update = 5;
    public static final int UPDATE_FIELD_NUMBER = 5;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate update_;
    /**
     * <code>optional .svmp.LocationUpdate update = 5;</code>
     */
    public boolean hasUpdate() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .svmp.LocationUpdate update = 5;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate getUpdate() {
      return update_;
    }

    private void initFields() {
      type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType.PROVIDERINFO;
      providerInfo_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.getDefaultInstance();
      providerStatus_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.getDefaultInstance();
      providerEnabled_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.getDefaultInstance();
      update_ = org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasProviderInfo()) {
        if (!getProviderInfo().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasProviderStatus()) {
        if (!getProviderStatus().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasProviderEnabled()) {
        if (!getProviderEnabled().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasUpdate()) {
        if (!getUpdate().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, providerInfo_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, providerStatus_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, providerEnabled_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, update_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, providerInfo_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, providerStatus_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, providerEnabled_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, update_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.LocationRequest}
     *
     * <pre>
     * C-&gt;S: Wrapper for LocationProviderInfo, LocationProviderStatus,
     * LocationProviderEnabled, and LocationProviderUpdate messages
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationRequest, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.LocationRequestOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType.PROVIDERINFO;
        bitField0_ = (bitField0_ & ~0x00000001);
        providerInfo_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        providerStatus_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        providerEnabled_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000008);
        update_ = org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationRequest getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationRequest build() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationRequest buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationRequest result = new org.mitre.svmp.protocol.SVMPProtocol.LocationRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.providerInfo_ = providerInfo_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.providerStatus_ = providerStatus_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.providerEnabled_ = providerEnabled_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.update_ = update_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationRequest other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasProviderInfo()) {
          mergeProviderInfo(other.getProviderInfo());
        }
        if (other.hasProviderStatus()) {
          mergeProviderStatus(other.getProviderStatus());
        }
        if (other.hasProviderEnabled()) {
          mergeProviderEnabled(other.getProviderEnabled());
        }
        if (other.hasUpdate()) {
          mergeUpdate(other.getUpdate());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        if (hasProviderInfo()) {
          if (!getProviderInfo().isInitialized()) {
            
            return false;
          }
        }
        if (hasProviderStatus()) {
          if (!getProviderStatus().isInitialized()) {
            
            return false;
          }
        }
        if (hasProviderEnabled()) {
          if (!getProviderEnabled().isInitialized()) {
            
            return false;
          }
        }
        if (hasUpdate()) {
          if (!getUpdate().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.LocationRequest) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .svmp.LocationRequest.LocationRequestType type = 1;
      private org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType.PROVIDERINFO;
      /**
       * <code>required .svmp.LocationRequest.LocationRequestType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .svmp.LocationRequest.LocationRequestType type = 1;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType getType() {
        return type_;
      }
      /**
       * <code>required .svmp.LocationRequest.LocationRequestType type = 1;</code>
       */
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      /**
       * <code>required .svmp.LocationRequest.LocationRequestType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType.PROVIDERINFO;
        
        return this;
      }

      // optional .svmp.LocationProviderInfo providerInfo = 2;
      private org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo providerInfo_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.getDefaultInstance();
      /**
       * <code>optional .svmp.LocationProviderInfo providerInfo = 2;</code>
       */
      public boolean hasProviderInfo() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .svmp.LocationProviderInfo providerInfo = 2;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo getProviderInfo() {
        return providerInfo_;
      }
      /**
       * <code>optional .svmp.LocationProviderInfo providerInfo = 2;</code>
       */
      public Builder setProviderInfo(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        providerInfo_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .svmp.LocationProviderInfo providerInfo = 2;</code>
       */
      public Builder setProviderInfo(
          org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.Builder builderForValue) {
        providerInfo_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .svmp.LocationProviderInfo providerInfo = 2;</code>
       */
      public Builder mergeProviderInfo(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            providerInfo_ != org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.getDefaultInstance()) {
          providerInfo_ =
            org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.newBuilder(providerInfo_).mergeFrom(value).buildPartial();
        } else {
          providerInfo_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .svmp.LocationProviderInfo providerInfo = 2;</code>
       */
      public Builder clearProviderInfo() {
        providerInfo_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // optional .svmp.LocationProviderStatus providerStatus = 3;
      private org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus providerStatus_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.getDefaultInstance();
      /**
       * <code>optional .svmp.LocationProviderStatus providerStatus = 3;</code>
       */
      public boolean hasProviderStatus() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .svmp.LocationProviderStatus providerStatus = 3;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus getProviderStatus() {
        return providerStatus_;
      }
      /**
       * <code>optional .svmp.LocationProviderStatus providerStatus = 3;</code>
       */
      public Builder setProviderStatus(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        providerStatus_ = value;

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .svmp.LocationProviderStatus providerStatus = 3;</code>
       */
      public Builder setProviderStatus(
          org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Builder builderForValue) {
        providerStatus_ = builderForValue.build();

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .svmp.LocationProviderStatus providerStatus = 3;</code>
       */
      public Builder mergeProviderStatus(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            providerStatus_ != org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.getDefaultInstance()) {
          providerStatus_ =
            org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.newBuilder(providerStatus_).mergeFrom(value).buildPartial();
        } else {
          providerStatus_ = value;
        }

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .svmp.LocationProviderStatus providerStatus = 3;</code>
       */
      public Builder clearProviderStatus() {
        providerStatus_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // optional .svmp.LocationProviderEnabled providerEnabled = 4;
      private org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled providerEnabled_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.getDefaultInstance();
      /**
       * <code>optional .svmp.LocationProviderEnabled providerEnabled = 4;</code>
       */
      public boolean hasProviderEnabled() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .svmp.LocationProviderEnabled providerEnabled = 4;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled getProviderEnabled() {
        return providerEnabled_;
      }
      /**
       * <code>optional .svmp.LocationProviderEnabled providerEnabled = 4;</code>
       */
      public Builder setProviderEnabled(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled value) {
        if (value == null) {
          throw new NullPointerException();
        }
        providerEnabled_ = value;

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .svmp.LocationProviderEnabled providerEnabled = 4;</code>
       */
      public Builder setProviderEnabled(
          org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.Builder builderForValue) {
        providerEnabled_ = builderForValue.build();

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .svmp.LocationProviderEnabled providerEnabled = 4;</code>
       */
      public Builder mergeProviderEnabled(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled value) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            providerEnabled_ != org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.getDefaultInstance()) {
          providerEnabled_ =
            org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.newBuilder(providerEnabled_).mergeFrom(value).buildPartial();
        } else {
          providerEnabled_ = value;
        }

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .svmp.LocationProviderEnabled providerEnabled = 4;</code>
       */
      public Builder clearProviderEnabled() {
        providerEnabled_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // optional .svmp.LocationUpdate update = 5;
      private org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate update_ = org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance();
      /**
       * <code>optional .svmp.LocationUpdate update = 5;</code>
       */
      public boolean hasUpdate() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .svmp.LocationUpdate update = 5;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate getUpdate() {
        return update_;
      }
      /**
       * <code>optional .svmp.LocationUpdate update = 5;</code>
       */
      public Builder setUpdate(org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate value) {
        if (value == null) {
          throw new NullPointerException();
        }
        update_ = value;

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .svmp.LocationUpdate update = 5;</code>
       */
      public Builder setUpdate(
          org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.Builder builderForValue) {
        update_ = builderForValue.build();

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .svmp.LocationUpdate update = 5;</code>
       */
      public Builder mergeUpdate(org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate value) {
        if (((bitField0_ & 0x00000010) == 0x00000010) &&
            update_ != org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance()) {
          update_ =
            org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.newBuilder(update_).mergeFrom(value).buildPartial();
        } else {
          update_ = value;
        }

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .svmp.LocationUpdate update = 5;</code>
       */
      public Builder clearUpdate() {
        update_ = org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.LocationRequest)
    }

    static {
      defaultInstance = new LocationRequest(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.LocationRequest)
  }

  public interface LocationSubscribeOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .svmp.LocationSubscribe.LocationSubscribeType type = 1;
    /**
     * <code>required .svmp.LocationSubscribe.LocationSubscribeType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .svmp.LocationSubscribe.LocationSubscribeType type = 1;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType getType();

    // required string provider = 2;
    /**
     * <code>required string provider = 2;</code>
     */
    boolean hasProvider();
    /**
     * <code>required string provider = 2;</code>
     */
    java.lang.String getProvider();
    /**
     * <code>required string provider = 2;</code>
     */
    com.google.protobuf.ByteString
        getProviderBytes();

    // optional int64 minTime = 3;
    /**
     * <code>optional int64 minTime = 3;</code>
     */
    boolean hasMinTime();
    /**
     * <code>optional int64 minTime = 3;</code>
     */
    long getMinTime();

    // optional float minDistance = 4;
    /**
     * <code>optional float minDistance = 4;</code>
     */
    boolean hasMinDistance();
    /**
     * <code>optional float minDistance = 4;</code>
     */
    float getMinDistance();
  }
  /**
   * Protobuf type {@code svmp.LocationSubscribe}
   *
   * <pre>
   * S-&gt;C: Location update request (one-time or long-term)
   * </pre>
   */
  public static final class LocationSubscribe extends
      com.google.protobuf.GeneratedMessageLite
      implements LocationSubscribeOrBuilder {
    // Use LocationSubscribe.newBuilder() to construct.
    private LocationSubscribe(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private LocationSubscribe(boolean noInit) {}

    private static final LocationSubscribe defaultInstance;
    public static LocationSubscribe getDefaultInstance() {
      return defaultInstance;
    }

    public LocationSubscribe getDefaultInstanceForType() {
      return defaultInstance;
    }

    private LocationSubscribe(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType value = org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              provider_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              minTime_ = input.readInt64();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              minDistance_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<LocationSubscribe> PARSER =
        new com.google.protobuf.AbstractParser<LocationSubscribe>() {
      public LocationSubscribe parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LocationSubscribe(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LocationSubscribe> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code svmp.LocationSubscribe.LocationSubscribeType}
     */
    public enum LocationSubscribeType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>SINGLE_UPDATE = 1;</code>
       */
      SINGLE_UPDATE(0, 1),
      /**
       * <code>MULTIPLE_UPDATES = 2;</code>
       */
      MULTIPLE_UPDATES(1, 2),
      ;

      /**
       * <code>SINGLE_UPDATE = 1;</code>
       */
      public static final int SINGLE_UPDATE_VALUE = 1;
      /**
       * <code>MULTIPLE_UPDATES = 2;</code>
       */
      public static final int MULTIPLE_UPDATES_VALUE = 2;


      public final int getNumber() { return value; }

      public static LocationSubscribeType valueOf(int value) {
        switch (value) {
          case 1: return SINGLE_UPDATE;
          case 2: return MULTIPLE_UPDATES;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LocationSubscribeType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<LocationSubscribeType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LocationSubscribeType>() {
              public LocationSubscribeType findValueByNumber(int number) {
                return LocationSubscribeType.valueOf(number);
              }
            };

      private final int value;

      private LocationSubscribeType(int index, int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:svmp.LocationSubscribe.LocationSubscribeType)
    }

    private int bitField0_;
    // required .svmp.LocationSubscribe.LocationSubscribeType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType type_;
    /**
     * <code>required .svmp.LocationSubscribe.LocationSubscribeType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .svmp.LocationSubscribe.LocationSubscribeType type = 1;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType getType() {
      return type_;
    }

    // required string provider = 2;
    public static final int PROVIDER_FIELD_NUMBER = 2;
    private java.lang.Object provider_;
    /**
     * <code>required string provider = 2;</code>
     */
    public boolean hasProvider() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string provider = 2;</code>
     */
    public java.lang.String getProvider() {
      java.lang.Object ref = provider_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          provider_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string provider = 2;</code>
     */
    public com.google.protobuf.ByteString
        getProviderBytes() {
      java.lang.Object ref = provider_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        provider_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int64 minTime = 3;
    public static final int MINTIME_FIELD_NUMBER = 3;
    private long minTime_;
    /**
     * <code>optional int64 minTime = 3;</code>
     */
    public boolean hasMinTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int64 minTime = 3;</code>
     */
    public long getMinTime() {
      return minTime_;
    }

    // optional float minDistance = 4;
    public static final int MINDISTANCE_FIELD_NUMBER = 4;
    private float minDistance_;
    /**
     * <code>optional float minDistance = 4;</code>
     */
    public boolean hasMinDistance() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float minDistance = 4;</code>
     */
    public float getMinDistance() {
      return minDistance_;
    }

    private void initFields() {
      type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType.SINGLE_UPDATE;
      provider_ = "";
      minTime_ = 0L;
      minDistance_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasProvider()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getProviderBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, minTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, minDistance_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getProviderBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, minTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, minDistance_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.LocationSubscribe}
     *
     * <pre>
     * S-&gt;C: Location update request (one-time or long-term)
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribeOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType.SINGLE_UPDATE;
        bitField0_ = (bitField0_ & ~0x00000001);
        provider_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        minTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        minDistance_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe build() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe result = new org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.provider_ = provider_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.minTime_ = minTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.minDistance_ = minDistance_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasProvider()) {
          bitField0_ |= 0x00000002;
          provider_ = other.provider_;
          
        }
        if (other.hasMinTime()) {
          setMinTime(other.getMinTime());
        }
        if (other.hasMinDistance()) {
          setMinDistance(other.getMinDistance());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        if (!hasProvider()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .svmp.LocationSubscribe.LocationSubscribeType type = 1;
      private org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType.SINGLE_UPDATE;
      /**
       * <code>required .svmp.LocationSubscribe.LocationSubscribeType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .svmp.LocationSubscribe.LocationSubscribeType type = 1;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType getType() {
        return type_;
      }
      /**
       * <code>required .svmp.LocationSubscribe.LocationSubscribeType type = 1;</code>
       */
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      /**
       * <code>required .svmp.LocationSubscribe.LocationSubscribeType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType.SINGLE_UPDATE;
        
        return this;
      }

      // required string provider = 2;
      private java.lang.Object provider_ = "";
      /**
       * <code>required string provider = 2;</code>
       */
      public boolean hasProvider() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string provider = 2;</code>
       */
      public java.lang.String getProvider() {
        java.lang.Object ref = provider_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          provider_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string provider = 2;</code>
       */
      public com.google.protobuf.ByteString
          getProviderBytes() {
        java.lang.Object ref = provider_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          provider_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string provider = 2;</code>
       */
      public Builder setProvider(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        provider_ = value;
        
        return this;
      }
      /**
       * <code>required string provider = 2;</code>
       */
      public Builder clearProvider() {
        bitField0_ = (bitField0_ & ~0x00000002);
        provider_ = getDefaultInstance().getProvider();
        
        return this;
      }
      /**
       * <code>required string provider = 2;</code>
       */
      public Builder setProviderBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        provider_ = value;
        
        return this;
      }

      // optional int64 minTime = 3;
      private long minTime_ ;
      /**
       * <code>optional int64 minTime = 3;</code>
       */
      public boolean hasMinTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int64 minTime = 3;</code>
       */
      public long getMinTime() {
        return minTime_;
      }
      /**
       * <code>optional int64 minTime = 3;</code>
       */
      public Builder setMinTime(long value) {
        bitField0_ |= 0x00000004;
        minTime_ = value;
        
        return this;
      }
      /**
       * <code>optional int64 minTime = 3;</code>
       */
      public Builder clearMinTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        minTime_ = 0L;
        
        return this;
      }

      // optional float minDistance = 4;
      private float minDistance_ ;
      /**
       * <code>optional float minDistance = 4;</code>
       */
      public boolean hasMinDistance() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float minDistance = 4;</code>
       */
      public float getMinDistance() {
        return minDistance_;
      }
      /**
       * <code>optional float minDistance = 4;</code>
       */
      public Builder setMinDistance(float value) {
        bitField0_ |= 0x00000008;
        minDistance_ = value;
        
        return this;
      }
      /**
       * <code>optional float minDistance = 4;</code>
       */
      public Builder clearMinDistance() {
        bitField0_ = (bitField0_ & ~0x00000008);
        minDistance_ = 0F;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.LocationSubscribe)
    }

    static {
      defaultInstance = new LocationSubscribe(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.LocationSubscribe)
  }

  public interface LocationUnsubscribeOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required string provider = 1;
    /**
     * <code>required string provider = 1;</code>
     */
    boolean hasProvider();
    /**
     * <code>required string provider = 1;</code>
     */
    java.lang.String getProvider();
    /**
     * <code>required string provider = 1;</code>
     */
    com.google.protobuf.ByteString
        getProviderBytes();
  }
  /**
   * Protobuf type {@code svmp.LocationUnsubscribe}
   *
   * <pre>
   * S-&gt;C: Unsubscribe from long-term location updates
   * </pre>
   */
  public static final class LocationUnsubscribe extends
      com.google.protobuf.GeneratedMessageLite
      implements LocationUnsubscribeOrBuilder {
    // Use LocationUnsubscribe.newBuilder() to construct.
    private LocationUnsubscribe(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private LocationUnsubscribe(boolean noInit) {}

    private static final LocationUnsubscribe defaultInstance;
    public static LocationUnsubscribe getDefaultInstance() {
      return defaultInstance;
    }

    public LocationUnsubscribe getDefaultInstanceForType() {
      return defaultInstance;
    }

    private LocationUnsubscribe(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              provider_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<LocationUnsubscribe> PARSER =
        new com.google.protobuf.AbstractParser<LocationUnsubscribe>() {
      public LocationUnsubscribe parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LocationUnsubscribe(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LocationUnsubscribe> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string provider = 1;
    public static final int PROVIDER_FIELD_NUMBER = 1;
    private java.lang.Object provider_;
    /**
     * <code>required string provider = 1;</code>
     */
    public boolean hasProvider() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string provider = 1;</code>
     */
    public java.lang.String getProvider() {
      java.lang.Object ref = provider_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          provider_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string provider = 1;</code>
     */
    public com.google.protobuf.ByteString
        getProviderBytes() {
      java.lang.Object ref = provider_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        provider_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      provider_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasProvider()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getProviderBytes());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getProviderBytes());
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.LocationUnsubscribe}
     *
     * <pre>
     * S-&gt;C: Unsubscribe from long-term location updates
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribeOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        provider_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe build() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe result = new org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.provider_ = provider_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.getDefaultInstance()) return this;
        if (other.hasProvider()) {
          bitField0_ |= 0x00000001;
          provider_ = other.provider_;
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasProvider()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string provider = 1;
      private java.lang.Object provider_ = "";
      /**
       * <code>required string provider = 1;</code>
       */
      public boolean hasProvider() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public java.lang.String getProvider() {
        java.lang.Object ref = provider_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          provider_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public com.google.protobuf.ByteString
          getProviderBytes() {
        java.lang.Object ref = provider_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          provider_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public Builder setProvider(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        provider_ = value;
        
        return this;
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public Builder clearProvider() {
        bitField0_ = (bitField0_ & ~0x00000001);
        provider_ = getDefaultInstance().getProvider();
        
        return this;
      }
      /**
       * <code>required string provider = 1;</code>
       */
      public Builder setProviderBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        provider_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.LocationUnsubscribe)
    }

    static {
      defaultInstance = new LocationUnsubscribe(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.LocationUnsubscribe)
  }

  public interface LocationResponseOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .svmp.LocationResponse.LocationResponseType type = 1;
    /**
     * <code>required .svmp.LocationResponse.LocationResponseType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .svmp.LocationResponse.LocationResponseType type = 1;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType getType();

    // optional .svmp.LocationSubscribe subscribe = 2;
    /**
     * <code>optional .svmp.LocationSubscribe subscribe = 2;</code>
     */
    boolean hasSubscribe();
    /**
     * <code>optional .svmp.LocationSubscribe subscribe = 2;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe getSubscribe();

    // optional .svmp.LocationUnsubscribe unsubscribe = 3;
    /**
     * <code>optional .svmp.LocationUnsubscribe unsubscribe = 3;</code>
     */
    boolean hasUnsubscribe();
    /**
     * <code>optional .svmp.LocationUnsubscribe unsubscribe = 3;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe getUnsubscribe();
  }
  /**
   * Protobuf type {@code svmp.LocationResponse}
   *
   * <pre>
   * S-&gt;C: Wrapper for LocationSubscribe and LocationUnsubscribe messages
   * </pre>
   */
  public static final class LocationResponse extends
      com.google.protobuf.GeneratedMessageLite
      implements LocationResponseOrBuilder {
    // Use LocationResponse.newBuilder() to construct.
    private LocationResponse(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private LocationResponse(boolean noInit) {}

    private static final LocationResponse defaultInstance;
    public static LocationResponse getDefaultInstance() {
      return defaultInstance;
    }

    public LocationResponse getDefaultInstanceForType() {
      return defaultInstance;
    }

    private LocationResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType value = org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = subscribe_.toBuilder();
              }
              subscribe_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(subscribe_);
                subscribe_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = unsubscribe_.toBuilder();
              }
              unsubscribe_ = input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(unsubscribe_);
                unsubscribe_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<LocationResponse> PARSER =
        new com.google.protobuf.AbstractParser<LocationResponse>() {
      public LocationResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LocationResponse(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LocationResponse> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code svmp.LocationResponse.LocationResponseType}
     */
    public enum LocationResponseType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>SUBSCRIBE = 1;</code>
       */
      SUBSCRIBE(0, 1),
      /**
       * <code>UNSUBSCRIBE = 2;</code>
       */
      UNSUBSCRIBE(1, 2),
      ;

      /**
       * <code>SUBSCRIBE = 1;</code>
       */
      public static final int SUBSCRIBE_VALUE = 1;
      /**
       * <code>UNSUBSCRIBE = 2;</code>
       */
      public static final int UNSUBSCRIBE_VALUE = 2;


      public final int getNumber() { return value; }

      public static LocationResponseType valueOf(int value) {
        switch (value) {
          case 1: return SUBSCRIBE;
          case 2: return UNSUBSCRIBE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LocationResponseType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<LocationResponseType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LocationResponseType>() {
              public LocationResponseType findValueByNumber(int number) {
                return LocationResponseType.valueOf(number);
              }
            };

      private final int value;

      private LocationResponseType(int index, int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:svmp.LocationResponse.LocationResponseType)
    }

    private int bitField0_;
    // required .svmp.LocationResponse.LocationResponseType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType type_;
    /**
     * <code>required .svmp.LocationResponse.LocationResponseType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .svmp.LocationResponse.LocationResponseType type = 1;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType getType() {
      return type_;
    }

    // optional .svmp.LocationSubscribe subscribe = 2;
    public static final int SUBSCRIBE_FIELD_NUMBER = 2;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe subscribe_;
    /**
     * <code>optional .svmp.LocationSubscribe subscribe = 2;</code>
     */
    public boolean hasSubscribe() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .svmp.LocationSubscribe subscribe = 2;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe getSubscribe() {
      return subscribe_;
    }

    // optional .svmp.LocationUnsubscribe unsubscribe = 3;
    public static final int UNSUBSCRIBE_FIELD_NUMBER = 3;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe unsubscribe_;
    /**
     * <code>optional .svmp.LocationUnsubscribe unsubscribe = 3;</code>
     */
    public boolean hasUnsubscribe() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .svmp.LocationUnsubscribe unsubscribe = 3;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe getUnsubscribe() {
      return unsubscribe_;
    }

    private void initFields() {
      type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType.SUBSCRIBE;
      subscribe_ = org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.getDefaultInstance();
      unsubscribe_ = org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasSubscribe()) {
        if (!getSubscribe().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasUnsubscribe()) {
        if (!getUnsubscribe().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, subscribe_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, unsubscribe_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, subscribe_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, unsubscribe_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.LocationResponse}
     *
     * <pre>
     * S-&gt;C: Wrapper for LocationSubscribe and LocationUnsubscribe messages
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationResponse, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.LocationResponseOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType.SUBSCRIBE;
        bitField0_ = (bitField0_ & ~0x00000001);
        subscribe_ = org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        unsubscribe_ = org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationResponse getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationResponse build() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.LocationResponse buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationResponse result = new org.mitre.svmp.protocol.SVMPProtocol.LocationResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.subscribe_ = subscribe_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.unsubscribe_ = unsubscribe_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationResponse other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasSubscribe()) {
          mergeSubscribe(other.getSubscribe());
        }
        if (other.hasUnsubscribe()) {
          mergeUnsubscribe(other.getUnsubscribe());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        if (hasSubscribe()) {
          if (!getSubscribe().isInitialized()) {
            
            return false;
          }
        }
        if (hasUnsubscribe()) {
          if (!getUnsubscribe().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.LocationResponse) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .svmp.LocationResponse.LocationResponseType type = 1;
      private org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType.SUBSCRIBE;
      /**
       * <code>required .svmp.LocationResponse.LocationResponseType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .svmp.LocationResponse.LocationResponseType type = 1;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType getType() {
        return type_;
      }
      /**
       * <code>required .svmp.LocationResponse.LocationResponseType type = 1;</code>
       */
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      /**
       * <code>required .svmp.LocationResponse.LocationResponseType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType.SUBSCRIBE;
        
        return this;
      }

      // optional .svmp.LocationSubscribe subscribe = 2;
      private org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe subscribe_ = org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.getDefaultInstance();
      /**
       * <code>optional .svmp.LocationSubscribe subscribe = 2;</code>
       */
      public boolean hasSubscribe() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .svmp.LocationSubscribe subscribe = 2;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe getSubscribe() {
        return subscribe_;
      }
      /**
       * <code>optional .svmp.LocationSubscribe subscribe = 2;</code>
       */
      public Builder setSubscribe(org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe value) {
        if (value == null) {
          throw new NullPointerException();
        }
        subscribe_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .svmp.LocationSubscribe subscribe = 2;</code>
       */
      public Builder setSubscribe(
          org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.Builder builderForValue) {
        subscribe_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .svmp.LocationSubscribe subscribe = 2;</code>
       */
      public Builder mergeSubscribe(org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            subscribe_ != org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.getDefaultInstance()) {
          subscribe_ =
            org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.newBuilder(subscribe_).mergeFrom(value).buildPartial();
        } else {
          subscribe_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .svmp.LocationSubscribe subscribe = 2;</code>
       */
      public Builder clearSubscribe() {
        subscribe_ = org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // optional .svmp.LocationUnsubscribe unsubscribe = 3;
      private org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe unsubscribe_ = org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.getDefaultInstance();
      /**
       * <code>optional .svmp.LocationUnsubscribe unsubscribe = 3;</code>
       */
      public boolean hasUnsubscribe() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .svmp.LocationUnsubscribe unsubscribe = 3;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe getUnsubscribe() {
        return unsubscribe_;
      }
      /**
       * <code>optional .svmp.LocationUnsubscribe unsubscribe = 3;</code>
       */
      public Builder setUnsubscribe(org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe value) {
        if (value == null) {
          throw new NullPointerException();
        }
        unsubscribe_ = value;

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .svmp.LocationUnsubscribe unsubscribe = 3;</code>
       */
      public Builder setUnsubscribe(
          org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.Builder builderForValue) {
        unsubscribe_ = builderForValue.build();

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .svmp.LocationUnsubscribe unsubscribe = 3;</code>
       */
      public Builder mergeUnsubscribe(org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            unsubscribe_ != org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.getDefaultInstance()) {
          unsubscribe_ =
            org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.newBuilder(unsubscribe_).mergeFrom(value).buildPartial();
        } else {
          unsubscribe_ = value;
        }

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .svmp.LocationUnsubscribe unsubscribe = 3;</code>
       */
      public Builder clearUnsubscribe() {
        unsubscribe_ = org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.LocationResponse)
    }

    static {
      defaultInstance = new LocationResponse(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.LocationResponse)
  }

  public interface AuthResponseOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .svmp.AuthResponse.AuthResponseType type = 1;
    /**
     * <code>required .svmp.AuthResponse.AuthResponseType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .svmp.AuthResponse.AuthResponseType type = 1;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.AuthResponseType getType();
  }
  /**
   * Protobuf type {@code svmp.AuthResponse}
   *
   * <pre>
   * S-&gt;C
   * </pre>
   */
  public static final class AuthResponse extends
      com.google.protobuf.GeneratedMessageLite
      implements AuthResponseOrBuilder {
    // Use AuthResponse.newBuilder() to construct.
    private AuthResponse(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private AuthResponse(boolean noInit) {}

    private static final AuthResponse defaultInstance;
    public static AuthResponse getDefaultInstance() {
      return defaultInstance;
    }

    public AuthResponse getDefaultInstanceForType() {
      return defaultInstance;
    }

    private AuthResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.AuthResponseType value = org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.AuthResponseType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<AuthResponse> PARSER =
        new com.google.protobuf.AbstractParser<AuthResponse>() {
      public AuthResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AuthResponse(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AuthResponse> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code svmp.AuthResponse.AuthResponseType}
     */
    public enum AuthResponseType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>AUTH_FAIL = 0;</code>
       *
       * <pre>
       * sent in response to an AuthRequest
       * </pre>
       */
      AUTH_FAIL(0, 0),
      /**
       * <code>SESSION_MAX_TIMEOUT = 1;</code>
       *
       * <pre>
       * sent when the session times out
       * </pre>
       */
      SESSION_MAX_TIMEOUT(1, 1),
      ;

      /**
       * <code>AUTH_FAIL = 0;</code>
       *
       * <pre>
       * sent in response to an AuthRequest
       * </pre>
       */
      public static final int AUTH_FAIL_VALUE = 0;
      /**
       * <code>SESSION_MAX_TIMEOUT = 1;</code>
       *
       * <pre>
       * sent when the session times out
       * </pre>
       */
      public static final int SESSION_MAX_TIMEOUT_VALUE = 1;


      public final int getNumber() { return value; }

      public static AuthResponseType valueOf(int value) {
        switch (value) {
          case 0: return AUTH_FAIL;
          case 1: return SESSION_MAX_TIMEOUT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<AuthResponseType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<AuthResponseType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<AuthResponseType>() {
              public AuthResponseType findValueByNumber(int number) {
                return AuthResponseType.valueOf(number);
              }
            };

      private final int value;

      private AuthResponseType(int index, int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:svmp.AuthResponse.AuthResponseType)
    }

    private int bitField0_;
    // required .svmp.AuthResponse.AuthResponseType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.AuthResponseType type_;
    /**
     * <code>required .svmp.AuthResponse.AuthResponseType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .svmp.AuthResponse.AuthResponseType type = 1;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.AuthResponseType getType() {
      return type_;
    }

    private void initFields() {
      type_ = org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.AuthResponseType.AUTH_FAIL;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.AuthResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AuthResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AuthResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AuthResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AuthResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AuthResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AuthResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AuthResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AuthResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AuthResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.AuthResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.AuthResponse}
     *
     * <pre>
     * S-&gt;C
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.AuthResponse, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.AuthResponseOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.AuthResponseType.AUTH_FAIL;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.AuthResponse getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.AuthResponse build() {
        org.mitre.svmp.protocol.SVMPProtocol.AuthResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.AuthResponse buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.AuthResponse result = new org.mitre.svmp.protocol.SVMPProtocol.AuthResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.AuthResponse other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.AuthResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.AuthResponse) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .svmp.AuthResponse.AuthResponseType type = 1;
      private org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.AuthResponseType type_ = org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.AuthResponseType.AUTH_FAIL;
      /**
       * <code>required .svmp.AuthResponse.AuthResponseType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .svmp.AuthResponse.AuthResponseType type = 1;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.AuthResponseType getType() {
        return type_;
      }
      /**
       * <code>required .svmp.AuthResponse.AuthResponseType type = 1;</code>
       */
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.AuthResponseType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      /**
       * <code>required .svmp.AuthResponse.AuthResponseType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mitre.svmp.protocol.SVMPProtocol.AuthResponse.AuthResponseType.AUTH_FAIL;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.AuthResponse)
    }

    static {
      defaultInstance = new AuthResponse(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.AuthResponse)
  }

  public interface WebRTCMessageOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional .svmp.WebRTCMessage.WebRTCType type = 1;
    /**
     * <code>optional .svmp.WebRTCMessage.WebRTCType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>optional .svmp.WebRTCMessage.WebRTCType type = 1;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.WebRTCType getType();

    // optional string json = 2;
    /**
     * <code>optional string json = 2;</code>
     */
    boolean hasJson();
    /**
     * <code>optional string json = 2;</code>
     */
    java.lang.String getJson();
    /**
     * <code>optional string json = 2;</code>
     */
    com.google.protobuf.ByteString
        getJsonBytes();
  }
  /**
   * Protobuf type {@code svmp.WebRTCMessage}
   */
  public static final class WebRTCMessage extends
      com.google.protobuf.GeneratedMessageLite
      implements WebRTCMessageOrBuilder {
    // Use WebRTCMessage.newBuilder() to construct.
    private WebRTCMessage(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private WebRTCMessage(boolean noInit) {}

    private static final WebRTCMessage defaultInstance;
    public static WebRTCMessage getDefaultInstance() {
      return defaultInstance;
    }

    public WebRTCMessage getDefaultInstanceForType() {
      return defaultInstance;
    }

    private WebRTCMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.WebRTCType value = org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.WebRTCType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              json_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<WebRTCMessage> PARSER =
        new com.google.protobuf.AbstractParser<WebRTCMessage>() {
      public WebRTCMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WebRTCMessage(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<WebRTCMessage> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code svmp.WebRTCMessage.WebRTCType}
     */
    public enum WebRTCType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>OFFER = 1;</code>
       */
      OFFER(0, 1),
      /**
       * <code>ANSWER = 2;</code>
       */
      ANSWER(1, 2),
      /**
       * <code>CANDIDATE = 3;</code>
       */
      CANDIDATE(2, 3),
      /**
       * <code>BYE = 4;</code>
       */
      BYE(3, 4),
      ;

      /**
       * <code>OFFER = 1;</code>
       */
      public static final int OFFER_VALUE = 1;
      /**
       * <code>ANSWER = 2;</code>
       */
      public static final int ANSWER_VALUE = 2;
      /**
       * <code>CANDIDATE = 3;</code>
       */
      public static final int CANDIDATE_VALUE = 3;
      /**
       * <code>BYE = 4;</code>
       */
      public static final int BYE_VALUE = 4;


      public final int getNumber() { return value; }

      public static WebRTCType valueOf(int value) {
        switch (value) {
          case 1: return OFFER;
          case 2: return ANSWER;
          case 3: return CANDIDATE;
          case 4: return BYE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<WebRTCType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<WebRTCType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<WebRTCType>() {
              public WebRTCType findValueByNumber(int number) {
                return WebRTCType.valueOf(number);
              }
            };

      private final int value;

      private WebRTCType(int index, int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:svmp.WebRTCMessage.WebRTCType)
    }

    private int bitField0_;
    // optional .svmp.WebRTCMessage.WebRTCType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.WebRTCType type_;
    /**
     * <code>optional .svmp.WebRTCMessage.WebRTCType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .svmp.WebRTCMessage.WebRTCType type = 1;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.WebRTCType getType() {
      return type_;
    }

    // optional string json = 2;
    public static final int JSON_FIELD_NUMBER = 2;
    private java.lang.Object json_;
    /**
     * <code>optional string json = 2;</code>
     */
    public boolean hasJson() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string json = 2;</code>
     */
    public java.lang.String getJson() {
      java.lang.Object ref = json_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          json_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string json = 2;</code>
     */
    public com.google.protobuf.ByteString
        getJsonBytes() {
      java.lang.Object ref = json_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        json_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      type_ = org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.WebRTCType.OFFER;
      json_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getJsonBytes());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getJsonBytes());
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.WebRTCMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessageOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.WebRTCType.OFFER;
        bitField0_ = (bitField0_ & ~0x00000001);
        json_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage build() {
        org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage result = new org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.json_ = json_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasJson()) {
          bitField0_ |= 0x00000002;
          json_ = other.json_;
          
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .svmp.WebRTCMessage.WebRTCType type = 1;
      private org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.WebRTCType type_ = org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.WebRTCType.OFFER;
      /**
       * <code>optional .svmp.WebRTCMessage.WebRTCType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .svmp.WebRTCMessage.WebRTCType type = 1;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.WebRTCType getType() {
        return type_;
      }
      /**
       * <code>optional .svmp.WebRTCMessage.WebRTCType type = 1;</code>
       */
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.WebRTCType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      /**
       * <code>optional .svmp.WebRTCMessage.WebRTCType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mitre.svmp.protocol.SVMPProtocol.WebRTCMessage.WebRTCType.OFFER;
        
        return this;
      }

      // optional string json = 2;
      private java.lang.Object json_ = "";
      /**
       * <code>optional string json = 2;</code>
       */
      public boolean hasJson() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string json = 2;</code>
       */
      public java.lang.String getJson() {
        java.lang.Object ref = json_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          json_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string json = 2;</code>
       */
      public com.google.protobuf.ByteString
          getJsonBytes() {
        java.lang.Object ref = json_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          json_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string json = 2;</code>
       */
      public Builder setJson(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        json_ = value;
        
        return this;
      }
      /**
       * <code>optional string json = 2;</code>
       */
      public Builder clearJson() {
        bitField0_ = (bitField0_ & ~0x00000002);
        json_ = getDefaultInstance().getJson();
        
        return this;
      }
      /**
       * <code>optional string json = 2;</code>
       */
      public Builder setJsonBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        json_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.WebRTCMessage)
    }

    static {
      defaultInstance = new WebRTCMessage(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.WebRTCMessage)
  }

  public interface VideoStreamInfoOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional string iceServers = 1;
    /**
     * <code>optional string iceServers = 1;</code>
     */
    boolean hasIceServers();
    /**
     * <code>optional string iceServers = 1;</code>
     */
    java.lang.String getIceServers();
    /**
     * <code>optional string iceServers = 1;</code>
     */
    com.google.protobuf.ByteString
        getIceServersBytes();

    // optional string pcConstraints = 2;
    /**
     * <code>optional string pcConstraints = 2;</code>
     */
    boolean hasPcConstraints();
    /**
     * <code>optional string pcConstraints = 2;</code>
     */
    java.lang.String getPcConstraints();
    /**
     * <code>optional string pcConstraints = 2;</code>
     */
    com.google.protobuf.ByteString
        getPcConstraintsBytes();

    // optional string videoConstraints = 3;
    /**
     * <code>optional string videoConstraints = 3;</code>
     */
    boolean hasVideoConstraints();
    /**
     * <code>optional string videoConstraints = 3;</code>
     */
    java.lang.String getVideoConstraints();
    /**
     * <code>optional string videoConstraints = 3;</code>
     */
    com.google.protobuf.ByteString
        getVideoConstraintsBytes();
  }
  /**
   * Protobuf type {@code svmp.VideoStreamInfo}
   *
   * <pre>
   * S-&gt;C
   * </pre>
   */
  public static final class VideoStreamInfo extends
      com.google.protobuf.GeneratedMessageLite
      implements VideoStreamInfoOrBuilder {
    // Use VideoStreamInfo.newBuilder() to construct.
    private VideoStreamInfo(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private VideoStreamInfo(boolean noInit) {}

    private static final VideoStreamInfo defaultInstance;
    public static VideoStreamInfo getDefaultInstance() {
      return defaultInstance;
    }

    public VideoStreamInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private VideoStreamInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              iceServers_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              pcConstraints_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              videoConstraints_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<VideoStreamInfo> PARSER =
        new com.google.protobuf.AbstractParser<VideoStreamInfo>() {
      public VideoStreamInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new VideoStreamInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<VideoStreamInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string iceServers = 1;
    public static final int ICESERVERS_FIELD_NUMBER = 1;
    private java.lang.Object iceServers_;
    /**
     * <code>optional string iceServers = 1;</code>
     */
    public boolean hasIceServers() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string iceServers = 1;</code>
     */
    public java.lang.String getIceServers() {
      java.lang.Object ref = iceServers_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          iceServers_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string iceServers = 1;</code>
     */
    public com.google.protobuf.ByteString
        getIceServersBytes() {
      java.lang.Object ref = iceServers_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        iceServers_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string pcConstraints = 2;
    public static final int PCCONSTRAINTS_FIELD_NUMBER = 2;
    private java.lang.Object pcConstraints_;
    /**
     * <code>optional string pcConstraints = 2;</code>
     */
    public boolean hasPcConstraints() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string pcConstraints = 2;</code>
     */
    public java.lang.String getPcConstraints() {
      java.lang.Object ref = pcConstraints_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          pcConstraints_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string pcConstraints = 2;</code>
     */
    public com.google.protobuf.ByteString
        getPcConstraintsBytes() {
      java.lang.Object ref = pcConstraints_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        pcConstraints_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string videoConstraints = 3;
    public static final int VIDEOCONSTRAINTS_FIELD_NUMBER = 3;
    private java.lang.Object videoConstraints_;
    /**
     * <code>optional string videoConstraints = 3;</code>
     */
    public boolean hasVideoConstraints() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string videoConstraints = 3;</code>
     */
    public java.lang.String getVideoConstraints() {
      java.lang.Object ref = videoConstraints_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          videoConstraints_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string videoConstraints = 3;</code>
     */
    public com.google.protobuf.ByteString
        getVideoConstraintsBytes() {
      java.lang.Object ref = videoConstraints_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        videoConstraints_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      iceServers_ = "";
      pcConstraints_ = "";
      videoConstraints_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getIceServersBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getPcConstraintsBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getVideoConstraintsBytes());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getIceServersBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getPcConstraintsBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getVideoConstraintsBytes());
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.VideoStreamInfo}
     *
     * <pre>
     * S-&gt;C
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfoOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        iceServers_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        pcConstraints_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        videoConstraints_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo build() {
        org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo result = new org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.iceServers_ = iceServers_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.pcConstraints_ = pcConstraints_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.videoConstraints_ = videoConstraints_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance()) return this;
        if (other.hasIceServers()) {
          bitField0_ |= 0x00000001;
          iceServers_ = other.iceServers_;
          
        }
        if (other.hasPcConstraints()) {
          bitField0_ |= 0x00000002;
          pcConstraints_ = other.pcConstraints_;
          
        }
        if (other.hasVideoConstraints()) {
          bitField0_ |= 0x00000004;
          videoConstraints_ = other.videoConstraints_;
          
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string iceServers = 1;
      private java.lang.Object iceServers_ = "";
      /**
       * <code>optional string iceServers = 1;</code>
       */
      public boolean hasIceServers() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string iceServers = 1;</code>
       */
      public java.lang.String getIceServers() {
        java.lang.Object ref = iceServers_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          iceServers_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string iceServers = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIceServersBytes() {
        java.lang.Object ref = iceServers_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          iceServers_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string iceServers = 1;</code>
       */
      public Builder setIceServers(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        iceServers_ = value;
        
        return this;
      }
      /**
       * <code>optional string iceServers = 1;</code>
       */
      public Builder clearIceServers() {
        bitField0_ = (bitField0_ & ~0x00000001);
        iceServers_ = getDefaultInstance().getIceServers();
        
        return this;
      }
      /**
       * <code>optional string iceServers = 1;</code>
       */
      public Builder setIceServersBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        iceServers_ = value;
        
        return this;
      }

      // optional string pcConstraints = 2;
      private java.lang.Object pcConstraints_ = "";
      /**
       * <code>optional string pcConstraints = 2;</code>
       */
      public boolean hasPcConstraints() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string pcConstraints = 2;</code>
       */
      public java.lang.String getPcConstraints() {
        java.lang.Object ref = pcConstraints_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          pcConstraints_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string pcConstraints = 2;</code>
       */
      public com.google.protobuf.ByteString
          getPcConstraintsBytes() {
        java.lang.Object ref = pcConstraints_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          pcConstraints_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string pcConstraints = 2;</code>
       */
      public Builder setPcConstraints(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        pcConstraints_ = value;
        
        return this;
      }
      /**
       * <code>optional string pcConstraints = 2;</code>
       */
      public Builder clearPcConstraints() {
        bitField0_ = (bitField0_ & ~0x00000002);
        pcConstraints_ = getDefaultInstance().getPcConstraints();
        
        return this;
      }
      /**
       * <code>optional string pcConstraints = 2;</code>
       */
      public Builder setPcConstraintsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        pcConstraints_ = value;
        
        return this;
      }

      // optional string videoConstraints = 3;
      private java.lang.Object videoConstraints_ = "";
      /**
       * <code>optional string videoConstraints = 3;</code>
       */
      public boolean hasVideoConstraints() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string videoConstraints = 3;</code>
       */
      public java.lang.String getVideoConstraints() {
        java.lang.Object ref = videoConstraints_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          videoConstraints_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string videoConstraints = 3;</code>
       */
      public com.google.protobuf.ByteString
          getVideoConstraintsBytes() {
        java.lang.Object ref = videoConstraints_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          videoConstraints_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string videoConstraints = 3;</code>
       */
      public Builder setVideoConstraints(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        videoConstraints_ = value;
        
        return this;
      }
      /**
       * <code>optional string videoConstraints = 3;</code>
       */
      public Builder clearVideoConstraints() {
        bitField0_ = (bitField0_ & ~0x00000004);
        videoConstraints_ = getDefaultInstance().getVideoConstraints();
        
        return this;
      }
      /**
       * <code>optional string videoConstraints = 3;</code>
       */
      public Builder setVideoConstraintsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        videoConstraints_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.VideoStreamInfo)
    }

    static {
      defaultInstance = new VideoStreamInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.VideoStreamInfo)
  }

  public interface RotationInfoOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required int32 rotation = 1;
    /**
     * <code>required int32 rotation = 1;</code>
     */
    boolean hasRotation();
    /**
     * <code>required int32 rotation = 1;</code>
     */
    int getRotation();
  }
  /**
   * Protobuf type {@code svmp.RotationInfo}
   *
   * <pre>
   * C-&gt;S
   * </pre>
   */
  public static final class RotationInfo extends
      com.google.protobuf.GeneratedMessageLite
      implements RotationInfoOrBuilder {
    // Use RotationInfo.newBuilder() to construct.
    private RotationInfo(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private RotationInfo(boolean noInit) {}

    private static final RotationInfo defaultInstance;
    public static RotationInfo getDefaultInstance() {
      return defaultInstance;
    }

    public RotationInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private RotationInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              rotation_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<RotationInfo> PARSER =
        new com.google.protobuf.AbstractParser<RotationInfo>() {
      public RotationInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RotationInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RotationInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 rotation = 1;
    public static final int ROTATION_FIELD_NUMBER = 1;
    private int rotation_;
    /**
     * <code>required int32 rotation = 1;</code>
     */
    public boolean hasRotation() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 rotation = 1;</code>
     */
    public int getRotation() {
      return rotation_;
    }

    private void initFields() {
      rotation_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasRotation()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, rotation_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, rotation_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.RotationInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.RotationInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.RotationInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.RotationInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.RotationInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.RotationInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.RotationInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.RotationInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.RotationInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.RotationInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.RotationInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.RotationInfo}
     *
     * <pre>
     * C-&gt;S
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.RotationInfo, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.RotationInfoOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.RotationInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        rotation_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.RotationInfo getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.RotationInfo.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.RotationInfo build() {
        org.mitre.svmp.protocol.SVMPProtocol.RotationInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.RotationInfo buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.RotationInfo result = new org.mitre.svmp.protocol.SVMPProtocol.RotationInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.rotation_ = rotation_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.RotationInfo other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.RotationInfo.getDefaultInstance()) return this;
        if (other.hasRotation()) {
          setRotation(other.getRotation());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRotation()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.RotationInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.RotationInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 rotation = 1;
      private int rotation_ ;
      /**
       * <code>required int32 rotation = 1;</code>
       */
      public boolean hasRotation() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 rotation = 1;</code>
       */
      public int getRotation() {
        return rotation_;
      }
      /**
       * <code>required int32 rotation = 1;</code>
       */
      public Builder setRotation(int value) {
        bitField0_ |= 0x00000001;
        rotation_ = value;
        
        return this;
      }
      /**
       * <code>required int32 rotation = 1;</code>
       */
      public Builder clearRotation() {
        bitField0_ = (bitField0_ & ~0x00000001);
        rotation_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.RotationInfo)
    }

    static {
      defaultInstance = new RotationInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.RotationInfo)
  }

  public interface PingOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required int64 startDate = 1;
    /**
     * <code>required int64 startDate = 1;</code>
     */
    boolean hasStartDate();
    /**
     * <code>required int64 startDate = 1;</code>
     */
    long getStartDate();
  }
  /**
   * Protobuf type {@code svmp.Ping}
   *
   * <pre>
   * C&lt;-&gt;S
   * </pre>
   */
  public static final class Ping extends
      com.google.protobuf.GeneratedMessageLite
      implements PingOrBuilder {
    // Use Ping.newBuilder() to construct.
    private Ping(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private Ping(boolean noInit) {}

    private static final Ping defaultInstance;
    public static Ping getDefaultInstance() {
      return defaultInstance;
    }

    public Ping getDefaultInstanceForType() {
      return defaultInstance;
    }

    private Ping(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              startDate_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Ping> PARSER =
        new com.google.protobuf.AbstractParser<Ping>() {
      public Ping parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Ping(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Ping> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int64 startDate = 1;
    public static final int STARTDATE_FIELD_NUMBER = 1;
    private long startDate_;
    /**
     * <code>required int64 startDate = 1;</code>
     */
    public boolean hasStartDate() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 startDate = 1;</code>
     */
    public long getStartDate() {
      return startDate_;
    }

    private void initFields() {
      startDate_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasStartDate()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, startDate_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, startDate_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.Ping parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Ping parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Ping parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Ping parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Ping parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Ping parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Ping parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Ping parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Ping parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Ping parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Ping prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.Ping}
     *
     * <pre>
     * C&lt;-&gt;S
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.Ping, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.PingOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.Ping.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        startDate_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Ping getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.Ping.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Ping build() {
        org.mitre.svmp.protocol.SVMPProtocol.Ping result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Ping buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.Ping result = new org.mitre.svmp.protocol.SVMPProtocol.Ping(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.startDate_ = startDate_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Ping other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.Ping.getDefaultInstance()) return this;
        if (other.hasStartDate()) {
          setStartDate(other.getStartDate());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasStartDate()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.Ping parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.Ping) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int64 startDate = 1;
      private long startDate_ ;
      /**
       * <code>required int64 startDate = 1;</code>
       */
      public boolean hasStartDate() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 startDate = 1;</code>
       */
      public long getStartDate() {
        return startDate_;
      }
      /**
       * <code>required int64 startDate = 1;</code>
       */
      public Builder setStartDate(long value) {
        bitField0_ |= 0x00000001;
        startDate_ = value;
        
        return this;
      }
      /**
       * <code>required int64 startDate = 1;</code>
       */
      public Builder clearStartDate() {
        bitField0_ = (bitField0_ & ~0x00000001);
        startDate_ = 0L;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.Ping)
    }

    static {
      defaultInstance = new Ping(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.Ping)
  }

  public interface AppsRequestOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .svmp.AppsRequest.AppsRequestType type = 1;
    /**
     * <code>required .svmp.AppsRequest.AppsRequestType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .svmp.AppsRequest.AppsRequestType type = 1;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.AppsRequestType getType();

    // repeated .svmp.AppInfo current = 2;
    /**
     * <code>repeated .svmp.AppInfo current = 2;</code>
     *
     * <pre>
     * used for type REFRESH
     * </pre>
     */
    java.util.List<org.mitre.svmp.protocol.SVMPProtocol.AppInfo> 
        getCurrentList();
    /**
     * <code>repeated .svmp.AppInfo current = 2;</code>
     *
     * <pre>
     * used for type REFRESH
     * </pre>
     */
    org.mitre.svmp.protocol.SVMPProtocol.AppInfo getCurrent(int index);
    /**
     * <code>repeated .svmp.AppInfo current = 2;</code>
     *
     * <pre>
     * used for type REFRESH
     * </pre>
     */
    int getCurrentCount();

    // optional int32 screenDensity = 3;
    /**
     * <code>optional int32 screenDensity = 3;</code>
     *
     * <pre>
     * the screen density of the device
     * </pre>
     */
    boolean hasScreenDensity();
    /**
     * <code>optional int32 screenDensity = 3;</code>
     *
     * <pre>
     * the screen density of the device
     * </pre>
     */
    int getScreenDensity();

    // optional string pkgName = 4;
    /**
     * <code>optional string pkgName = 4;</code>
     *
     * <pre>
     * used for type LAUNCH
     * </pre>
     */
    boolean hasPkgName();
    /**
     * <code>optional string pkgName = 4;</code>
     *
     * <pre>
     * used for type LAUNCH
     * </pre>
     */
    java.lang.String getPkgName();
    /**
     * <code>optional string pkgName = 4;</code>
     *
     * <pre>
     * used for type LAUNCH
     * </pre>
     */
    com.google.protobuf.ByteString
        getPkgNameBytes();
  }
  /**
   * Protobuf type {@code svmp.AppsRequest}
   *
   * <pre>
   * C-&gt;S
   * </pre>
   */
  public static final class AppsRequest extends
      com.google.protobuf.GeneratedMessageLite
      implements AppsRequestOrBuilder {
    // Use AppsRequest.newBuilder() to construct.
    private AppsRequest(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private AppsRequest(boolean noInit) {}

    private static final AppsRequest defaultInstance;
    public static AppsRequest getDefaultInstance() {
      return defaultInstance;
    }

    public AppsRequest getDefaultInstanceForType() {
      return defaultInstance;
    }

    private AppsRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.AppsRequestType value = org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.AppsRequestType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                current_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.AppInfo>();
                mutable_bitField0_ |= 0x00000002;
              }
              current_.add(input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.AppInfo.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              screenDensity_ = input.readInt32();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000004;
              pkgName_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          current_ = java.util.Collections.unmodifiableList(current_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<AppsRequest> PARSER =
        new com.google.protobuf.AbstractParser<AppsRequest>() {
      public AppsRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AppsRequest(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AppsRequest> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code svmp.AppsRequest.AppsRequestType}
     */
    public enum AppsRequestType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>REFRESH = 1;</code>
       */
      REFRESH(0, 1),
      /**
       * <code>LAUNCH = 2;</code>
       */
      LAUNCH(1, 2),
      ;

      /**
       * <code>REFRESH = 1;</code>
       */
      public static final int REFRESH_VALUE = 1;
      /**
       * <code>LAUNCH = 2;</code>
       */
      public static final int LAUNCH_VALUE = 2;


      public final int getNumber() { return value; }

      public static AppsRequestType valueOf(int value) {
        switch (value) {
          case 1: return REFRESH;
          case 2: return LAUNCH;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<AppsRequestType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<AppsRequestType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<AppsRequestType>() {
              public AppsRequestType findValueByNumber(int number) {
                return AppsRequestType.valueOf(number);
              }
            };

      private final int value;

      private AppsRequestType(int index, int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:svmp.AppsRequest.AppsRequestType)
    }

    private int bitField0_;
    // required .svmp.AppsRequest.AppsRequestType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.AppsRequestType type_;
    /**
     * <code>required .svmp.AppsRequest.AppsRequestType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .svmp.AppsRequest.AppsRequestType type = 1;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.AppsRequestType getType() {
      return type_;
    }

    // repeated .svmp.AppInfo current = 2;
    public static final int CURRENT_FIELD_NUMBER = 2;
    private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.AppInfo> current_;
    /**
     * <code>repeated .svmp.AppInfo current = 2;</code>
     *
     * <pre>
     * used for type REFRESH
     * </pre>
     */
    public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.AppInfo> getCurrentList() {
      return current_;
    }
    /**
     * <code>repeated .svmp.AppInfo current = 2;</code>
     *
     * <pre>
     * used for type REFRESH
     * </pre>
     */
    public java.util.List<? extends org.mitre.svmp.protocol.SVMPProtocol.AppInfoOrBuilder> 
        getCurrentOrBuilderList() {
      return current_;
    }
    /**
     * <code>repeated .svmp.AppInfo current = 2;</code>
     *
     * <pre>
     * used for type REFRESH
     * </pre>
     */
    public int getCurrentCount() {
      return current_.size();
    }
    /**
     * <code>repeated .svmp.AppInfo current = 2;</code>
     *
     * <pre>
     * used for type REFRESH
     * </pre>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.AppInfo getCurrent(int index) {
      return current_.get(index);
    }
    /**
     * <code>repeated .svmp.AppInfo current = 2;</code>
     *
     * <pre>
     * used for type REFRESH
     * </pre>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.AppInfoOrBuilder getCurrentOrBuilder(
        int index) {
      return current_.get(index);
    }

    // optional int32 screenDensity = 3;
    public static final int SCREENDENSITY_FIELD_NUMBER = 3;
    private int screenDensity_;
    /**
     * <code>optional int32 screenDensity = 3;</code>
     *
     * <pre>
     * the screen density of the device
     * </pre>
     */
    public boolean hasScreenDensity() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 screenDensity = 3;</code>
     *
     * <pre>
     * the screen density of the device
     * </pre>
     */
    public int getScreenDensity() {
      return screenDensity_;
    }

    // optional string pkgName = 4;
    public static final int PKGNAME_FIELD_NUMBER = 4;
    private java.lang.Object pkgName_;
    /**
     * <code>optional string pkgName = 4;</code>
     *
     * <pre>
     * used for type LAUNCH
     * </pre>
     */
    public boolean hasPkgName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string pkgName = 4;</code>
     *
     * <pre>
     * used for type LAUNCH
     * </pre>
     */
    public java.lang.String getPkgName() {
      java.lang.Object ref = pkgName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          pkgName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string pkgName = 4;</code>
     *
     * <pre>
     * used for type LAUNCH
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPkgNameBytes() {
      java.lang.Object ref = pkgName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        pkgName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      type_ = org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.AppsRequestType.REFRESH;
      current_ = java.util.Collections.emptyList();
      screenDensity_ = 0;
      pkgName_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getCurrentCount(); i++) {
        if (!getCurrent(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      for (int i = 0; i < current_.size(); i++) {
        output.writeMessage(2, current_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, screenDensity_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(4, getPkgNameBytes());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      for (int i = 0; i < current_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, current_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, screenDensity_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getPkgNameBytes());
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.AppsRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.AppsRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.AppsRequest}
     *
     * <pre>
     * C-&gt;S
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.AppsRequest, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.AppsRequestOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.AppsRequestType.REFRESH;
        bitField0_ = (bitField0_ & ~0x00000001);
        current_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        screenDensity_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        pkgName_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.AppsRequest getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.AppsRequest build() {
        org.mitre.svmp.protocol.SVMPProtocol.AppsRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.AppsRequest buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.AppsRequest result = new org.mitre.svmp.protocol.SVMPProtocol.AppsRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          current_ = java.util.Collections.unmodifiableList(current_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.current_ = current_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.screenDensity_ = screenDensity_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.pkgName_ = pkgName_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.AppsRequest other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (!other.current_.isEmpty()) {
          if (current_.isEmpty()) {
            current_ = other.current_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCurrentIsMutable();
            current_.addAll(other.current_);
          }
          
        }
        if (other.hasScreenDensity()) {
          setScreenDensity(other.getScreenDensity());
        }
        if (other.hasPkgName()) {
          bitField0_ |= 0x00000008;
          pkgName_ = other.pkgName_;
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        for (int i = 0; i < getCurrentCount(); i++) {
          if (!getCurrent(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.AppsRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.AppsRequest) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .svmp.AppsRequest.AppsRequestType type = 1;
      private org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.AppsRequestType type_ = org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.AppsRequestType.REFRESH;
      /**
       * <code>required .svmp.AppsRequest.AppsRequestType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .svmp.AppsRequest.AppsRequestType type = 1;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.AppsRequestType getType() {
        return type_;
      }
      /**
       * <code>required .svmp.AppsRequest.AppsRequestType type = 1;</code>
       */
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.AppsRequestType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      /**
       * <code>required .svmp.AppsRequest.AppsRequestType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mitre.svmp.protocol.SVMPProtocol.AppsRequest.AppsRequestType.REFRESH;
        
        return this;
      }

      // repeated .svmp.AppInfo current = 2;
      private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.AppInfo> current_ =
        java.util.Collections.emptyList();
      private void ensureCurrentIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          current_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.AppInfo>(current_);
          bitField0_ |= 0x00000002;
         }
      }

      /**
       * <code>repeated .svmp.AppInfo current = 2;</code>
       *
       * <pre>
       * used for type REFRESH
       * </pre>
       */
      public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.AppInfo> getCurrentList() {
        return java.util.Collections.unmodifiableList(current_);
      }
      /**
       * <code>repeated .svmp.AppInfo current = 2;</code>
       *
       * <pre>
       * used for type REFRESH
       * </pre>
       */
      public int getCurrentCount() {
        return current_.size();
      }
      /**
       * <code>repeated .svmp.AppInfo current = 2;</code>
       *
       * <pre>
       * used for type REFRESH
       * </pre>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.AppInfo getCurrent(int index) {
        return current_.get(index);
      }
      /**
       * <code>repeated .svmp.AppInfo current = 2;</code>
       *
       * <pre>
       * used for type REFRESH
       * </pre>
       */
      public Builder setCurrent(
          int index, org.mitre.svmp.protocol.SVMPProtocol.AppInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCurrentIsMutable();
        current_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo current = 2;</code>
       *
       * <pre>
       * used for type REFRESH
       * </pre>
       */
      public Builder setCurrent(
          int index, org.mitre.svmp.protocol.SVMPProtocol.AppInfo.Builder builderForValue) {
        ensureCurrentIsMutable();
        current_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo current = 2;</code>
       *
       * <pre>
       * used for type REFRESH
       * </pre>
       */
      public Builder addCurrent(org.mitre.svmp.protocol.SVMPProtocol.AppInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCurrentIsMutable();
        current_.add(value);

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo current = 2;</code>
       *
       * <pre>
       * used for type REFRESH
       * </pre>
       */
      public Builder addCurrent(
          int index, org.mitre.svmp.protocol.SVMPProtocol.AppInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCurrentIsMutable();
        current_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo current = 2;</code>
       *
       * <pre>
       * used for type REFRESH
       * </pre>
       */
      public Builder addCurrent(
          org.mitre.svmp.protocol.SVMPProtocol.AppInfo.Builder builderForValue) {
        ensureCurrentIsMutable();
        current_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo current = 2;</code>
       *
       * <pre>
       * used for type REFRESH
       * </pre>
       */
      public Builder addCurrent(
          int index, org.mitre.svmp.protocol.SVMPProtocol.AppInfo.Builder builderForValue) {
        ensureCurrentIsMutable();
        current_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo current = 2;</code>
       *
       * <pre>
       * used for type REFRESH
       * </pre>
       */
      public Builder addAllCurrent(
          java.lang.Iterable<? extends org.mitre.svmp.protocol.SVMPProtocol.AppInfo> values) {
        ensureCurrentIsMutable();
        super.addAll(values, current_);

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo current = 2;</code>
       *
       * <pre>
       * used for type REFRESH
       * </pre>
       */
      public Builder clearCurrent() {
        current_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo current = 2;</code>
       *
       * <pre>
       * used for type REFRESH
       * </pre>
       */
      public Builder removeCurrent(int index) {
        ensureCurrentIsMutable();
        current_.remove(index);

        return this;
      }

      // optional int32 screenDensity = 3;
      private int screenDensity_ ;
      /**
       * <code>optional int32 screenDensity = 3;</code>
       *
       * <pre>
       * the screen density of the device
       * </pre>
       */
      public boolean hasScreenDensity() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 screenDensity = 3;</code>
       *
       * <pre>
       * the screen density of the device
       * </pre>
       */
      public int getScreenDensity() {
        return screenDensity_;
      }
      /**
       * <code>optional int32 screenDensity = 3;</code>
       *
       * <pre>
       * the screen density of the device
       * </pre>
       */
      public Builder setScreenDensity(int value) {
        bitField0_ |= 0x00000004;
        screenDensity_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 screenDensity = 3;</code>
       *
       * <pre>
       * the screen density of the device
       * </pre>
       */
      public Builder clearScreenDensity() {
        bitField0_ = (bitField0_ & ~0x00000004);
        screenDensity_ = 0;
        
        return this;
      }

      // optional string pkgName = 4;
      private java.lang.Object pkgName_ = "";
      /**
       * <code>optional string pkgName = 4;</code>
       *
       * <pre>
       * used for type LAUNCH
       * </pre>
       */
      public boolean hasPkgName() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string pkgName = 4;</code>
       *
       * <pre>
       * used for type LAUNCH
       * </pre>
       */
      public java.lang.String getPkgName() {
        java.lang.Object ref = pkgName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          pkgName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string pkgName = 4;</code>
       *
       * <pre>
       * used for type LAUNCH
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPkgNameBytes() {
        java.lang.Object ref = pkgName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          pkgName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string pkgName = 4;</code>
       *
       * <pre>
       * used for type LAUNCH
       * </pre>
       */
      public Builder setPkgName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        pkgName_ = value;
        
        return this;
      }
      /**
       * <code>optional string pkgName = 4;</code>
       *
       * <pre>
       * used for type LAUNCH
       * </pre>
       */
      public Builder clearPkgName() {
        bitField0_ = (bitField0_ & ~0x00000008);
        pkgName_ = getDefaultInstance().getPkgName();
        
        return this;
      }
      /**
       * <code>optional string pkgName = 4;</code>
       *
       * <pre>
       * used for type LAUNCH
       * </pre>
       */
      public Builder setPkgNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        pkgName_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.AppsRequest)
    }

    static {
      defaultInstance = new AppsRequest(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.AppsRequest)
  }

  public interface AppsResponseOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required .svmp.AppsResponse.AppsResponseType type = 1;
    /**
     * <code>required .svmp.AppsResponse.AppsResponseType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .svmp.AppsResponse.AppsResponseType type = 1;</code>
     */
    org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.AppsResponseType getType();

    // repeated .svmp.AppInfo new = 2;
    /**
     * <code>repeated .svmp.AppInfo new = 2;</code>
     *
     * <pre>
     * list of apps to insert
     * </pre>
     */
    java.util.List<org.mitre.svmp.protocol.SVMPProtocol.AppInfo> 
        getNewList();
    /**
     * <code>repeated .svmp.AppInfo new = 2;</code>
     *
     * <pre>
     * list of apps to insert
     * </pre>
     */
    org.mitre.svmp.protocol.SVMPProtocol.AppInfo getNew(int index);
    /**
     * <code>repeated .svmp.AppInfo new = 2;</code>
     *
     * <pre>
     * list of apps to insert
     * </pre>
     */
    int getNewCount();

    // repeated .svmp.AppInfo updated = 3;
    /**
     * <code>repeated .svmp.AppInfo updated = 3;</code>
     *
     * <pre>
     * list of apps to update (changed name/icon?)
     * </pre>
     */
    java.util.List<org.mitre.svmp.protocol.SVMPProtocol.AppInfo> 
        getUpdatedList();
    /**
     * <code>repeated .svmp.AppInfo updated = 3;</code>
     *
     * <pre>
     * list of apps to update (changed name/icon?)
     * </pre>
     */
    org.mitre.svmp.protocol.SVMPProtocol.AppInfo getUpdated(int index);
    /**
     * <code>repeated .svmp.AppInfo updated = 3;</code>
     *
     * <pre>
     * list of apps to update (changed name/icon?)
     * </pre>
     */
    int getUpdatedCount();

    // repeated string removed = 4;
    /**
     * <code>repeated string removed = 4;</code>
     *
     * <pre>
     * list of apps to remove (only pkgName needed)
     * </pre>
     */
    java.util.List<java.lang.String>
    getRemovedList();
    /**
     * <code>repeated string removed = 4;</code>
     *
     * <pre>
     * list of apps to remove (only pkgName needed)
     * </pre>
     */
    int getRemovedCount();
    /**
     * <code>repeated string removed = 4;</code>
     *
     * <pre>
     * list of apps to remove (only pkgName needed)
     * </pre>
     */
    java.lang.String getRemoved(int index);
    /**
     * <code>repeated string removed = 4;</code>
     *
     * <pre>
     * list of apps to remove (only pkgName needed)
     * </pre>
     */
    com.google.protobuf.ByteString
        getRemovedBytes(int index);
  }
  /**
   * Protobuf type {@code svmp.AppsResponse}
   *
   * <pre>
   * S-&gt;C
   * </pre>
   */
  public static final class AppsResponse extends
      com.google.protobuf.GeneratedMessageLite
      implements AppsResponseOrBuilder {
    // Use AppsResponse.newBuilder() to construct.
    private AppsResponse(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private AppsResponse(boolean noInit) {}

    private static final AppsResponse defaultInstance;
    public static AppsResponse getDefaultInstance() {
      return defaultInstance;
    }

    public AppsResponse getDefaultInstanceForType() {
      return defaultInstance;
    }

    private AppsResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.AppsResponseType value = org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.AppsResponseType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                new_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.AppInfo>();
                mutable_bitField0_ |= 0x00000002;
              }
              new_.add(input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.AppInfo.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                updated_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.AppInfo>();
                mutable_bitField0_ |= 0x00000004;
              }
              updated_.add(input.readMessage(org.mitre.svmp.protocol.SVMPProtocol.AppInfo.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                removed_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000008;
              }
              removed_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          new_ = java.util.Collections.unmodifiableList(new_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          updated_ = java.util.Collections.unmodifiableList(updated_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          removed_ = new com.google.protobuf.UnmodifiableLazyStringList(removed_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<AppsResponse> PARSER =
        new com.google.protobuf.AbstractParser<AppsResponse>() {
      public AppsResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AppsResponse(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AppsResponse> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code svmp.AppsResponse.AppsResponseType}
     */
    public enum AppsResponseType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>REFRESH = 1;</code>
       *
       * <pre>
       * response to a REFRESH request
       * </pre>
       */
      REFRESH(0, 1),
      /**
       * <code>EXIT = 2;</code>
       *
       * <pre>
       * when the app has exited, this gets sent to the client
       * </pre>
       */
      EXIT(1, 2),
      ;

      /**
       * <code>REFRESH = 1;</code>
       *
       * <pre>
       * response to a REFRESH request
       * </pre>
       */
      public static final int REFRESH_VALUE = 1;
      /**
       * <code>EXIT = 2;</code>
       *
       * <pre>
       * when the app has exited, this gets sent to the client
       * </pre>
       */
      public static final int EXIT_VALUE = 2;


      public final int getNumber() { return value; }

      public static AppsResponseType valueOf(int value) {
        switch (value) {
          case 1: return REFRESH;
          case 2: return EXIT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<AppsResponseType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<AppsResponseType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<AppsResponseType>() {
              public AppsResponseType findValueByNumber(int number) {
                return AppsResponseType.valueOf(number);
              }
            };

      private final int value;

      private AppsResponseType(int index, int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:svmp.AppsResponse.AppsResponseType)
    }

    private int bitField0_;
    // required .svmp.AppsResponse.AppsResponseType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.AppsResponseType type_;
    /**
     * <code>required .svmp.AppsResponse.AppsResponseType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .svmp.AppsResponse.AppsResponseType type = 1;</code>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.AppsResponseType getType() {
      return type_;
    }

    // repeated .svmp.AppInfo new = 2;
    public static final int NEW_FIELD_NUMBER = 2;
    private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.AppInfo> new_;
    /**
     * <code>repeated .svmp.AppInfo new = 2;</code>
     *
     * <pre>
     * list of apps to insert
     * </pre>
     */
    public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.AppInfo> getNewList() {
      return new_;
    }
    /**
     * <code>repeated .svmp.AppInfo new = 2;</code>
     *
     * <pre>
     * list of apps to insert
     * </pre>
     */
    public java.util.List<? extends org.mitre.svmp.protocol.SVMPProtocol.AppInfoOrBuilder> 
        getNewOrBuilderList() {
      return new_;
    }
    /**
     * <code>repeated .svmp.AppInfo new = 2;</code>
     *
     * <pre>
     * list of apps to insert
     * </pre>
     */
    public int getNewCount() {
      return new_.size();
    }
    /**
     * <code>repeated .svmp.AppInfo new = 2;</code>
     *
     * <pre>
     * list of apps to insert
     * </pre>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.AppInfo getNew(int index) {
      return new_.get(index);
    }
    /**
     * <code>repeated .svmp.AppInfo new = 2;</code>
     *
     * <pre>
     * list of apps to insert
     * </pre>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.AppInfoOrBuilder getNewOrBuilder(
        int index) {
      return new_.get(index);
    }

    // repeated .svmp.AppInfo updated = 3;
    public static final int UPDATED_FIELD_NUMBER = 3;
    private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.AppInfo> updated_;
    /**
     * <code>repeated .svmp.AppInfo updated = 3;</code>
     *
     * <pre>
     * list of apps to update (changed name/icon?)
     * </pre>
     */
    public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.AppInfo> getUpdatedList() {
      return updated_;
    }
    /**
     * <code>repeated .svmp.AppInfo updated = 3;</code>
     *
     * <pre>
     * list of apps to update (changed name/icon?)
     * </pre>
     */
    public java.util.List<? extends org.mitre.svmp.protocol.SVMPProtocol.AppInfoOrBuilder> 
        getUpdatedOrBuilderList() {
      return updated_;
    }
    /**
     * <code>repeated .svmp.AppInfo updated = 3;</code>
     *
     * <pre>
     * list of apps to update (changed name/icon?)
     * </pre>
     */
    public int getUpdatedCount() {
      return updated_.size();
    }
    /**
     * <code>repeated .svmp.AppInfo updated = 3;</code>
     *
     * <pre>
     * list of apps to update (changed name/icon?)
     * </pre>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.AppInfo getUpdated(int index) {
      return updated_.get(index);
    }
    /**
     * <code>repeated .svmp.AppInfo updated = 3;</code>
     *
     * <pre>
     * list of apps to update (changed name/icon?)
     * </pre>
     */
    public org.mitre.svmp.protocol.SVMPProtocol.AppInfoOrBuilder getUpdatedOrBuilder(
        int index) {
      return updated_.get(index);
    }

    // repeated string removed = 4;
    public static final int REMOVED_FIELD_NUMBER = 4;
    private com.google.protobuf.LazyStringList removed_;
    /**
     * <code>repeated string removed = 4;</code>
     *
     * <pre>
     * list of apps to remove (only pkgName needed)
     * </pre>
     */
    public java.util.List<java.lang.String>
        getRemovedList() {
      return removed_;
    }
    /**
     * <code>repeated string removed = 4;</code>
     *
     * <pre>
     * list of apps to remove (only pkgName needed)
     * </pre>
     */
    public int getRemovedCount() {
      return removed_.size();
    }
    /**
     * <code>repeated string removed = 4;</code>
     *
     * <pre>
     * list of apps to remove (only pkgName needed)
     * </pre>
     */
    public java.lang.String getRemoved(int index) {
      return removed_.get(index);
    }
    /**
     * <code>repeated string removed = 4;</code>
     *
     * <pre>
     * list of apps to remove (only pkgName needed)
     * </pre>
     */
    public com.google.protobuf.ByteString
        getRemovedBytes(int index) {
      return removed_.getByteString(index);
    }

    private void initFields() {
      type_ = org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.AppsResponseType.REFRESH;
      new_ = java.util.Collections.emptyList();
      updated_ = java.util.Collections.emptyList();
      removed_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getNewCount(); i++) {
        if (!getNew(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getUpdatedCount(); i++) {
        if (!getUpdated(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      for (int i = 0; i < new_.size(); i++) {
        output.writeMessage(2, new_.get(i));
      }
      for (int i = 0; i < updated_.size(); i++) {
        output.writeMessage(3, updated_.get(i));
      }
      for (int i = 0; i < removed_.size(); i++) {
        output.writeBytes(4, removed_.getByteString(i));
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      for (int i = 0; i < new_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, new_.get(i));
      }
      for (int i = 0; i < updated_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, updated_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < removed_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(removed_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getRemovedList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.AppsResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppsResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.AppsResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.AppsResponse}
     *
     * <pre>
     * S-&gt;C
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.AppsResponse, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.AppsResponseOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.AppsResponseType.REFRESH;
        bitField0_ = (bitField0_ & ~0x00000001);
        new_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        updated_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        removed_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.AppsResponse getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.AppsResponse build() {
        org.mitre.svmp.protocol.SVMPProtocol.AppsResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.AppsResponse buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.AppsResponse result = new org.mitre.svmp.protocol.SVMPProtocol.AppsResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          new_ = java.util.Collections.unmodifiableList(new_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.new_ = new_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          updated_ = java.util.Collections.unmodifiableList(updated_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.updated_ = updated_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          removed_ = new com.google.protobuf.UnmodifiableLazyStringList(
              removed_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.removed_ = removed_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.AppsResponse other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (!other.new_.isEmpty()) {
          if (new_.isEmpty()) {
            new_ = other.new_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureNewIsMutable();
            new_.addAll(other.new_);
          }
          
        }
        if (!other.updated_.isEmpty()) {
          if (updated_.isEmpty()) {
            updated_ = other.updated_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureUpdatedIsMutable();
            updated_.addAll(other.updated_);
          }
          
        }
        if (!other.removed_.isEmpty()) {
          if (removed_.isEmpty()) {
            removed_ = other.removed_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureRemovedIsMutable();
            removed_.addAll(other.removed_);
          }
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        for (int i = 0; i < getNewCount(); i++) {
          if (!getNew(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getUpdatedCount(); i++) {
          if (!getUpdated(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.AppsResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.AppsResponse) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .svmp.AppsResponse.AppsResponseType type = 1;
      private org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.AppsResponseType type_ = org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.AppsResponseType.REFRESH;
      /**
       * <code>required .svmp.AppsResponse.AppsResponseType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .svmp.AppsResponse.AppsResponseType type = 1;</code>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.AppsResponseType getType() {
        return type_;
      }
      /**
       * <code>required .svmp.AppsResponse.AppsResponseType type = 1;</code>
       */
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.AppsResponseType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      /**
       * <code>required .svmp.AppsResponse.AppsResponseType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mitre.svmp.protocol.SVMPProtocol.AppsResponse.AppsResponseType.REFRESH;
        
        return this;
      }

      // repeated .svmp.AppInfo new = 2;
      private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.AppInfo> new_ =
        java.util.Collections.emptyList();
      private void ensureNewIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          new_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.AppInfo>(new_);
          bitField0_ |= 0x00000002;
         }
      }

      /**
       * <code>repeated .svmp.AppInfo new = 2;</code>
       *
       * <pre>
       * list of apps to insert
       * </pre>
       */
      public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.AppInfo> getNewList() {
        return java.util.Collections.unmodifiableList(new_);
      }
      /**
       * <code>repeated .svmp.AppInfo new = 2;</code>
       *
       * <pre>
       * list of apps to insert
       * </pre>
       */
      public int getNewCount() {
        return new_.size();
      }
      /**
       * <code>repeated .svmp.AppInfo new = 2;</code>
       *
       * <pre>
       * list of apps to insert
       * </pre>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.AppInfo getNew(int index) {
        return new_.get(index);
      }
      /**
       * <code>repeated .svmp.AppInfo new = 2;</code>
       *
       * <pre>
       * list of apps to insert
       * </pre>
       */
      public Builder setNew(
          int index, org.mitre.svmp.protocol.SVMPProtocol.AppInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNewIsMutable();
        new_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo new = 2;</code>
       *
       * <pre>
       * list of apps to insert
       * </pre>
       */
      public Builder setNew(
          int index, org.mitre.svmp.protocol.SVMPProtocol.AppInfo.Builder builderForValue) {
        ensureNewIsMutable();
        new_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo new = 2;</code>
       *
       * <pre>
       * list of apps to insert
       * </pre>
       */
      public Builder addNew(org.mitre.svmp.protocol.SVMPProtocol.AppInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNewIsMutable();
        new_.add(value);

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo new = 2;</code>
       *
       * <pre>
       * list of apps to insert
       * </pre>
       */
      public Builder addNew(
          int index, org.mitre.svmp.protocol.SVMPProtocol.AppInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNewIsMutable();
        new_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo new = 2;</code>
       *
       * <pre>
       * list of apps to insert
       * </pre>
       */
      public Builder addNew(
          org.mitre.svmp.protocol.SVMPProtocol.AppInfo.Builder builderForValue) {
        ensureNewIsMutable();
        new_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo new = 2;</code>
       *
       * <pre>
       * list of apps to insert
       * </pre>
       */
      public Builder addNew(
          int index, org.mitre.svmp.protocol.SVMPProtocol.AppInfo.Builder builderForValue) {
        ensureNewIsMutable();
        new_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo new = 2;</code>
       *
       * <pre>
       * list of apps to insert
       * </pre>
       */
      public Builder addAllNew(
          java.lang.Iterable<? extends org.mitre.svmp.protocol.SVMPProtocol.AppInfo> values) {
        ensureNewIsMutable();
        super.addAll(values, new_);

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo new = 2;</code>
       *
       * <pre>
       * list of apps to insert
       * </pre>
       */
      public Builder clearNew() {
        new_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo new = 2;</code>
       *
       * <pre>
       * list of apps to insert
       * </pre>
       */
      public Builder removeNew(int index) {
        ensureNewIsMutable();
        new_.remove(index);

        return this;
      }

      // repeated .svmp.AppInfo updated = 3;
      private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.AppInfo> updated_ =
        java.util.Collections.emptyList();
      private void ensureUpdatedIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          updated_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.AppInfo>(updated_);
          bitField0_ |= 0x00000004;
         }
      }

      /**
       * <code>repeated .svmp.AppInfo updated = 3;</code>
       *
       * <pre>
       * list of apps to update (changed name/icon?)
       * </pre>
       */
      public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.AppInfo> getUpdatedList() {
        return java.util.Collections.unmodifiableList(updated_);
      }
      /**
       * <code>repeated .svmp.AppInfo updated = 3;</code>
       *
       * <pre>
       * list of apps to update (changed name/icon?)
       * </pre>
       */
      public int getUpdatedCount() {
        return updated_.size();
      }
      /**
       * <code>repeated .svmp.AppInfo updated = 3;</code>
       *
       * <pre>
       * list of apps to update (changed name/icon?)
       * </pre>
       */
      public org.mitre.svmp.protocol.SVMPProtocol.AppInfo getUpdated(int index) {
        return updated_.get(index);
      }
      /**
       * <code>repeated .svmp.AppInfo updated = 3;</code>
       *
       * <pre>
       * list of apps to update (changed name/icon?)
       * </pre>
       */
      public Builder setUpdated(
          int index, org.mitre.svmp.protocol.SVMPProtocol.AppInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUpdatedIsMutable();
        updated_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo updated = 3;</code>
       *
       * <pre>
       * list of apps to update (changed name/icon?)
       * </pre>
       */
      public Builder setUpdated(
          int index, org.mitre.svmp.protocol.SVMPProtocol.AppInfo.Builder builderForValue) {
        ensureUpdatedIsMutable();
        updated_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo updated = 3;</code>
       *
       * <pre>
       * list of apps to update (changed name/icon?)
       * </pre>
       */
      public Builder addUpdated(org.mitre.svmp.protocol.SVMPProtocol.AppInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUpdatedIsMutable();
        updated_.add(value);

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo updated = 3;</code>
       *
       * <pre>
       * list of apps to update (changed name/icon?)
       * </pre>
       */
      public Builder addUpdated(
          int index, org.mitre.svmp.protocol.SVMPProtocol.AppInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUpdatedIsMutable();
        updated_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo updated = 3;</code>
       *
       * <pre>
       * list of apps to update (changed name/icon?)
       * </pre>
       */
      public Builder addUpdated(
          org.mitre.svmp.protocol.SVMPProtocol.AppInfo.Builder builderForValue) {
        ensureUpdatedIsMutable();
        updated_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo updated = 3;</code>
       *
       * <pre>
       * list of apps to update (changed name/icon?)
       * </pre>
       */
      public Builder addUpdated(
          int index, org.mitre.svmp.protocol.SVMPProtocol.AppInfo.Builder builderForValue) {
        ensureUpdatedIsMutable();
        updated_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo updated = 3;</code>
       *
       * <pre>
       * list of apps to update (changed name/icon?)
       * </pre>
       */
      public Builder addAllUpdated(
          java.lang.Iterable<? extends org.mitre.svmp.protocol.SVMPProtocol.AppInfo> values) {
        ensureUpdatedIsMutable();
        super.addAll(values, updated_);

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo updated = 3;</code>
       *
       * <pre>
       * list of apps to update (changed name/icon?)
       * </pre>
       */
      public Builder clearUpdated() {
        updated_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);

        return this;
      }
      /**
       * <code>repeated .svmp.AppInfo updated = 3;</code>
       *
       * <pre>
       * list of apps to update (changed name/icon?)
       * </pre>
       */
      public Builder removeUpdated(int index) {
        ensureUpdatedIsMutable();
        updated_.remove(index);

        return this;
      }

      // repeated string removed = 4;
      private com.google.protobuf.LazyStringList removed_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureRemovedIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          removed_ = new com.google.protobuf.LazyStringArrayList(removed_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated string removed = 4;</code>
       *
       * <pre>
       * list of apps to remove (only pkgName needed)
       * </pre>
       */
      public java.util.List<java.lang.String>
          getRemovedList() {
        return java.util.Collections.unmodifiableList(removed_);
      }
      /**
       * <code>repeated string removed = 4;</code>
       *
       * <pre>
       * list of apps to remove (only pkgName needed)
       * </pre>
       */
      public int getRemovedCount() {
        return removed_.size();
      }
      /**
       * <code>repeated string removed = 4;</code>
       *
       * <pre>
       * list of apps to remove (only pkgName needed)
       * </pre>
       */
      public java.lang.String getRemoved(int index) {
        return removed_.get(index);
      }
      /**
       * <code>repeated string removed = 4;</code>
       *
       * <pre>
       * list of apps to remove (only pkgName needed)
       * </pre>
       */
      public com.google.protobuf.ByteString
          getRemovedBytes(int index) {
        return removed_.getByteString(index);
      }
      /**
       * <code>repeated string removed = 4;</code>
       *
       * <pre>
       * list of apps to remove (only pkgName needed)
       * </pre>
       */
      public Builder setRemoved(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureRemovedIsMutable();
        removed_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated string removed = 4;</code>
       *
       * <pre>
       * list of apps to remove (only pkgName needed)
       * </pre>
       */
      public Builder addRemoved(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureRemovedIsMutable();
        removed_.add(value);
        
        return this;
      }
      /**
       * <code>repeated string removed = 4;</code>
       *
       * <pre>
       * list of apps to remove (only pkgName needed)
       * </pre>
       */
      public Builder addAllRemoved(
          java.lang.Iterable<java.lang.String> values) {
        ensureRemovedIsMutable();
        super.addAll(values, removed_);
        
        return this;
      }
      /**
       * <code>repeated string removed = 4;</code>
       *
       * <pre>
       * list of apps to remove (only pkgName needed)
       * </pre>
       */
      public Builder clearRemoved() {
        removed_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        
        return this;
      }
      /**
       * <code>repeated string removed = 4;</code>
       *
       * <pre>
       * list of apps to remove (only pkgName needed)
       * </pre>
       */
      public Builder addRemovedBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureRemovedIsMutable();
        removed_.add(value);
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.AppsResponse)
    }

    static {
      defaultInstance = new AppsResponse(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.AppsResponse)
  }

  public interface AppInfoOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required string pkgName = 1;
    /**
     * <code>required string pkgName = 1;</code>
     *
     * <pre>
     * primary key, ex: org.mitre.svmp.client
     * </pre>
     */
    boolean hasPkgName();
    /**
     * <code>required string pkgName = 1;</code>
     *
     * <pre>
     * primary key, ex: org.mitre.svmp.client
     * </pre>
     */
    java.lang.String getPkgName();
    /**
     * <code>required string pkgName = 1;</code>
     *
     * <pre>
     * primary key, ex: org.mitre.svmp.client
     * </pre>
     */
    com.google.protobuf.ByteString
        getPkgNameBytes();

    // required string appName = 2;
    /**
     * <code>required string appName = 2;</code>
     *
     * <pre>
     * user-friendly name, ex: SVMP Client
     * </pre>
     */
    boolean hasAppName();
    /**
     * <code>required string appName = 2;</code>
     *
     * <pre>
     * user-friendly name, ex: SVMP Client
     * </pre>
     */
    java.lang.String getAppName();
    /**
     * <code>required string appName = 2;</code>
     *
     * <pre>
     * user-friendly name, ex: SVMP Client
     * </pre>
     */
    com.google.protobuf.ByteString
        getAppNameBytes();

    // optional bytes icon = 3;
    /**
     * <code>optional bytes icon = 3;</code>
     *
     * <pre>
     * null in Request
     * </pre>
     */
    boolean hasIcon();
    /**
     * <code>optional bytes icon = 3;</code>
     *
     * <pre>
     * null in Request
     * </pre>
     */
    com.google.protobuf.ByteString getIcon();

    // optional bytes iconHash = 4;
    /**
     * <code>optional bytes iconHash = 4;</code>
     *
     * <pre>
     * null in Response
     * </pre>
     */
    boolean hasIconHash();
    /**
     * <code>optional bytes iconHash = 4;</code>
     *
     * <pre>
     * null in Response
     * </pre>
     */
    com.google.protobuf.ByteString getIconHash();
  }
  /**
   * Protobuf type {@code svmp.AppInfo}
   *
   * <pre>
   * C&lt;-&gt;S
   * </pre>
   */
  public static final class AppInfo extends
      com.google.protobuf.GeneratedMessageLite
      implements AppInfoOrBuilder {
    // Use AppInfo.newBuilder() to construct.
    private AppInfo(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private AppInfo(boolean noInit) {}

    private static final AppInfo defaultInstance;
    public static AppInfo getDefaultInstance() {
      return defaultInstance;
    }

    public AppInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private AppInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              pkgName_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              appName_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              icon_ = input.readBytes();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              iconHash_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<AppInfo> PARSER =
        new com.google.protobuf.AbstractParser<AppInfo>() {
      public AppInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AppInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AppInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string pkgName = 1;
    public static final int PKGNAME_FIELD_NUMBER = 1;
    private java.lang.Object pkgName_;
    /**
     * <code>required string pkgName = 1;</code>
     *
     * <pre>
     * primary key, ex: org.mitre.svmp.client
     * </pre>
     */
    public boolean hasPkgName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string pkgName = 1;</code>
     *
     * <pre>
     * primary key, ex: org.mitre.svmp.client
     * </pre>
     */
    public java.lang.String getPkgName() {
      java.lang.Object ref = pkgName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          pkgName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string pkgName = 1;</code>
     *
     * <pre>
     * primary key, ex: org.mitre.svmp.client
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPkgNameBytes() {
      java.lang.Object ref = pkgName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        pkgName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string appName = 2;
    public static final int APPNAME_FIELD_NUMBER = 2;
    private java.lang.Object appName_;
    /**
     * <code>required string appName = 2;</code>
     *
     * <pre>
     * user-friendly name, ex: SVMP Client
     * </pre>
     */
    public boolean hasAppName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string appName = 2;</code>
     *
     * <pre>
     * user-friendly name, ex: SVMP Client
     * </pre>
     */
    public java.lang.String getAppName() {
      java.lang.Object ref = appName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          appName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string appName = 2;</code>
     *
     * <pre>
     * user-friendly name, ex: SVMP Client
     * </pre>
     */
    public com.google.protobuf.ByteString
        getAppNameBytes() {
      java.lang.Object ref = appName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        appName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional bytes icon = 3;
    public static final int ICON_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString icon_;
    /**
     * <code>optional bytes icon = 3;</code>
     *
     * <pre>
     * null in Request
     * </pre>
     */
    public boolean hasIcon() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bytes icon = 3;</code>
     *
     * <pre>
     * null in Request
     * </pre>
     */
    public com.google.protobuf.ByteString getIcon() {
      return icon_;
    }

    // optional bytes iconHash = 4;
    public static final int ICONHASH_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString iconHash_;
    /**
     * <code>optional bytes iconHash = 4;</code>
     *
     * <pre>
     * null in Response
     * </pre>
     */
    public boolean hasIconHash() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bytes iconHash = 4;</code>
     *
     * <pre>
     * null in Response
     * </pre>
     */
    public com.google.protobuf.ByteString getIconHash() {
      return iconHash_;
    }

    private void initFields() {
      pkgName_ = "";
      appName_ = "";
      icon_ = com.google.protobuf.ByteString.EMPTY;
      iconHash_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPkgName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAppName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getPkgNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getAppNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, icon_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, iconHash_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getPkgNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getAppNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, icon_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, iconHash_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.AppInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.AppInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.AppInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.AppInfo}
     *
     * <pre>
     * C&lt;-&gt;S
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.AppInfo, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.AppInfoOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.AppInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        pkgName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        appName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        icon_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        iconHash_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.AppInfo getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.AppInfo.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.AppInfo build() {
        org.mitre.svmp.protocol.SVMPProtocol.AppInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.AppInfo buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.AppInfo result = new org.mitre.svmp.protocol.SVMPProtocol.AppInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.pkgName_ = pkgName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.appName_ = appName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.icon_ = icon_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.iconHash_ = iconHash_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.AppInfo other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.AppInfo.getDefaultInstance()) return this;
        if (other.hasPkgName()) {
          bitField0_ |= 0x00000001;
          pkgName_ = other.pkgName_;
          
        }
        if (other.hasAppName()) {
          bitField0_ |= 0x00000002;
          appName_ = other.appName_;
          
        }
        if (other.hasIcon()) {
          setIcon(other.getIcon());
        }
        if (other.hasIconHash()) {
          setIconHash(other.getIconHash());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPkgName()) {
          
          return false;
        }
        if (!hasAppName()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.AppInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.AppInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string pkgName = 1;
      private java.lang.Object pkgName_ = "";
      /**
       * <code>required string pkgName = 1;</code>
       *
       * <pre>
       * primary key, ex: org.mitre.svmp.client
       * </pre>
       */
      public boolean hasPkgName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string pkgName = 1;</code>
       *
       * <pre>
       * primary key, ex: org.mitre.svmp.client
       * </pre>
       */
      public java.lang.String getPkgName() {
        java.lang.Object ref = pkgName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          pkgName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string pkgName = 1;</code>
       *
       * <pre>
       * primary key, ex: org.mitre.svmp.client
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPkgNameBytes() {
        java.lang.Object ref = pkgName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          pkgName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string pkgName = 1;</code>
       *
       * <pre>
       * primary key, ex: org.mitre.svmp.client
       * </pre>
       */
      public Builder setPkgName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        pkgName_ = value;
        
        return this;
      }
      /**
       * <code>required string pkgName = 1;</code>
       *
       * <pre>
       * primary key, ex: org.mitre.svmp.client
       * </pre>
       */
      public Builder clearPkgName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pkgName_ = getDefaultInstance().getPkgName();
        
        return this;
      }
      /**
       * <code>required string pkgName = 1;</code>
       *
       * <pre>
       * primary key, ex: org.mitre.svmp.client
       * </pre>
       */
      public Builder setPkgNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        pkgName_ = value;
        
        return this;
      }

      // required string appName = 2;
      private java.lang.Object appName_ = "";
      /**
       * <code>required string appName = 2;</code>
       *
       * <pre>
       * user-friendly name, ex: SVMP Client
       * </pre>
       */
      public boolean hasAppName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string appName = 2;</code>
       *
       * <pre>
       * user-friendly name, ex: SVMP Client
       * </pre>
       */
      public java.lang.String getAppName() {
        java.lang.Object ref = appName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          appName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string appName = 2;</code>
       *
       * <pre>
       * user-friendly name, ex: SVMP Client
       * </pre>
       */
      public com.google.protobuf.ByteString
          getAppNameBytes() {
        java.lang.Object ref = appName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          appName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string appName = 2;</code>
       *
       * <pre>
       * user-friendly name, ex: SVMP Client
       * </pre>
       */
      public Builder setAppName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        appName_ = value;
        
        return this;
      }
      /**
       * <code>required string appName = 2;</code>
       *
       * <pre>
       * user-friendly name, ex: SVMP Client
       * </pre>
       */
      public Builder clearAppName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        appName_ = getDefaultInstance().getAppName();
        
        return this;
      }
      /**
       * <code>required string appName = 2;</code>
       *
       * <pre>
       * user-friendly name, ex: SVMP Client
       * </pre>
       */
      public Builder setAppNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        appName_ = value;
        
        return this;
      }

      // optional bytes icon = 3;
      private com.google.protobuf.ByteString icon_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes icon = 3;</code>
       *
       * <pre>
       * null in Request
       * </pre>
       */
      public boolean hasIcon() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bytes icon = 3;</code>
       *
       * <pre>
       * null in Request
       * </pre>
       */
      public com.google.protobuf.ByteString getIcon() {
        return icon_;
      }
      /**
       * <code>optional bytes icon = 3;</code>
       *
       * <pre>
       * null in Request
       * </pre>
       */
      public Builder setIcon(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        icon_ = value;
        
        return this;
      }
      /**
       * <code>optional bytes icon = 3;</code>
       *
       * <pre>
       * null in Request
       * </pre>
       */
      public Builder clearIcon() {
        bitField0_ = (bitField0_ & ~0x00000004);
        icon_ = getDefaultInstance().getIcon();
        
        return this;
      }

      // optional bytes iconHash = 4;
      private com.google.protobuf.ByteString iconHash_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes iconHash = 4;</code>
       *
       * <pre>
       * null in Response
       * </pre>
       */
      public boolean hasIconHash() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bytes iconHash = 4;</code>
       *
       * <pre>
       * null in Response
       * </pre>
       */
      public com.google.protobuf.ByteString getIconHash() {
        return iconHash_;
      }
      /**
       * <code>optional bytes iconHash = 4;</code>
       *
       * <pre>
       * null in Response
       * </pre>
       */
      public Builder setIconHash(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        iconHash_ = value;
        
        return this;
      }
      /**
       * <code>optional bytes iconHash = 4;</code>
       *
       * <pre>
       * null in Response
       * </pre>
       */
      public Builder clearIconHash() {
        bitField0_ = (bitField0_ & ~0x00000008);
        iconHash_ = getDefaultInstance().getIconHash();
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.AppInfo)
    }

    static {
      defaultInstance = new AppInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.AppInfo)
  }

  public interface KeyEventOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required int64 eventTime = 1;
    /**
     * <code>required int64 eventTime = 1;</code>
     */
    boolean hasEventTime();
    /**
     * <code>required int64 eventTime = 1;</code>
     */
    long getEventTime();

    // required int32 deviceId = 2;
    /**
     * <code>required int32 deviceId = 2;</code>
     */
    boolean hasDeviceId();
    /**
     * <code>required int32 deviceId = 2;</code>
     */
    int getDeviceId();

    // required int32 flags = 3;
    /**
     * <code>required int32 flags = 3;</code>
     */
    boolean hasFlags();
    /**
     * <code>required int32 flags = 3;</code>
     */
    int getFlags();

    // optional int64 downTime = 4;
    /**
     * <code>optional int64 downTime = 4;</code>
     *
     * <pre>
     * the following attributes are used whenever action is not ACTION_MULTIPLE, OR key code is not KEYCODE_UNKNOWN
     * </pre>
     */
    boolean hasDownTime();
    /**
     * <code>optional int64 downTime = 4;</code>
     *
     * <pre>
     * the following attributes are used whenever action is not ACTION_MULTIPLE, OR key code is not KEYCODE_UNKNOWN
     * </pre>
     */
    long getDownTime();

    // optional int32 action = 5;
    /**
     * <code>optional int32 action = 5;</code>
     */
    boolean hasAction();
    /**
     * <code>optional int32 action = 5;</code>
     */
    int getAction();

    // optional int32 code = 6;
    /**
     * <code>optional int32 code = 6;</code>
     */
    boolean hasCode();
    /**
     * <code>optional int32 code = 6;</code>
     */
    int getCode();

    // optional int32 repeat = 7;
    /**
     * <code>optional int32 repeat = 7;</code>
     */
    boolean hasRepeat();
    /**
     * <code>optional int32 repeat = 7;</code>
     */
    int getRepeat();

    // optional int32 metaState = 8;
    /**
     * <code>optional int32 metaState = 8;</code>
     */
    boolean hasMetaState();
    /**
     * <code>optional int32 metaState = 8;</code>
     */
    int getMetaState();

    // optional int32 scanCode = 9;
    /**
     * <code>optional int32 scanCode = 9;</code>
     */
    boolean hasScanCode();
    /**
     * <code>optional int32 scanCode = 9;</code>
     */
    int getScanCode();

    // optional int32 source = 10;
    /**
     * <code>optional int32 source = 10;</code>
     */
    boolean hasSource();
    /**
     * <code>optional int32 source = 10;</code>
     */
    int getSource();

    // optional string characters = 11;
    /**
     * <code>optional string characters = 11;</code>
     *
     * <pre>
     * this attribute is used for the special case of a ACTION_MULTIPLE event with key code of KEYCODE_UNKNOWN
     * </pre>
     */
    boolean hasCharacters();
    /**
     * <code>optional string characters = 11;</code>
     *
     * <pre>
     * this attribute is used for the special case of a ACTION_MULTIPLE event with key code of KEYCODE_UNKNOWN
     * </pre>
     */
    java.lang.String getCharacters();
    /**
     * <code>optional string characters = 11;</code>
     *
     * <pre>
     * this attribute is used for the special case of a ACTION_MULTIPLE event with key code of KEYCODE_UNKNOWN
     * </pre>
     */
    com.google.protobuf.ByteString
        getCharactersBytes();
  }
  /**
   * Protobuf type {@code svmp.KeyEvent}
   *
   * <pre>
   * C-&gt;S
   * </pre>
   */
  public static final class KeyEvent extends
      com.google.protobuf.GeneratedMessageLite
      implements KeyEventOrBuilder {
    // Use KeyEvent.newBuilder() to construct.
    private KeyEvent(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private KeyEvent(boolean noInit) {}

    private static final KeyEvent defaultInstance;
    public static KeyEvent getDefaultInstance() {
      return defaultInstance;
    }

    public KeyEvent getDefaultInstanceForType() {
      return defaultInstance;
    }

    private KeyEvent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              eventTime_ = input.readInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              deviceId_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              flags_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              downTime_ = input.readInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              action_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              code_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              repeat_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              metaState_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              scanCode_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              source_ = input.readInt32();
              break;
            }
            case 90: {
              bitField0_ |= 0x00000400;
              characters_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<KeyEvent> PARSER =
        new com.google.protobuf.AbstractParser<KeyEvent>() {
      public KeyEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new KeyEvent(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<KeyEvent> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int64 eventTime = 1;
    public static final int EVENTTIME_FIELD_NUMBER = 1;
    private long eventTime_;
    /**
     * <code>required int64 eventTime = 1;</code>
     */
    public boolean hasEventTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 eventTime = 1;</code>
     */
    public long getEventTime() {
      return eventTime_;
    }

    // required int32 deviceId = 2;
    public static final int DEVICEID_FIELD_NUMBER = 2;
    private int deviceId_;
    /**
     * <code>required int32 deviceId = 2;</code>
     */
    public boolean hasDeviceId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 deviceId = 2;</code>
     */
    public int getDeviceId() {
      return deviceId_;
    }

    // required int32 flags = 3;
    public static final int FLAGS_FIELD_NUMBER = 3;
    private int flags_;
    /**
     * <code>required int32 flags = 3;</code>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 flags = 3;</code>
     */
    public int getFlags() {
      return flags_;
    }

    // optional int64 downTime = 4;
    public static final int DOWNTIME_FIELD_NUMBER = 4;
    private long downTime_;
    /**
     * <code>optional int64 downTime = 4;</code>
     *
     * <pre>
     * the following attributes are used whenever action is not ACTION_MULTIPLE, OR key code is not KEYCODE_UNKNOWN
     * </pre>
     */
    public boolean hasDownTime() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int64 downTime = 4;</code>
     *
     * <pre>
     * the following attributes are used whenever action is not ACTION_MULTIPLE, OR key code is not KEYCODE_UNKNOWN
     * </pre>
     */
    public long getDownTime() {
      return downTime_;
    }

    // optional int32 action = 5;
    public static final int ACTION_FIELD_NUMBER = 5;
    private int action_;
    /**
     * <code>optional int32 action = 5;</code>
     */
    public boolean hasAction() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 action = 5;</code>
     */
    public int getAction() {
      return action_;
    }

    // optional int32 code = 6;
    public static final int CODE_FIELD_NUMBER = 6;
    private int code_;
    /**
     * <code>optional int32 code = 6;</code>
     */
    public boolean hasCode() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 code = 6;</code>
     */
    public int getCode() {
      return code_;
    }

    // optional int32 repeat = 7;
    public static final int REPEAT_FIELD_NUMBER = 7;
    private int repeat_;
    /**
     * <code>optional int32 repeat = 7;</code>
     */
    public boolean hasRepeat() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 repeat = 7;</code>
     */
    public int getRepeat() {
      return repeat_;
    }

    // optional int32 metaState = 8;
    public static final int METASTATE_FIELD_NUMBER = 8;
    private int metaState_;
    /**
     * <code>optional int32 metaState = 8;</code>
     */
    public boolean hasMetaState() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 metaState = 8;</code>
     */
    public int getMetaState() {
      return metaState_;
    }

    // optional int32 scanCode = 9;
    public static final int SCANCODE_FIELD_NUMBER = 9;
    private int scanCode_;
    /**
     * <code>optional int32 scanCode = 9;</code>
     */
    public boolean hasScanCode() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 scanCode = 9;</code>
     */
    public int getScanCode() {
      return scanCode_;
    }

    // optional int32 source = 10;
    public static final int SOURCE_FIELD_NUMBER = 10;
    private int source_;
    /**
     * <code>optional int32 source = 10;</code>
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 source = 10;</code>
     */
    public int getSource() {
      return source_;
    }

    // optional string characters = 11;
    public static final int CHARACTERS_FIELD_NUMBER = 11;
    private java.lang.Object characters_;
    /**
     * <code>optional string characters = 11;</code>
     *
     * <pre>
     * this attribute is used for the special case of a ACTION_MULTIPLE event with key code of KEYCODE_UNKNOWN
     * </pre>
     */
    public boolean hasCharacters() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional string characters = 11;</code>
     *
     * <pre>
     * this attribute is used for the special case of a ACTION_MULTIPLE event with key code of KEYCODE_UNKNOWN
     * </pre>
     */
    public java.lang.String getCharacters() {
      java.lang.Object ref = characters_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          characters_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string characters = 11;</code>
     *
     * <pre>
     * this attribute is used for the special case of a ACTION_MULTIPLE event with key code of KEYCODE_UNKNOWN
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCharactersBytes() {
      java.lang.Object ref = characters_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        characters_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      eventTime_ = 0L;
      deviceId_ = 0;
      flags_ = 0;
      downTime_ = 0L;
      action_ = 0;
      code_ = 0;
      repeat_ = 0;
      metaState_ = 0;
      scanCode_ = 0;
      source_ = 0;
      characters_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasEventTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDeviceId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFlags()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, eventTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, deviceId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, flags_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt64(4, downTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, action_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, code_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, repeat_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, metaState_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, scanCode_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, source_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBytes(11, getCharactersBytes());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, eventTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, deviceId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, flags_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, downTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, action_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, code_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, repeat_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, metaState_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, scanCode_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, source_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(11, getCharactersBytes());
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.KeyEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.KeyEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.KeyEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.KeyEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.KeyEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.KeyEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.KeyEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.KeyEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.KeyEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.KeyEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.KeyEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.KeyEvent}
     *
     * <pre>
     * C-&gt;S
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.KeyEvent, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.KeyEventOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.KeyEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        eventTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        deviceId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        flags_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        downTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        action_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        code_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        repeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        metaState_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        scanCode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        source_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        characters_ = "";
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.KeyEvent getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.KeyEvent.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.KeyEvent build() {
        org.mitre.svmp.protocol.SVMPProtocol.KeyEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.KeyEvent buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.KeyEvent result = new org.mitre.svmp.protocol.SVMPProtocol.KeyEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.eventTime_ = eventTime_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.deviceId_ = deviceId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.flags_ = flags_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.downTime_ = downTime_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.action_ = action_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.code_ = code_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.repeat_ = repeat_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.metaState_ = metaState_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.scanCode_ = scanCode_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.source_ = source_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.characters_ = characters_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.KeyEvent other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.KeyEvent.getDefaultInstance()) return this;
        if (other.hasEventTime()) {
          setEventTime(other.getEventTime());
        }
        if (other.hasDeviceId()) {
          setDeviceId(other.getDeviceId());
        }
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasDownTime()) {
          setDownTime(other.getDownTime());
        }
        if (other.hasAction()) {
          setAction(other.getAction());
        }
        if (other.hasCode()) {
          setCode(other.getCode());
        }
        if (other.hasRepeat()) {
          setRepeat(other.getRepeat());
        }
        if (other.hasMetaState()) {
          setMetaState(other.getMetaState());
        }
        if (other.hasScanCode()) {
          setScanCode(other.getScanCode());
        }
        if (other.hasSource()) {
          setSource(other.getSource());
        }
        if (other.hasCharacters()) {
          bitField0_ |= 0x00000400;
          characters_ = other.characters_;
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasEventTime()) {
          
          return false;
        }
        if (!hasDeviceId()) {
          
          return false;
        }
        if (!hasFlags()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.KeyEvent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.KeyEvent) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int64 eventTime = 1;
      private long eventTime_ ;
      /**
       * <code>required int64 eventTime = 1;</code>
       */
      public boolean hasEventTime() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 eventTime = 1;</code>
       */
      public long getEventTime() {
        return eventTime_;
      }
      /**
       * <code>required int64 eventTime = 1;</code>
       */
      public Builder setEventTime(long value) {
        bitField0_ |= 0x00000001;
        eventTime_ = value;
        
        return this;
      }
      /**
       * <code>required int64 eventTime = 1;</code>
       */
      public Builder clearEventTime() {
        bitField0_ = (bitField0_ & ~0x00000001);
        eventTime_ = 0L;
        
        return this;
      }

      // required int32 deviceId = 2;
      private int deviceId_ ;
      /**
       * <code>required int32 deviceId = 2;</code>
       */
      public boolean hasDeviceId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 deviceId = 2;</code>
       */
      public int getDeviceId() {
        return deviceId_;
      }
      /**
       * <code>required int32 deviceId = 2;</code>
       */
      public Builder setDeviceId(int value) {
        bitField0_ |= 0x00000002;
        deviceId_ = value;
        
        return this;
      }
      /**
       * <code>required int32 deviceId = 2;</code>
       */
      public Builder clearDeviceId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        deviceId_ = 0;
        
        return this;
      }

      // required int32 flags = 3;
      private int flags_ ;
      /**
       * <code>required int32 flags = 3;</code>
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 flags = 3;</code>
       */
      public int getFlags() {
        return flags_;
      }
      /**
       * <code>required int32 flags = 3;</code>
       */
      public Builder setFlags(int value) {
        bitField0_ |= 0x00000004;
        flags_ = value;
        
        return this;
      }
      /**
       * <code>required int32 flags = 3;</code>
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000004);
        flags_ = 0;
        
        return this;
      }

      // optional int64 downTime = 4;
      private long downTime_ ;
      /**
       * <code>optional int64 downTime = 4;</code>
       *
       * <pre>
       * the following attributes are used whenever action is not ACTION_MULTIPLE, OR key code is not KEYCODE_UNKNOWN
       * </pre>
       */
      public boolean hasDownTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int64 downTime = 4;</code>
       *
       * <pre>
       * the following attributes are used whenever action is not ACTION_MULTIPLE, OR key code is not KEYCODE_UNKNOWN
       * </pre>
       */
      public long getDownTime() {
        return downTime_;
      }
      /**
       * <code>optional int64 downTime = 4;</code>
       *
       * <pre>
       * the following attributes are used whenever action is not ACTION_MULTIPLE, OR key code is not KEYCODE_UNKNOWN
       * </pre>
       */
      public Builder setDownTime(long value) {
        bitField0_ |= 0x00000008;
        downTime_ = value;
        
        return this;
      }
      /**
       * <code>optional int64 downTime = 4;</code>
       *
       * <pre>
       * the following attributes are used whenever action is not ACTION_MULTIPLE, OR key code is not KEYCODE_UNKNOWN
       * </pre>
       */
      public Builder clearDownTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        downTime_ = 0L;
        
        return this;
      }

      // optional int32 action = 5;
      private int action_ ;
      /**
       * <code>optional int32 action = 5;</code>
       */
      public boolean hasAction() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 action = 5;</code>
       */
      public int getAction() {
        return action_;
      }
      /**
       * <code>optional int32 action = 5;</code>
       */
      public Builder setAction(int value) {
        bitField0_ |= 0x00000010;
        action_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 action = 5;</code>
       */
      public Builder clearAction() {
        bitField0_ = (bitField0_ & ~0x00000010);
        action_ = 0;
        
        return this;
      }

      // optional int32 code = 6;
      private int code_ ;
      /**
       * <code>optional int32 code = 6;</code>
       */
      public boolean hasCode() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 code = 6;</code>
       */
      public int getCode() {
        return code_;
      }
      /**
       * <code>optional int32 code = 6;</code>
       */
      public Builder setCode(int value) {
        bitField0_ |= 0x00000020;
        code_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 code = 6;</code>
       */
      public Builder clearCode() {
        bitField0_ = (bitField0_ & ~0x00000020);
        code_ = 0;
        
        return this;
      }

      // optional int32 repeat = 7;
      private int repeat_ ;
      /**
       * <code>optional int32 repeat = 7;</code>
       */
      public boolean hasRepeat() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 repeat = 7;</code>
       */
      public int getRepeat() {
        return repeat_;
      }
      /**
       * <code>optional int32 repeat = 7;</code>
       */
      public Builder setRepeat(int value) {
        bitField0_ |= 0x00000040;
        repeat_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 repeat = 7;</code>
       */
      public Builder clearRepeat() {
        bitField0_ = (bitField0_ & ~0x00000040);
        repeat_ = 0;
        
        return this;
      }

      // optional int32 metaState = 8;
      private int metaState_ ;
      /**
       * <code>optional int32 metaState = 8;</code>
       */
      public boolean hasMetaState() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 metaState = 8;</code>
       */
      public int getMetaState() {
        return metaState_;
      }
      /**
       * <code>optional int32 metaState = 8;</code>
       */
      public Builder setMetaState(int value) {
        bitField0_ |= 0x00000080;
        metaState_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 metaState = 8;</code>
       */
      public Builder clearMetaState() {
        bitField0_ = (bitField0_ & ~0x00000080);
        metaState_ = 0;
        
        return this;
      }

      // optional int32 scanCode = 9;
      private int scanCode_ ;
      /**
       * <code>optional int32 scanCode = 9;</code>
       */
      public boolean hasScanCode() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 scanCode = 9;</code>
       */
      public int getScanCode() {
        return scanCode_;
      }
      /**
       * <code>optional int32 scanCode = 9;</code>
       */
      public Builder setScanCode(int value) {
        bitField0_ |= 0x00000100;
        scanCode_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 scanCode = 9;</code>
       */
      public Builder clearScanCode() {
        bitField0_ = (bitField0_ & ~0x00000100);
        scanCode_ = 0;
        
        return this;
      }

      // optional int32 source = 10;
      private int source_ ;
      /**
       * <code>optional int32 source = 10;</code>
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 source = 10;</code>
       */
      public int getSource() {
        return source_;
      }
      /**
       * <code>optional int32 source = 10;</code>
       */
      public Builder setSource(int value) {
        bitField0_ |= 0x00000200;
        source_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 source = 10;</code>
       */
      public Builder clearSource() {
        bitField0_ = (bitField0_ & ~0x00000200);
        source_ = 0;
        
        return this;
      }

      // optional string characters = 11;
      private java.lang.Object characters_ = "";
      /**
       * <code>optional string characters = 11;</code>
       *
       * <pre>
       * this attribute is used for the special case of a ACTION_MULTIPLE event with key code of KEYCODE_UNKNOWN
       * </pre>
       */
      public boolean hasCharacters() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional string characters = 11;</code>
       *
       * <pre>
       * this attribute is used for the special case of a ACTION_MULTIPLE event with key code of KEYCODE_UNKNOWN
       * </pre>
       */
      public java.lang.String getCharacters() {
        java.lang.Object ref = characters_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          characters_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string characters = 11;</code>
       *
       * <pre>
       * this attribute is used for the special case of a ACTION_MULTIPLE event with key code of KEYCODE_UNKNOWN
       * </pre>
       */
      public com.google.protobuf.ByteString
          getCharactersBytes() {
        java.lang.Object ref = characters_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          characters_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string characters = 11;</code>
       *
       * <pre>
       * this attribute is used for the special case of a ACTION_MULTIPLE event with key code of KEYCODE_UNKNOWN
       * </pre>
       */
      public Builder setCharacters(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        characters_ = value;
        
        return this;
      }
      /**
       * <code>optional string characters = 11;</code>
       *
       * <pre>
       * this attribute is used for the special case of a ACTION_MULTIPLE event with key code of KEYCODE_UNKNOWN
       * </pre>
       */
      public Builder clearCharacters() {
        bitField0_ = (bitField0_ & ~0x00000400);
        characters_ = getDefaultInstance().getCharacters();
        
        return this;
      }
      /**
       * <code>optional string characters = 11;</code>
       *
       * <pre>
       * this attribute is used for the special case of a ACTION_MULTIPLE event with key code of KEYCODE_UNKNOWN
       * </pre>
       */
      public Builder setCharactersBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        characters_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.KeyEvent)
    }

    static {
      defaultInstance = new KeyEvent(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.KeyEvent)
  }

  public interface ConfigOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // optional bool hardKeyboard = 1;
    /**
     * <code>optional bool hardKeyboard = 1;</code>
     *
     * <pre>
     * whether or not we have a hard keyboard attached
     * </pre>
     */
    boolean hasHardKeyboard();
    /**
     * <code>optional bool hardKeyboard = 1;</code>
     *
     * <pre>
     * whether or not we have a hard keyboard attached
     * </pre>
     */
    boolean getHardKeyboard();
  }
  /**
   * Protobuf type {@code svmp.Config}
   *
   * <pre>
   * C-&gt;S
   * </pre>
   */
  public static final class Config extends
      com.google.protobuf.GeneratedMessageLite
      implements ConfigOrBuilder {
    // Use Config.newBuilder() to construct.
    private Config(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private Config(boolean noInit) {}

    private static final Config defaultInstance;
    public static Config getDefaultInstance() {
      return defaultInstance;
    }

    public Config getDefaultInstanceForType() {
      return defaultInstance;
    }

    private Config(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              hardKeyboard_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Config> PARSER =
        new com.google.protobuf.AbstractParser<Config>() {
      public Config parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Config(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Config> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bool hardKeyboard = 1;
    public static final int HARDKEYBOARD_FIELD_NUMBER = 1;
    private boolean hardKeyboard_;
    /**
     * <code>optional bool hardKeyboard = 1;</code>
     *
     * <pre>
     * whether or not we have a hard keyboard attached
     * </pre>
     */
    public boolean hasHardKeyboard() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool hardKeyboard = 1;</code>
     *
     * <pre>
     * whether or not we have a hard keyboard attached
     * </pre>
     */
    public boolean getHardKeyboard() {
      return hardKeyboard_;
    }

    private void initFields() {
      hardKeyboard_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, hardKeyboard_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, hardKeyboard_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mitre.svmp.protocol.SVMPProtocol.Config parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Config parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Config parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Config parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Config parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Config parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Config parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Config parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Config parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Config parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Config prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code svmp.Config}
     *
     * <pre>
     * C-&gt;S
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.Config, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.ConfigOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.Config.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        hardKeyboard_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Config getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.Config.getDefaultInstance();
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Config build() {
        org.mitre.svmp.protocol.SVMPProtocol.Config result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mitre.svmp.protocol.SVMPProtocol.Config buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.Config result = new org.mitre.svmp.protocol.SVMPProtocol.Config(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.hardKeyboard_ = hardKeyboard_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Config other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.Config.getDefaultInstance()) return this;
        if (other.hasHardKeyboard()) {
          setHardKeyboard(other.getHardKeyboard());
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mitre.svmp.protocol.SVMPProtocol.Config parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mitre.svmp.protocol.SVMPProtocol.Config) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bool hardKeyboard = 1;
      private boolean hardKeyboard_ ;
      /**
       * <code>optional bool hardKeyboard = 1;</code>
       *
       * <pre>
       * whether or not we have a hard keyboard attached
       * </pre>
       */
      public boolean hasHardKeyboard() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool hardKeyboard = 1;</code>
       *
       * <pre>
       * whether or not we have a hard keyboard attached
       * </pre>
       */
      public boolean getHardKeyboard() {
        return hardKeyboard_;
      }
      /**
       * <code>optional bool hardKeyboard = 1;</code>
       *
       * <pre>
       * whether or not we have a hard keyboard attached
       * </pre>
       */
      public Builder setHardKeyboard(boolean value) {
        bitField0_ |= 0x00000001;
        hardKeyboard_ = value;
        
        return this;
      }
      /**
       * <code>optional bool hardKeyboard = 1;</code>
       *
       * <pre>
       * whether or not we have a hard keyboard attached
       * </pre>
       */
      public Builder clearHardKeyboard() {
        bitField0_ = (bitField0_ & ~0x00000001);
        hardKeyboard_ = false;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:svmp.Config)
    }

    static {
      defaultInstance = new Config(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:svmp.Config)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
